{
    "OSSL_PARAM_allocate_from_text": "OSSL_PARAM_allocate_from_text() returns 1 if I<key> was found in I<paramdefs> and there was no other failure, otherwise 0.",
    "RSA_private_encrypt": "RSA_private_encrypt() returns the size of the signature (i.e., RSA_size(rsa)). RSA_public_decrypt() returns the size of the recovered message digest.",
    "RSA_public_decrypt": "RSA_private_encrypt() returns the size of the signature (i.e., RSA_size(rsa)). RSA_public_decrypt() returns the size of the recovered message digest.",
    "UI_UTIL_read_pw_string": "UI_UTIL_read_pw_string() and UI_UTIL_read_pw() return 0 on success or a negative value on error.",
    "UI_UTIL_read_pw": "UI_UTIL_read_pw_string() and UI_UTIL_read_pw() return 0 on success or a negative value on error.",
    "UI_UTIL_wrap_read_pem_callback": "UI_UTIL_wrap_read_pem_callback() returns a valid B<UI_METHOD> structure or NULL if an error occurred.",
    "UI_create_method": "UI_create_method() returns a UI_METHOD pointer on success, NULL on error.",
    "UI_method_set_opener": "UI_method_set_opener(), UI_method_set_writer(), UI_method_set_flusher(), UI_method_set_reader(), UI_method_set_closer(), UI_method_set_data_duplicator() and UI_method_set_prompt_constructor() return 0 on success, -1 if the given B<method> is NULL.",
    "UI_method_set_writer": "UI_method_set_opener(), UI_method_set_writer(), UI_method_set_flusher(), UI_method_set_reader(), UI_method_set_closer(), UI_method_set_data_duplicator() and UI_method_set_prompt_constructor() return 0 on success, -1 if the given B<method> is NULL.",
    "UI_method_set_flusher": "UI_method_set_opener(), UI_method_set_writer(), UI_method_set_flusher(), UI_method_set_reader(), UI_method_set_closer(), UI_method_set_data_duplicator() and UI_method_set_prompt_constructor() return 0 on success, -1 if the given B<method> is NULL.",
    "UI_method_set_reader": "UI_method_set_opener(), UI_method_set_writer(), UI_method_set_flusher(), UI_method_set_reader(), UI_method_set_closer(), UI_method_set_data_duplicator() and UI_method_set_prompt_constructor() return 0 on success, -1 if the given B<method> is NULL.",
    "UI_method_set_closer": "UI_method_set_opener(), UI_method_set_writer(), UI_method_set_flusher(), UI_method_set_reader(), UI_method_set_closer(), UI_method_set_data_duplicator() and UI_method_set_prompt_constructor() return 0 on success, -1 if the given B<method> is NULL.",
    "UI_method_set_data_duplicator": "UI_method_set_opener(), UI_method_set_writer(), UI_method_set_flusher(), UI_method_set_reader(), UI_method_set_closer(), UI_method_set_data_duplicator() and UI_method_set_prompt_constructor() return 0 on success, -1 if the given B<method> is NULL.",
    "UI_method_set_prompt_constructor": "UI_method_set_opener(), UI_method_set_writer(), UI_method_set_flusher(), UI_method_set_reader(), UI_method_set_closer(), UI_method_set_data_duplicator() and UI_method_set_prompt_constructor() return 0 on success, -1 if the given B<method> is NULL.",
    "UI_method_set_ex_data": "UI_method_set_ex_data() returns 1 on success and 0 on error (because CRYPTO_set_ex_data() does so).",
    "CRYPTO_set_ex_data": "CRYPTO_free_ex_index(), CRYPTO_alloc_ex_data() and CRYPTO_set_ex_data() return 1 on success or 0 on failure.",
    "UI_method_get_opener": "UI_method_get_opener(), UI_method_get_writer(), UI_method_get_flusher(), UI_method_get_reader(), UI_method_get_closer(), UI_method_get_data_duplicator(), UI_method_get_data_destructor() and UI_method_get_prompt_constructor() return the requested function pointer if it's set in the method, otherwise NULL.",
    "UI_method_get_writer": "UI_method_get_opener(), UI_method_get_writer(), UI_method_get_flusher(), UI_method_get_reader(), UI_method_get_closer(), UI_method_get_data_duplicator(), UI_method_get_data_destructor() and UI_method_get_prompt_constructor() return the requested function pointer if it's set in the method, otherwise NULL.",
    "UI_method_get_flusher": "UI_method_get_opener(), UI_method_get_writer(), UI_method_get_flusher(), UI_method_get_reader(), UI_method_get_closer(), UI_method_get_data_duplicator(), UI_method_get_data_destructor() and UI_method_get_prompt_constructor() return the requested function pointer if it's set in the method, otherwise NULL.",
    "UI_method_get_reader": "UI_method_get_opener(), UI_method_get_writer(), UI_method_get_flusher(), UI_method_get_reader(), UI_method_get_closer(), UI_method_get_data_duplicator(), UI_method_get_data_destructor() and UI_method_get_prompt_constructor() return the requested function pointer if it's set in the method, otherwise NULL.",
    "UI_method_get_closer": "UI_method_get_opener(), UI_method_get_writer(), UI_method_get_flusher(), UI_method_get_reader(), UI_method_get_closer(), UI_method_get_data_duplicator(), UI_method_get_data_destructor() and UI_method_get_prompt_constructor() return the requested function pointer if it's set in the method, otherwise NULL.",
    "UI_method_get_data_duplicator": "UI_method_get_opener(), UI_method_get_writer(), UI_method_get_flusher(), UI_method_get_reader(), UI_method_get_closer(), UI_method_get_data_duplicator(), UI_method_get_data_destructor() and UI_method_get_prompt_constructor() return the requested function pointer if it's set in the method, otherwise NULL.",
    "UI_method_get_data_destructor": "UI_method_get_opener(), UI_method_get_writer(), UI_method_get_flusher(), UI_method_get_reader(), UI_method_get_closer(), UI_method_get_data_duplicator(), UI_method_get_data_destructor() and UI_method_get_prompt_constructor() return the requested function pointer if it's set in the method, otherwise NULL.",
    "UI_method_get_prompt_constructor": "UI_method_get_opener(), UI_method_get_writer(), UI_method_get_flusher(), UI_method_get_reader(), UI_method_get_closer(), UI_method_get_data_duplicator(), UI_method_get_data_destructor() and UI_method_get_prompt_constructor() return the requested function pointer if it's set in the method, otherwise NULL.",
    "UI_method_get_ex_data": "UI_method_get_ex_data() returns a pointer to the application specific data associated with the method.",
    "X509_PUBKEY_new": "If the allocation fails, X509_PUBKEY_new() and X509_PUBKEY_dup() return NULL and set an error code that can be obtained by L<ERR_get_error(3)>. Otherwise they return a pointer to the newly allocated structure.",
    "X509_PUBKEY_dup": "If the allocation fails, X509_PUBKEY_new() and X509_PUBKEY_dup() return NULL and set an error code that can be obtained by L<ERR_get_error(3)>. Otherwise they return a pointer to the newly allocated structure.",
    "X509_PUBKEY_free": "X509_PUBKEY_free() does not return a value.",
    "X509_PUBKEY_get0": "X509_PUBKEY_get0() and X509_PUBKEY_get() return a pointer to an B<EVP_PKEY> structure or NULL if an error occurs.",
    "X509_PUBKEY_get": "X509_PUBKEY_get0() and X509_PUBKEY_get() return a pointer to an B<EVP_PKEY> structure or NULL if an error occurs.",
    "X509_PUBKEY_set": "X509_PUBKEY_set(), X509_PUBKEY_set0_param() and X509_PUBKEY_get0_param() return 1 for success and 0 if an error occurred.",
    "X509_PUBKEY_set0_param": "X509_PUBKEY_set(), X509_PUBKEY_set0_param() and X509_PUBKEY_get0_param() return 1 for success and 0 if an error occurred.",
    "X509_PUBKEY_get0_param": "X509_PUBKEY_set(), X509_PUBKEY_set0_param() and X509_PUBKEY_get0_param() return 1 for success and 0 if an error occurred.",
    "X509_PUBKEY_eq": "X509_PUBKEY_eq() returns 1 for equal, 0 for different, and < 0 on error.",
    "PKCS7_sign_ex": "PKCS7_sign_ex() and PKCS7_sign() return either a valid PKCS7 structure or NULL if an error occurred.  The error can be obtained from ERR_get_error(3).",
    "PKCS7_sign": "PKCS7_sign_ex() and PKCS7_sign() return either a valid PKCS7 structure or NULL if an error occurred.  The error can be obtained from ERR_get_error(3).",
    "OSSL_CMP_SRV_CTX_new": "OSSL_CMP_SRV_CTX_new() returns a B<OSSL_CMP_SRV_CTX> structure on success, NULL on error.",
    "OSSL_CMP_SRV_CTX_free": "OSSL_CMP_SRV_CTX_free() does not return a value.",
    "OSSL_CMP_SRV_CTX_get0_cmp_ctx": "OSSL_CMP_SRV_CTX_get0_cmp_ctx() returns a B<OSSL_CMP_CTX> structure on success, NULL on error.",
    "OSSL_CMP_SRV_CTX_get0_custom_ctx": "OSSL_CMP_SRV_CTX_get0_custom_ctx() returns the custom server context that has been set using OSSL_CMP_SRV_CTX_init().",
    "OSSL_CMP_SRV_CTX_init": "OSSL_CMP_SRV_CTX_get0_custom_ctx() returns the custom server context that has been set using OSSL_CMP_SRV_CTX_init().",
    "EVP_set_default_properties": "EVP_set_default_properties() and  EVP_default_properties_enable_fips() return 1 on success, or 0 on failure. An error is placed on the error stack if a failure occurs.",
    "EVP_default_properties_enable_fips": "EVP_set_default_properties() and  EVP_default_properties_enable_fips() return 1 on success, or 0 on failure. An error is placed on the error stack if a failure occurs.",
    "EVP_default_properties_is_fips_enabled": "EVP_default_properties_is_fips_enabled() returns 1 if the 'fips=yes' default property is set for the given I<libctx>, otherwise it returns 0.",
    "SSL_read_ex": "Caveat: Any TLS/SSL I/O function can lead to either of B<SSL_ERROR_WANT_READ> and B<SSL_ERROR_WANT_WRITE>. In particular, SSL_read_ex(), SSL_read(), SSL_peek_ex(), or SSL_peek() may want to write data and SSL_write() or SSL_write_ex() may want to read data. This is mainly because TLS/SSL handshakes may occur at any time during the protocol (initiated by either the client or the server); SSL_read_ex(), SSL_read(), SSL_peek_ex(), SSL_peek(), SSL_write_ex(), and SSL_write() will handle any pending handshakes.",
    "SSL_peek_ex": "Caveat: Any TLS/SSL I/O function can lead to either of B<SSL_ERROR_WANT_READ> and B<SSL_ERROR_WANT_WRITE>. In particular, SSL_read_ex(), SSL_read(), SSL_peek_ex(), or SSL_peek() may want to write data and SSL_write() or SSL_write_ex() may want to read data. This is mainly because TLS/SSL handshakes may occur at any time during the protocol (initiated by either the client or the server); SSL_read_ex(), SSL_read(), SSL_peek_ex(), SSL_peek(), SSL_write_ex(), and SSL_write() will handle any pending handshakes.",
    "SSL_read": "It can also occur when not all data was read using SSL_read().",
    "SSL_peek": "Caveat: Any TLS/SSL I/O function can lead to either of B<SSL_ERROR_WANT_READ> and B<SSL_ERROR_WANT_WRITE>. In particular, SSL_read_ex(), SSL_read(), SSL_peek_ex(), or SSL_peek() may want to write data and SSL_write() or SSL_write_ex() may want to read data. This is mainly because TLS/SSL handshakes may occur at any time during the protocol (initiated by either the client or the server); SSL_read_ex(), SSL_read(), SSL_peek_ex(), SSL_peek(), SSL_write_ex(), and SSL_write() will handle any pending handshakes.",
    "SSL_get_error": "The TLS/SSL handshake was not successful, because a fatal error occurred either at the protocol level or a connection failure occurred. The shutdown was not clean. It can also occur if action is needed to continue the operation for nonblocking BIOs. Call SSL_get_error() with the return value B<ret> to find out the reason.",
    "RSA_sign": "RSA_sign() returns 1 on success. RSA_verify() returns 1 on successful verification.",
    "RSA_verify": "RSA_sign() returns 1 on success. RSA_verify() returns 1 on successful verification.",
    "EVP_CIPHER_fetch": "EVP_CIPHER_fetch() returns a pointer to a B<EVP_CIPHER> for success and B<NULL> for failure.",
    "EVP_CIPHER_up_ref": "EVP_CIPHER_up_ref() returns 1 for success or 0 otherwise.",
    "EVP_CIPHER_CTX_new": "EVP_CIPHER_CTX_new() returns a pointer to a newly created B<EVP_CIPHER_CTX> for success and B<NULL> for failure.",
    "EVP_EncryptInit_ex2": "EVP_EncryptInit_ex2(), EVP_EncryptUpdate() and EVP_EncryptFinal_ex() return 1 for success and 0 for failure.",
    "EVP_EncryptUpdate": "EVP_EncryptInit_ex2(), EVP_EncryptUpdate() and EVP_EncryptFinal_ex() return 1 for success and 0 for failure.",
    "EVP_EncryptFinal_ex": "EVP_EncryptInit_ex2(), EVP_EncryptUpdate() and EVP_EncryptFinal_ex() return 1 for success and 0 for failure.",
    "EVP_DecryptInit_ex2": "EVP_DecryptInit_ex2() and EVP_DecryptUpdate() return 1 for success and 0 for failure. EVP_DecryptFinal_ex() returns 0 if the decrypt failed or 1 for success.",
    "EVP_DecryptUpdate": "EVP_DecryptInit_ex2() and EVP_DecryptUpdate() return 1 for success and 0 for failure. EVP_DecryptFinal_ex() returns 0 if the decrypt failed or 1 for success.",
    "EVP_DecryptFinal_ex": "EVP_DecryptInit_ex2() and EVP_DecryptUpdate() return 1 for success and 0 for failure. EVP_DecryptFinal_ex() returns 0 if the decrypt failed or 1 for success.",
    "EVP_CipherInit_ex2": "EVP_CipherInit_ex2() and EVP_CipherUpdate() return 1 for success and 0 for failure. EVP_CipherFinal_ex() returns 0 for a decryption failure or 1 for success.",
    "EVP_CipherUpdate": "EVP_CipherInit_ex2() and EVP_CipherUpdate() return 1 for success and 0 for failure. EVP_CipherFinal_ex() returns 0 for a decryption failure or 1 for success.",
    "EVP_CipherFinal_ex": "EVP_CipherInit_ex2() and EVP_CipherUpdate() return 1 for success and 0 for failure. EVP_CipherFinal_ex() returns 0 for a decryption failure or 1 for success.",
    "EVP_Cipher": "EVP_Cipher() returns the amount of encrypted / decrypted bytes, or -1 on failure if the flag B<EVP_CIPH_FLAG_CUSTOM_CIPHER> is set for the cipher.  EVP_Cipher() returns 1 on success or 0 on failure, if the flag B<EVP_CIPH_FLAG_CUSTOM_CIPHER> is not set for the cipher.",
    "EVP_CIPHER_CTX_reset": "EVP_CIPHER_CTX_reset() returns 1 for success and 0 for failure.",
    "EVP_get_cipherbyname": "EVP_get_cipherbyname(), EVP_get_cipherbynid() and EVP_get_cipherbyobj() return an B<EVP_CIPHER> structure or NULL on error.",
    "EVP_get_cipherbynid": "EVP_get_cipherbyname(), EVP_get_cipherbynid() and EVP_get_cipherbyobj() return an B<EVP_CIPHER> structure or NULL on error.",
    "EVP_get_cipherbyobj": "EVP_get_cipherbyname(), EVP_get_cipherbynid() and EVP_get_cipherbyobj() return an B<EVP_CIPHER> structure or NULL on error.",
    "EVP_CIPHER_get_nid": "EVP_CIPHER_get_nid() and EVP_CIPHER_CTX_get_nid() return a NID.",
    "EVP_CIPHER_CTX_get_nid": "EVP_CIPHER_get_nid() and EVP_CIPHER_CTX_get_nid() return a NID.",
    "EVP_CIPHER_get_block_size": "EVP_CIPHER_get_block_size() and EVP_CIPHER_CTX_get_block_size() return the block size.",
    "EVP_CIPHER_CTX_get_block_size": "EVP_CIPHER_get_block_size() and EVP_CIPHER_CTX_get_block_size() return the block size.",
    "EVP_CIPHER_get_key_length": "EVP_CIPHER_get_key_length() and EVP_CIPHER_CTX_get_key_length() return the key length.",
    "EVP_CIPHER_CTX_get_key_length": "EVP_CIPHER_get_key_length() and EVP_CIPHER_CTX_get_key_length() return the key length.",
    "EVP_CIPHER_CTX_set_padding": "EVP_CIPHER_CTX_set_padding() always returns 1.",
    "EVP_CIPHER_get_iv_length": "EVP_CIPHER_get_iv_length() and EVP_CIPHER_CTX_get_iv_length() return the IV length or zero if the cipher does not use an IV.",
    "EVP_CIPHER_CTX_get_iv_length": "EVP_CIPHER_get_iv_length() and EVP_CIPHER_CTX_get_iv_length() return the IV length or zero if the cipher does not use an IV.",
    "EVP_CIPHER_CTX_get_tag_length": "EVP_CIPHER_CTX_get_tag_length() return the tag length or zero if the cipher does not use a tag.",
    "EVP_CIPHER_get_type": "EVP_CIPHER_get_type() and EVP_CIPHER_CTX_get_type() return the NID of the cipher's OBJECT IDENTIFIER or NID_undef if it has no defined OBJECT IDENTIFIER.",
    "EVP_CIPHER_CTX_get_type": "EVP_CIPHER_get_type() and EVP_CIPHER_CTX_get_type() return the NID of the cipher's OBJECT IDENTIFIER or NID_undef if it has no defined OBJECT IDENTIFIER.",
    "EVP_CIPHER_CTX_cipher": "EVP_CIPHER_CTX_cipher() returns an B<EVP_CIPHER> structure.",
    "EVP_CIPHER_CTX_get_num": "EVP_CIPHER_CTX_get_num() returns a nonnegative num value or B<EVP_CTRL_RET_UNSUPPORTED> if the implementation does not support the call or on any other error.",
    "EVP_CIPHER_CTX_set_num": "EVP_CIPHER_CTX_set_num() returns 1 on success and 0 if the implementation does not support the call or on any other error.",
    "EVP_CIPHER_CTX_is_encrypting": "EVP_CIPHER_CTX_is_encrypting() returns 1 if the I<ctx> is set up for encryption 0 otherwise.",
    "EVP_CIPHER_param_to_asn1": "EVP_CIPHER_param_to_asn1() and EVP_CIPHER_asn1_to_param() return greater than zero for success and zero or a negative number on failure.",
    "EVP_CIPHER_asn1_to_param": "EVP_CIPHER_param_to_asn1() and EVP_CIPHER_asn1_to_param() return greater than zero for success and zero or a negative number on failure.",
    "EVP_CIPHER_CTX_rand_key": "EVP_CIPHER_CTX_rand_key() returns 1 for success.",
    "EVP_CIPHER_names_do_all": "EVP_CIPHER_names_do_all() returns 1 if the callback was called for all names. A return value of 0 means that the callback was not called for any names.",
    "CMS_data_create_ex": "If the allocation fails, CMS_data_create_ex() and CMS_data_create() return NULL and set an error code that can be obtained by L<ERR_get_error(3)>. Otherwise they return a pointer to the newly allocated structure.",
    "CMS_data_create": "If the allocation fails, CMS_data_create_ex() and CMS_data_create() return NULL and set an error code that can be obtained by L<ERR_get_error(3)>. Otherwise they return a pointer to the newly allocated structure.",
    "BIO_push": "BIO_push() returns the end of the chain, B<b>.",
    "BIO_pop": "BIO_pop() returns the next BIO in the chain, or NULL if there is no next BIO.",
    "OSSL_ENCODER_to_bio": "OSSL_ENCODER_to_bio(), OSSL_ENCODER_to_fp() and OSSL_ENCODER_to_data() return 1 on success, or 0 on failure.",
    "OSSL_ENCODER_to_fp": "OSSL_ENCODER_to_bio(), OSSL_ENCODER_to_fp() and OSSL_ENCODER_to_data() return 1 on success, or 0 on failure.",
    "OSSL_ENCODER_to_data": "OSSL_ENCODER_to_bio(), OSSL_ENCODER_to_fp() and OSSL_ENCODER_to_data() return 1 on success, or 0 on failure.",
    "X509_STORE_CTX_set_verify_cb": "X509_STORE_CTX_set_verify_cb() does not return a value.",
    "SSL_COMP_add_compression_method": "SSL_COMP_add_compression_method() may return the following values:",
    "SSL_COMP_get_compression_methods": "SSL_COMP_get_compression_methods() returns the stack of compressions methods or NULL on error.",
    "SSL_COMP_get0_name": "SSL_COMP_get0_name() returns the name of the compression method or NULL on error.",
    "SSL_COMP_get_id": "SSL_COMP_get_id() returns the name of the compression method or -1 on error.",
    "CMS_EncryptedData_decrypt": "CMS_EncryptedData_decrypt() returns 0 if an error occurred otherwise it returns 1.",
    "PEM_bytes_read_bio": "PEM_bytes_read_bio() and PEM_bytes_read_bio_secmem() return 1 for success or 0 for failure.",
    "PEM_bytes_read_bio_secmem": "PEM_bytes_read_bio() and PEM_bytes_read_bio_secmem() return 1 for success or 0 for failure.",
    "SSL_CTX_set_session_cache_mode": "SSL_CTX_set_session_cache_mode() returns the previously set cache mode.",
    "SSL_CTX_get_session_cache_mode": "SSL_CTX_get_session_cache_mode() returns the currently set cache mode.",
    "EVP_CIPHER_meth_new": "EVP_CIPHER_meth_new() and EVP_CIPHER_meth_dup() return a pointer to a newly created B<EVP_CIPHER>, or NULL on failure. All EVP_CIPHER_meth_set_*() functions return 1. All EVP_CIPHER_meth_get_*() functions return pointers to their respective B<cipher> function.",
    "EVP_CIPHER_meth_dup": "EVP_CIPHER_meth_new() and EVP_CIPHER_meth_dup() return a pointer to a newly created B<EVP_CIPHER>, or NULL on failure. All EVP_CIPHER_meth_set_*() functions return 1. All EVP_CIPHER_meth_get_*() functions return pointers to their respective B<cipher> function.",
    "X509_digest_sig": "X509_digest_sig() returns an ASN1_OCTET_STRING on success, else NULL.",
    "SSL_SESSION_set1_id_context": "SSL_SESSION_set1_id_context() returns 1 on success or 0 on error.",
    "SSL_CTX_get_keylog_callback": "SSL_CTX_get_keylog_callback() returns a pointer to B<SSL_CTX_keylog_cb_func> or NULL if the callback is not set.",
    "BIO_f_md": "BIO_f_md() returns the digest BIO method.",
    "BIO_set_md": "BIO_set_md(), BIO_get_md() and BIO_md_ctx() return 1 for success and 0 for failure.",
    "BIO_get_md": "BIO_set_md(), BIO_get_md() and BIO_md_ctx() return 1 for success and 0 for failure.",
    "BIO_md_ctx": "BIO_set_md(), BIO_get_md() and BIO_md_ctx() return 1 for success and 0 for failure.",
    "SCT_validation_status_string": "SCT_validation_status_string() returns a null-terminated string representing the validation status of an B<SCT> object.",
    "SSL_CTX_set_session_id_context": "SSL_CTX_set_session_id_context() and SSL_set_session_id_context() return the following values:",
    "SSL_set_session_id_context": "SSL_CTX_set_session_id_context() and SSL_set_session_id_context() return the following values:",
    "ASN1_OBJECT_new": "If the allocation fails, ASN1_OBJECT_new() returns NULL and sets an error code that can be obtained by L<ERR_get_error(3)>. Otherwise it returns a pointer to the newly allocated structure.",
    "ASN1_OBJECT_free": "ASN1_OBJECT_free() returns no value.",
    "EC_KEY_new_ex": "EC_KEY_new_ex(), EC_KEY_new(), EC_KEY_new_by_curve_name_ex(), EC_KEY_new_by_curve_name() and EC_KEY_dup() return a pointer to the newly created EC_KEY object, or NULL on error.",
    "EC_KEY_new": "EC_KEY_new_ex(), EC_KEY_new(), EC_KEY_new_by_curve_name_ex(), EC_KEY_new_by_curve_name() and EC_KEY_dup() return a pointer to the newly created EC_KEY object, or NULL on error.",
    "EC_KEY_new_by_curve_name_ex": "EC_KEY_new_ex(), EC_KEY_new(), EC_KEY_new_by_curve_name_ex(), EC_KEY_new_by_curve_name() and EC_KEY_dup() return a pointer to the newly created EC_KEY object, or NULL on error.",
    "EC_KEY_new_by_curve_name": "EC_KEY_new_ex(), EC_KEY_new(), EC_KEY_new_by_curve_name_ex(), EC_KEY_new_by_curve_name() and EC_KEY_dup() return a pointer to the newly created EC_KEY object, or NULL on error.",
    "EC_KEY_dup": "EC_KEY_new_ex(), EC_KEY_new(), EC_KEY_new_by_curve_name_ex(), EC_KEY_new_by_curve_name() and EC_KEY_dup() return a pointer to the newly created EC_KEY object, or NULL on error.",
    "EC_KEY_get_flags": "EC_KEY_get_flags() returns the flags associated with the EC_KEY object as an integer.",
    "EC_KEY_copy": "EC_KEY_copy() returns a pointer to the destination key, or NULL on error.",
    "EC_KEY_get0_engine": "EC_KEY_get0_engine() returns a pointer to an ENGINE, or NULL if it wasn't set.",
    "EC_KEY_up_ref": "EC_KEY_up_ref(), EC_KEY_set_group(), EC_KEY_set_private_key(), EC_KEY_set_public_key(), EC_KEY_precompute_mult(), EC_KEY_generate_key(), EC_KEY_check_key(), EC_KEY_set_public_key_affine_coordinates(), EC_KEY_oct2key() and EC_KEY_oct2priv() return 1 on success or 0 on error.",
    "EC_KEY_set_group": "EC_KEY_up_ref(), EC_KEY_set_group(), EC_KEY_set_private_key(), EC_KEY_set_public_key(), EC_KEY_precompute_mult(), EC_KEY_generate_key(), EC_KEY_check_key(), EC_KEY_set_public_key_affine_coordinates(), EC_KEY_oct2key() and EC_KEY_oct2priv() return 1 on success or 0 on error.",
    "EC_KEY_set_private_key": "EC_KEY_up_ref(), EC_KEY_set_group(), EC_KEY_set_private_key(), EC_KEY_set_public_key(), EC_KEY_precompute_mult(), EC_KEY_generate_key(), EC_KEY_check_key(), EC_KEY_set_public_key_affine_coordinates(), EC_KEY_oct2key() and EC_KEY_oct2priv() return 1 on success or 0 on error.",
    "EC_KEY_set_public_key": "EC_KEY_up_ref(), EC_KEY_set_group(), EC_KEY_set_private_key(), EC_KEY_set_public_key(), EC_KEY_precompute_mult(), EC_KEY_generate_key(), EC_KEY_check_key(), EC_KEY_set_public_key_affine_coordinates(), EC_KEY_oct2key() and EC_KEY_oct2priv() return 1 on success or 0 on error.",
    "EC_KEY_precompute_mult": "EC_KEY_up_ref(), EC_KEY_set_group(), EC_KEY_set_private_key(), EC_KEY_set_public_key(), EC_KEY_precompute_mult(), EC_KEY_generate_key(), EC_KEY_check_key(), EC_KEY_set_public_key_affine_coordinates(), EC_KEY_oct2key() and EC_KEY_oct2priv() return 1 on success or 0 on error.",
    "EC_KEY_generate_key": "EC_KEY_up_ref(), EC_KEY_set_group(), EC_KEY_set_private_key(), EC_KEY_set_public_key(), EC_KEY_precompute_mult(), EC_KEY_generate_key(), EC_KEY_check_key(), EC_KEY_set_public_key_affine_coordinates(), EC_KEY_oct2key() and EC_KEY_oct2priv() return 1 on success or 0 on error.",
    "EC_KEY_check_key": "EC_KEY_up_ref(), EC_KEY_set_group(), EC_KEY_set_private_key(), EC_KEY_set_public_key(), EC_KEY_precompute_mult(), EC_KEY_generate_key(), EC_KEY_check_key(), EC_KEY_set_public_key_affine_coordinates(), EC_KEY_oct2key() and EC_KEY_oct2priv() return 1 on success or 0 on error.",
    "EC_KEY_set_public_key_affine_coordinates": "EC_KEY_up_ref(), EC_KEY_set_group(), EC_KEY_set_private_key(), EC_KEY_set_public_key(), EC_KEY_precompute_mult(), EC_KEY_generate_key(), EC_KEY_check_key(), EC_KEY_set_public_key_affine_coordinates(), EC_KEY_oct2key() and EC_KEY_oct2priv() return 1 on success or 0 on error.",
    "EC_KEY_oct2key": "EC_KEY_up_ref(), EC_KEY_set_group(), EC_KEY_set_private_key(), EC_KEY_set_public_key(), EC_KEY_precompute_mult(), EC_KEY_generate_key(), EC_KEY_check_key(), EC_KEY_set_public_key_affine_coordinates(), EC_KEY_oct2key() and EC_KEY_oct2priv() return 1 on success or 0 on error.",
    "EC_KEY_oct2priv": "EC_KEY_up_ref(), EC_KEY_set_group(), EC_KEY_set_private_key(), EC_KEY_set_public_key(), EC_KEY_precompute_mult(), EC_KEY_generate_key(), EC_KEY_check_key(), EC_KEY_set_public_key_affine_coordinates(), EC_KEY_oct2key() and EC_KEY_oct2priv() return 1 on success or 0 on error.",
    "EC_KEY_get0_group": "EC_KEY_get0_group() returns the EC_GROUP associated with the EC_KEY.",
    "EC_KEY_get0_private_key": "EC_KEY_get0_private_key() returns the private key associated with the EC_KEY.",
    "EC_KEY_get_conv_form": "EC_KEY_get_conv_form() return the point_conversion_form for the EC_KEY.",
    "EC_KEY_key2buf": "EC_KEY_key2buf(), EC_KEY_priv2oct() and EC_KEY_priv2buf() return the length of the buffer or 0 on error.",
    "EC_KEY_priv2oct": "EC_KEY_key2buf(), EC_KEY_priv2oct() and EC_KEY_priv2buf() return the length of the buffer or 0 on error.",
    "EC_KEY_priv2buf": "EC_KEY_key2buf(), EC_KEY_priv2oct() and EC_KEY_priv2buf() return the length of the buffer or 0 on error.",
    "OSSL_STORE_expect": "The functions with the types B<OSSL_STORE_open_fn>, B<OSSL_STORE_open_ex_fn>, B<OSSL_STORE_ctrl_fn>, B<OSSL_STORE_expect_fn>, B<OSSL_STORE_load_fn>, B<OSSL_STORE_eof_fn> and B<OSSL_STORE_close_fn> have the same return values as OSSL_STORE_open(), OSSL_STORE_open_ex(), OSSL_STORE_ctrl(), OSSL_STORE_expect(), OSSL_STORE_load(), OSSL_STORE_eof() and OSSL_STORE_close(), respectively.",
    "OSSL_STORE_supports_search": "OSSL_STORE_supports_search() returns 1 if the criterion is supported, or 0 otherwise.",
    "OSSL_STORE_find": "OSSL_STORE_find() returns 1 on success, or 0 on failure.",
    "BN_generate_prime_ex": "BN_generate_prime_ex() return 1 on success or 0 on error.",
    "BN_is_prime_ex": "BN_is_prime_ex(), BN_is_prime_fasttest_ex(), BN_is_prime(), BN_is_prime_fasttest() and BN_check_prime return 0 if the number is composite, 1 if it is prime with an error probability of less than 0.25^B<nchecks>, and -1 on error.",
    "BN_is_prime_fasttest_ex": "BN_is_prime_ex(), BN_is_prime_fasttest_ex(), BN_is_prime(), BN_is_prime_fasttest() and BN_check_prime return 0 if the number is composite, 1 if it is prime with an error probability of less than 0.25^B<nchecks>, and -1 on error.",
    "BN_is_prime": "BN_is_prime_ex(), BN_is_prime_fasttest_ex(), BN_is_prime(), BN_is_prime_fasttest() and BN_check_prime return 0 if the number is composite, 1 if it is prime with an error probability of less than 0.25^B<nchecks>, and -1 on error.",
    "BN_is_prime_fasttest": "BN_is_prime_ex(), BN_is_prime_fasttest_ex(), BN_is_prime(), BN_is_prime_fasttest() and BN_check_prime return 0 if the number is composite, 1 if it is prime with an error probability of less than 0.25^B<nchecks>, and -1 on error.",
    "BN_generate_prime": "BN_generate_prime() returns the prime number on success, B<NULL> otherwise.",
    "PKCS12_newpass": "PKCS12_newpass() returns 1 on success or 0 on failure. Applications can retrieve the most recent error from PKCS12_newpass() with ERR_get_error().",
    "ERR_get_error": "PKCS12_newpass() returns 1 on success or 0 on failure. Applications can retrieve the most recent error from PKCS12_newpass() with ERR_get_error().",
    "DH_generate_parameters_ex": "DH_generate_parameters_ex(), DH_check() and DH_check_params() return 1 if the check could be performed, 0 otherwise.",
    "DH_check": "DH_generate_parameters_ex(), DH_check() and DH_check_params() return 1 if the check could be performed, 0 otherwise.",
    "DH_check_params": "DH_check_ex(), DH_check_params() and DH_check_pub_key_ex() return 1 if the check is successful, 0 for failed.",
    "DH_generate_parameters": "DH_generate_parameters() returns a pointer to the DH structure or NULL if the parameter generation fails.",
    "DH_check_ex": "DH_check_ex(), DH_check_params() and DH_check_pub_key_ex() return 1 if the check is successful, 0 for failed.",
    "DH_check_pub_key_ex": "DH_check_ex(), DH_check_params() and DH_check_pub_key_ex() return 1 if the check is successful, 0 for failed.",
    "X509_get_serialNumber": "X509_get_serialNumber() and X509_get0_serialNumber() return an B<ASN1_INTEGER> structure.",
    "X509_get0_serialNumber": "X509_get_serialNumber() and X509_get0_serialNumber() return an B<ASN1_INTEGER> structure.",
    "X509_set_serialNumber": "X509_set_serialNumber() returns 1 for success and 0 for failure.",
    "SSL_CTX_up_ref": "SSL_CTX_up_ref() returns 1 for success and 0 for failure.",
    "SSL_CTX_flush_sessions": "SSL_CTX_flush_sessions() does not return a value.",
    "SSL_CTX_set_async_callback": "SSL_CTX_set_async_callback(), SSL_set_async_callback(), SSL_CTX_set_async_callback_arg(), SSL_CTX_set_async_callback_arg() and SSL_get_async_status() return 1 on success or 0 on error.",
    "SSL_set_async_callback": "SSL_CTX_set_async_callback(), SSL_set_async_callback(), SSL_CTX_set_async_callback_arg(), SSL_CTX_set_async_callback_arg() and SSL_get_async_status() return 1 on success or 0 on error.",
    "SSL_CTX_set_async_callback_arg": "SSL_CTX_set_async_callback(), SSL_set_async_callback(), SSL_CTX_set_async_callback_arg(), SSL_CTX_set_async_callback_arg() and SSL_get_async_status() return 1 on success or 0 on error.",
    "SSL_get_async_status": "SSL_CTX_set_async_callback(), SSL_set_async_callback(), SSL_CTX_set_async_callback_arg(), SSL_CTX_set_async_callback_arg() and SSL_get_async_status() return 1 on success or 0 on error.",
    "CMS_add0_cert": "CMS_add0_cert(), CMS_add1_cert() and CMS_add0_crl() and CMS_add1_crl() return 1 for success and 0 for failure.",
    "CMS_add1_cert": "CMS_add0_cert(), CMS_add1_cert() and CMS_add0_crl() and CMS_add1_crl() return 1 for success and 0 for failure.",
    "CMS_add0_crl": "CMS_add0_cert(), CMS_add1_cert() and CMS_add0_crl() and CMS_add1_crl() return 1 for success and 0 for failure.",
    "CMS_add1_crl": "CMS_add0_cert(), CMS_add1_cert() and CMS_add0_crl() and CMS_add1_crl() return 1 for success and 0 for failure.",
    "CMS_get1_certs": "CMS_get1_certs() and CMS_get1_crls() return the STACK of certificates or CRLs or NULL if there are none or an error occurs. The only error which will occur in practice is if the B<cms> type is invalid.",
    "CMS_get1_crls": "CMS_get1_certs() and CMS_get1_crls() return the STACK of certificates or CRLs or NULL if there are none or an error occurs. The only error which will occur in practice is if the B<cms> type is invalid.",
    "OSSL_SELF_TEST_get_callback": "OSSL_SELF_TEST_get_callback() returns the callback and callback argument that has been set via OSSL_SELF_TEST_set_callback() for the given library context I<ctx>. These returned parameters will be NULL if OSSL_SELF_TEST_set_callback() has not been called.",
    "OSSL_SELF_TEST_set_callback": "OSSL_SELF_TEST_get_callback() returns the callback and callback argument that has been set via OSSL_SELF_TEST_set_callback() for the given library context I<ctx>. These returned parameters will be NULL if OSSL_SELF_TEST_set_callback() has not been called.",
    "CMS_get0_RecipientInfos": "CMS_get0_RecipientInfos() returns all CMS_RecipientInfo structures, or NULL if an error occurs.",
    "CMS_RecipientInfo_ktri_get0_signer_id": "CMS_RecipientInfo_ktri_get0_signer_id(), CMS_RecipientInfo_set0_pkey(), CMS_RecipientInfo_kekri_get0_id(), CMS_RecipientInfo_set0_key() and CMS_RecipientInfo_decrypt() return 1 for success or 0 if an error occurs. CMS_RecipientInfo_encrypt() return 1 for success or 0 if an error occurs.",
    "CMS_RecipientInfo_set0_pkey": "CMS_RecipientInfo_ktri_get0_signer_id(), CMS_RecipientInfo_set0_pkey(), CMS_RecipientInfo_kekri_get0_id(), CMS_RecipientInfo_set0_key() and CMS_RecipientInfo_decrypt() return 1 for success or 0 if an error occurs. CMS_RecipientInfo_encrypt() return 1 for success or 0 if an error occurs.",
    "CMS_RecipientInfo_kekri_get0_id": "CMS_RecipientInfo_ktri_get0_signer_id(), CMS_RecipientInfo_set0_pkey(), CMS_RecipientInfo_kekri_get0_id(), CMS_RecipientInfo_set0_key() and CMS_RecipientInfo_decrypt() return 1 for success or 0 if an error occurs. CMS_RecipientInfo_encrypt() return 1 for success or 0 if an error occurs.",
    "CMS_RecipientInfo_set0_key": "CMS_RecipientInfo_ktri_get0_signer_id(), CMS_RecipientInfo_set0_pkey(), CMS_RecipientInfo_kekri_get0_id(), CMS_RecipientInfo_set0_key() and CMS_RecipientInfo_decrypt() return 1 for success or 0 if an error occurs. CMS_RecipientInfo_encrypt() return 1 for success or 0 if an error occurs.",
    "CMS_RecipientInfo_decrypt": "CMS_RecipientInfo_ktri_get0_signer_id(), CMS_RecipientInfo_set0_pkey(), CMS_RecipientInfo_kekri_get0_id(), CMS_RecipientInfo_set0_key() and CMS_RecipientInfo_decrypt() return 1 for success or 0 if an error occurs. CMS_RecipientInfo_encrypt() return 1 for success or 0 if an error occurs.",
    "CMS_RecipientInfo_encrypt": "CMS_RecipientInfo_ktri_get0_signer_id(), CMS_RecipientInfo_set0_pkey(), CMS_RecipientInfo_kekri_get0_id(), CMS_RecipientInfo_set0_key() and CMS_RecipientInfo_decrypt() return 1 for success or 0 if an error occurs. CMS_RecipientInfo_encrypt() return 1 for success or 0 if an error occurs.",
    "CMS_RecipientInfo_ktri_cert_cmp": "CMS_RecipientInfo_ktri_cert_cmp() and CMS_RecipientInfo_kekri_cmp() return 0 for a successful comparison and non zero otherwise.",
    "CMS_RecipientInfo_kekri_cmp": "CMS_RecipientInfo_ktri_cert_cmp() and CMS_RecipientInfo_kekri_cmp() return 0 for a successful comparison and non zero otherwise.",
    "ERR_print_errors": "ERR_print_errors() and ERR_print_errors_fp() return no values.",
    "ERR_print_errors_fp": "ERR_print_errors() and ERR_print_errors_fp() return no values.",
    "DSA_sign": "DSA_sign() and DSA_sign_setup() return 1 on success, 0 on error. DSA_verify() returns 1 for a valid signature, 0 for an incorrect signature and -1 on error. The error codes can be obtained by L<ERR_get_error(3)>.",
    "DSA_sign_setup": "DSA_sign() and DSA_sign_setup() return 1 on success, 0 on error. DSA_verify() returns 1 for a valid signature, 0 for an incorrect signature and -1 on error. The error codes can be obtained by L<ERR_get_error(3)>.",
    "DSA_verify": "DSA_sign() and DSA_sign_setup() return 1 on success, 0 on error. DSA_verify() returns 1 for a valid signature, 0 for an incorrect signature and -1 on error. The error codes can be obtained by L<ERR_get_error(3)>.",
    "SSL_enable_ct": "SSL_enable_ct(), SSL_CTX_enable_ct(), SSL_CTX_set_ct_validation_callback() and SSL_set_ct_validation_callback() return 1 if the B<callback> is successfully set. They return 0 if an error occurs, e.g. a custom client extension handler has been setup to handle SCTs.",
    "SSL_CTX_enable_ct": "SSL_enable_ct(), SSL_CTX_enable_ct(), SSL_CTX_set_ct_validation_callback() and SSL_set_ct_validation_callback() return 1 if the B<callback> is successfully set. They return 0 if an error occurs, e.g. a custom client extension handler has been setup to handle SCTs.",
    "SSL_CTX_set_ct_validation_callback": "SSL_enable_ct(), SSL_CTX_enable_ct(), SSL_CTX_set_ct_validation_callback() and SSL_set_ct_validation_callback() return 1 if the B<callback> is successfully set. They return 0 if an error occurs, e.g. a custom client extension handler has been setup to handle SCTs.",
    "SSL_set_ct_validation_callback": "SSL_enable_ct(), SSL_CTX_enable_ct(), SSL_CTX_set_ct_validation_callback() and SSL_set_ct_validation_callback() return 1 if the B<callback> is successfully set. They return 0 if an error occurs, e.g. a custom client extension handler has been setup to handle SCTs.",
    "SSL_disable_ct": "SSL_disable_ct() and SSL_CTX_disable_ct() do not return a result.",
    "SSL_CTX_disable_ct": "SSL_disable_ct() and SSL_CTX_disable_ct() do not return a result.",
    "SSL_CTX_ct_is_enabled": "SSL_CTX_ct_is_enabled() and SSL_ct_is_enabled() return a 1 if a non-null CT validation callback is set, or 0 if no callback (or equivalently a NULL callback) is set.",
    "SSL_ct_is_enabled": "SSL_CTX_ct_is_enabled() and SSL_ct_is_enabled() return a 1 if a non-null CT validation callback is set, or 0 if no callback (or equivalently a NULL callback) is set.",
    "SSL_get_psk_identity_hint": "If non-B<NULL>, SSL_get_psk_identity_hint() returns the PSK identity hint and SSL_get_psk_identity() returns the PSK identity. Both are B<NULL>-terminated. SSL_get_psk_identity_hint() may return B<NULL> if no PSK identity hint was used during the connection setup.",
    "SSL_get_psk_identity": "If non-B<NULL>, SSL_get_psk_identity_hint() returns the PSK identity hint and SSL_get_psk_identity() returns the PSK identity. Both are B<NULL>-terminated. SSL_get_psk_identity_hint() may return B<NULL> if no PSK identity hint was used during the connection setup.",
    "MD2": "MD2(), MD4(), and MD5() return pointers to the hash value.",
    "MD4": "MD2(), MD4(), and MD5() return pointers to the hash value.",
    "MD5": "MD2(), MD4(), and MD5() return pointers to the hash value.",
    "MD2_Init": "MD2_Init(), MD2_Update(), MD2_Final(), MD4_Init(), MD4_Update(), MD4_Final(), MD5_Init(), MD5_Update(), and MD5_Final() return 1 for success, 0 otherwise.",
    "MD2_Update": "MD2_Init(), MD2_Update(), MD2_Final(), MD4_Init(), MD4_Update(), MD4_Final(), MD5_Init(), MD5_Update(), and MD5_Final() return 1 for success, 0 otherwise.",
    "MD2_Final": "MD2_Init(), MD2_Update(), MD2_Final(), MD4_Init(), MD4_Update(), MD4_Final(), MD5_Init(), MD5_Update(), and MD5_Final() return 1 for success, 0 otherwise.",
    "MD4_Init": "MD2_Init(), MD2_Update(), MD2_Final(), MD4_Init(), MD4_Update(), MD4_Final(), MD5_Init(), MD5_Update(), and MD5_Final() return 1 for success, 0 otherwise.",
    "MD4_Update": "MD2_Init(), MD2_Update(), MD2_Final(), MD4_Init(), MD4_Update(), MD4_Final(), MD5_Init(), MD5_Update(), and MD5_Final() return 1 for success, 0 otherwise.",
    "MD4_Final": "MD2_Init(), MD2_Update(), MD2_Final(), MD4_Init(), MD4_Update(), MD4_Final(), MD5_Init(), MD5_Update(), and MD5_Final() return 1 for success, 0 otherwise.",
    "MD5_Init": "MD2_Init(), MD2_Update(), MD2_Final(), MD4_Init(), MD4_Update(), MD4_Final(), MD5_Init(), MD5_Update(), and MD5_Final() return 1 for success, 0 otherwise.",
    "MD5_Update": "MD2_Init(), MD2_Update(), MD2_Final(), MD4_Init(), MD4_Update(), MD4_Final(), MD5_Init(), MD5_Update(), and MD5_Final() return 1 for success, 0 otherwise.",
    "MD5_Final": "MD2_Init(), MD2_Update(), MD2_Final(), MD4_Init(), MD4_Update(), MD4_Final(), MD5_Init(), MD5_Update(), and MD5_Final() return 1 for success, 0 otherwise.",
    "SSL_CTX_set1_groups": "SSL_CTX_set1_groups(), SSL_CTX_set1_groups_list(), SSL_set1_groups() and SSL_set1_groups_list(), return 1 for success and 0 for failure.",
    "SSL_CTX_set1_groups_list": "SSL_CTX_set1_groups(), SSL_CTX_set1_groups_list(), SSL_set1_groups() and SSL_set1_groups_list(), return 1 for success and 0 for failure.",
    "SSL_set1_groups": "SSL_CTX_set1_groups(), SSL_CTX_set1_groups_list(), SSL_set1_groups() and SSL_set1_groups_list(), return 1 for success and 0 for failure.",
    "SSL_set1_groups_list": "SSL_CTX_set1_groups(), SSL_CTX_set1_groups_list(), SSL_set1_groups() and SSL_set1_groups_list(), return 1 for success and 0 for failure.",
    "SSL_get1_groups": "SSL_get1_groups() returns the number of groups, which may be zero.",
    "SSL_get_shared_group": "When called on a client B<ssl>, SSL_get_shared_group() has no meaning and returns -1.",
    "SSL_get_negotiated_group": "SSL_get_negotiated_group() returns the NID of the negotiated group used for key exchange, or NID_undef if there was no negotiated group.",
    "RSA_bits": "RSA_bits() returns the number of bits in the key.",
    "RSA_size": "RSA_size() returns the size of modulus in bytes.",
    "RSA_security_bits": "RSA_security_bits() returns the number of security bits.",
    "OPENSSL_init_ssl": "The function OPENSSL_init_ssl() returns 1 on success or 0 on error.",
    "OPENSSL_fork_prepare": "OPENSSL_fork_prepare(), OPENSSL_fork_parent() and OPENSSL_fork_child() do not return values.",
    "OPENSSL_fork_parent": "OPENSSL_fork_prepare(), OPENSSL_fork_parent() and OPENSSL_fork_child() do not return values.",
    "OPENSSL_fork_child": "OPENSSL_fork_prepare(), OPENSSL_fork_parent() and OPENSSL_fork_child() do not return values.",
    "OSSL_HTTP_REQ_CTX_new": "OSSL_HTTP_REQ_CTX_new() returns a pointer to a B<OSSL_HTTP_REQ_CTX>, or NULL on error.",
    "OSSL_HTTP_REQ_CTX_free": "OSSL_HTTP_REQ_CTX_free() and OSSL_HTTP_REQ_CTX_set_max_response_length() do not return values.",
    "OSSL_HTTP_REQ_CTX_set_max_response_length": "OSSL_HTTP_REQ_CTX_free() and OSSL_HTTP_REQ_CTX_set_max_response_length() do not return values.",
    "OSSL_HTTP_REQ_CTX_set_request_line": "OSSL_HTTP_REQ_CTX_set_request_line(), OSSL_HTTP_REQ_CTX_add1_header(), OSSL_HTTP_REQ_CTX_set1_req(), and OSSL_HTTP_REQ_CTX_set_expected() return 1 for success and 0 for failure.",
    "OSSL_HTTP_REQ_CTX_add1_header": "OSSL_HTTP_REQ_CTX_set_request_line(), OSSL_HTTP_REQ_CTX_add1_header(), OSSL_HTTP_REQ_CTX_set1_req(), and OSSL_HTTP_REQ_CTX_set_expected() return 1 for success and 0 for failure.",
    "OSSL_HTTP_REQ_CTX_set1_req": "OSSL_HTTP_REQ_CTX_set_request_line(), OSSL_HTTP_REQ_CTX_add1_header(), OSSL_HTTP_REQ_CTX_set1_req(), and OSSL_HTTP_REQ_CTX_set_expected() return 1 for success and 0 for failure.",
    "OSSL_HTTP_REQ_CTX_set_expected": "OSSL_HTTP_REQ_CTX_set_request_line(), OSSL_HTTP_REQ_CTX_add1_header(), OSSL_HTTP_REQ_CTX_set1_req(), and OSSL_HTTP_REQ_CTX_set_expected() return 1 for success and 0 for failure.",
    "OSSL_HTTP_REQ_CTX_nbio": "OSSL_HTTP_REQ_CTX_nbio() and OSSL_HTTP_REQ_CTX_nbio_d2i() return 1 for success, 0 on error or redirection, -1 if retry is needed.",
    "OSSL_HTTP_REQ_CTX_nbio_d2i": "OSSL_HTTP_REQ_CTX_nbio() and OSSL_HTTP_REQ_CTX_nbio_d2i() return 1 for success, 0 on error or redirection, -1 if retry is needed.",
    "OSSL_HTTP_REQ_CTX_exchange": "OSSL_HTTP_REQ_CTX_exchange() and OSSL_HTTP_REQ_CTX_get0_mem_bio() return a pointer to a B<BIO> on success and NULL on failure.",
    "OSSL_HTTP_REQ_CTX_get0_mem_bio": "OSSL_HTTP_REQ_CTX_exchange() and OSSL_HTTP_REQ_CTX_get0_mem_bio() return a pointer to a B<BIO> on success and NULL on failure.",
    "OSSL_HTTP_REQ_CTX_get_resp_len": "OSSL_HTTP_REQ_CTX_get_resp_len() returns the size of the response contents or 0 if not available or an error occurred.",
    "OSSL_HTTP_is_alive": "OSSL_HTTP_is_alive() returns 1 if its argument is non-NULL and the client requested a persistent connection and the server did not disagree on keeping the connection open, else 0.",
    "PEM_read": "PEM_read() and PEM_read_bio() return 1 on success and 0 on failure, the latter includes the case when no more PEM objects remain in the input file. To distinguish end of file from more serious errors the caller must peek at the error stack and check for B<PEM_R_NO_START_LINE>, which indicates that no more PEM objects were found.  See L<ERR_peek_last_error(3)>, L<ERR_GET_REASON(3)>.",
    "PEM_read_bio": "PEM_read() and PEM_read_bio() return 1 on success and 0 on failure, the latter includes the case when no more PEM objects remain in the input file. To distinguish end of file from more serious errors the caller must peek at the error stack and check for B<PEM_R_NO_START_LINE>, which indicates that no more PEM objects were found.  See L<ERR_peek_last_error(3)>, L<ERR_GET_REASON(3)>.",
    "PEM_get_EVP_CIPHER_INFO": "PEM_get_EVP_CIPHER_INFO() and PEM_do_header() return 1 on success, and 0 on failure. The B<data> is likely meaningless if these functions fail.",
    "PEM_do_header": "PEM_get_EVP_CIPHER_INFO() and PEM_do_header() return 1 on success, and 0 on failure. The B<data> is likely meaningless if these functions fail.",
    "SSL_CONF_CTX_set1_prefix": "SSL_CONF_CTX_set1_prefix() returns 1 for success and 0 for failure.",
    "BIO_parse_hostserv": "BIO_parse_hostserv() returns 1 on success or 0 on error.",
    "RIPEMD160": "RIPEMD160() returns a pointer to the hash value.",
    "RIPEMD160_Init": "RIPEMD160_Init(), RIPEMD160_Update() and RIPEMD160_Final() return 1 for success, 0 otherwise.",
    "RIPEMD160_Update": "RIPEMD160_Init(), RIPEMD160_Update() and RIPEMD160_Final() return 1 for success, 0 otherwise.",
    "RIPEMD160_Final": "RIPEMD160_Init(), RIPEMD160_Update() and RIPEMD160_Final() return 1 for success, 0 otherwise.",
    "SSL_SESSION_get_protocol_version": "Note that the SSL_SESSION_get_protocol_version() function does B<not> perform a null check on the provided session B<s> pointer.",
    "SSL_SESSION_set_protocol_version": "SSL_SESSION_set_protocol_version() returns 1 on success or 0 on failure.",
    "SSL_CTX_set_session_ticket_cb": "The SSL_CTX_set_session_ticket_cb(), SSL_SESSION_set1_ticket_appdata() and SSL_SESSION_get0_ticket_appdata() functions return 1 on success and 0 on failure.",
    "SSL_SESSION_set1_ticket_appdata": "The SSL_CTX_set_session_ticket_cb(), SSL_SESSION_set1_ticket_appdata() and SSL_SESSION_get0_ticket_appdata() functions return 1 on success and 0 on failure.",
    "SSL_SESSION_get0_ticket_appdata": "The SSL_CTX_set_session_ticket_cb(), SSL_SESSION_set1_ticket_appdata() and SSL_SESSION_get0_ticket_appdata() functions return 1 on success and 0 on failure.",
    "SSL_set_srp_server_param": "SSL_set_srp_server_param() returns 1 on success and -1 on failure.",
    "CMS_sign_ex": "CMS_sign_ex() and CMS_sign() return either a valid CMS_ContentInfo structure or NULL if an error occurred. The error can be obtained from ERR_get_error(3).",
    "CMS_sign": "CMS_sign_ex() and CMS_sign() return either a valid CMS_ContentInfo structure or NULL if an error occurred. The error can be obtained from ERR_get_error(3).",
    "OCSP_RESPONSE_status": "OCSP_RESPONSE_status() returns a status value.",
    "OCSP_response_get1_basic": "OCSP_response_get1_basic() returns an I<OCSP_BASICRESP> structure pointer or I<NULL> if an error occurred.",
    "OCSP_response_create": "OCSP_response_create() returns an I<OCSP_RESPONSE> structure pointer or I<NULL> if an error occurred.",
    "OCSP_RESPONSE_free": "OCSP_RESPONSE_free() does not return a value.",
    "OCSP_RESPID_set_by_name": "OCSP_RESPID_set_by_name(), OCSP_RESPID_set_by_key(), OCSP_basic_sign(), and OCSP_basic_sign_ctx() return 1 on success or 0 on failure.",
    "OCSP_RESPID_set_by_key": "OCSP_RESPID_set_by_name(), OCSP_RESPID_set_by_key(), OCSP_basic_sign(), and OCSP_basic_sign_ctx() return 1 on success or 0 on failure.",
    "OCSP_basic_sign": "OCSP_RESPID_set_by_name(), OCSP_RESPID_set_by_key(), OCSP_basic_sign(), and OCSP_basic_sign_ctx() return 1 on success or 0 on failure.",
    "OCSP_basic_sign_ctx": "OCSP_RESPID_set_by_name(), OCSP_RESPID_set_by_key(), OCSP_basic_sign(), and OCSP_basic_sign_ctx() return 1 on success or 0 on failure.",
    "OCSP_RESPID_match": "OCSP_RESPID_match() returns 1 if the OCSP_RESPID and the X509 certificate match or 0 otherwise.",
    "SMIME_write_PKCS7": "SMIME_write_PKCS7() returns 1 for success or 0 for failure.",
    "EVP_VerifyInit_ex": "EVP_VerifyInit_ex() and EVP_VerifyUpdate() return 1 for success and 0 for failure.",
    "EVP_VerifyUpdate": "EVP_VerifyInit_ex() and EVP_VerifyUpdate() return 1 for success and 0 for failure.",
    "EVP_VerifyFinal_ex": "EVP_VerifyFinal_ex() and EVP_VerifyFinal() return 1 for a correct signature, 0 for failure and -1 if some other error occurred.",
    "EVP_VerifyFinal": "EVP_VerifyFinal_ex() and EVP_VerifyFinal() return 1 for a correct signature, 0 for failure and -1 if some other error occurred.",
    "OSSL_CMP_ITAV_create": "OSSL_CMP_ITAV_create() returns a pointer to the ITAV structure on success, or NULL on error.",
    "OSSL_CMP_ITAV_set0": "OSSL_CMP_ITAV_set0() does not return a value.",
    "OSSL_CMP_ITAV_get0_type": "OSSL_CMP_ITAV_get0_type() and OSSL_CMP_ITAV_get0_value() return the respective pointer or NULL if their input is NULL.",
    "OSSL_CMP_ITAV_get0_value": "OSSL_CMP_ITAV_get0_type() and OSSL_CMP_ITAV_get0_value() return the respective pointer or NULL if their input is NULL.",
    "OSSL_CMP_ITAV_push0_stack_item": "OSSL_CMP_ITAV_push0_stack_item() returns 1 on success, 0 on error.",
    "SSL_write": "For SSL_write() the following return values can occur:",
    "SSL_write_ex": "SSL_write_ex() will return 1 for success or 0 for failure. Success means that all requested application data bytes have been written to the SSL connection or, if SSL_MODE_ENABLE_PARTIAL_WRITE is in use, at least 1 application data byte has been written to the SSL connection. Failure means that not all the requested bytes have been written yet (if SSL_MODE_ENABLE_PARTIAL_WRITE is not in use) or no bytes could be written to the SSL connection (if SSL_MODE_ENABLE_PARTIAL_WRITE is in use). Failures can be retryable (e.g. the network write buffer has temporarily filled up) or non-retryable (e.g. a fatal network error). In the event of a failure call L<SSL_get_error(3)> to find out the reason which indicates whether the call is retryable or not.",
    "SSL_set_fd": "For socket B<BIO>s (e.g. when SSL_set_fd() was used), select() or poll() on the underlying socket can be used to find out when the TLS/SSL I/O function should be retried.",
    "select": "The operation did not complete because an asynchronous engine is still processing data. This will only occur if the mode has been set to SSL_MODE_ASYNC using L<SSL_CTX_set_mode(3)> or L<SSL_set_mode(3)> and an asynchronous capable engine is being used. An application can determine whether the engine has completed its processing using select() or poll() on the asynchronous wait file descriptor. This file descriptor is available by calling L<SSL_get_all_async_fds(3)> or L<SSL_get_changed_async_fds(3)>. The TLS/SSL I/O function should be called again later. The function B<must> be called from the same thread that the original call was made from.",
    "poll": "The operation did not complete because an asynchronous engine is still processing data. This will only occur if the mode has been set to SSL_MODE_ASYNC using L<SSL_CTX_set_mode(3)> or L<SSL_set_mode(3)> and an asynchronous capable engine is being used. An application can determine whether the engine has completed its processing using select() or poll() on the asynchronous wait file descriptor. This file descriptor is available by calling L<SSL_get_all_async_fds(3)> or L<SSL_get_changed_async_fds(3)>. The TLS/SSL I/O function should be called again later. The function B<must> be called from the same thread that the original call was made from.",
    "connect": "The operation did not complete; the same TLS/SSL I/O function should be called again later. The underlying BIO was not connected yet to the peer and the call would block in connect()/accept(). The SSL function should be called again when the connection is established. These messages can only appear with a BIO_s_connect() or BIO_s_accept() BIO, respectively. In order to find out, when the connection has been successfully established, on many platforms select() or poll() for writing on the socket file descriptor can be used.",
    "accept": "The operation did not complete; the same TLS/SSL I/O function should be called again later. The underlying BIO was not connected yet to the peer and the call would block in connect()/accept(). The SSL function should be called again when the connection is established. These messages can only appear with a BIO_s_connect() or BIO_s_accept() BIO, respectively. In order to find out, when the connection has been successfully established, on many platforms select() or poll() for writing on the socket file descriptor can be used.",
    "BIO_s_connect": "BIO_s_connect() returns the connect BIO method.",
    "BIO_s_accept": "The operation did not complete; the same TLS/SSL I/O function should be called again later. The underlying BIO was not connected yet to the peer and the call would block in connect()/accept(). The SSL function should be called again when the connection is established. These messages can only appear with a BIO_s_connect() or BIO_s_accept() BIO, respectively. In order to find out, when the connection has been successfully established, on many platforms select() or poll() for writing on the socket file descriptor can be used.",
    "SSL_CTX_set_client_cert_cb": "The operation did not complete because an application callback set by SSL_CTX_set_client_cert_cb() has asked to be called again. A call to L<SSL_get_error(3)> should return B<SSL_ERROR_WANT_X509_LOOKUP>.",
    "SSL_CTX_set_client_hello_cb": "The operation did not complete because an application callback set by SSL_CTX_set_client_hello_cb() has asked to be called again. A call to L<SSL_get_error(3)> should return B<SSL_ERROR_WANT_CLIENT_HELLO_CB>.",
    "SSL_shutdown": "A non-recoverable, fatal error in the SSL library occurred, usually a protocol error.  The OpenSSL error queue contains more information on the error. If this error occurs then no further I/O operations should be performed on the connection and SSL_shutdown() must not be called.",
    "SRP_VBASE_init": "SRP_VBASE_init() returns B<SRP_NO_ERROR> (0) on success and a positive value on failure. The error codes are B<SRP_ERR_OPEN_FILE> if the file could not be opened, B<SRP_ERR_VBASE_INCOMPLETE_FILE> if the file could not be parsed, B<SRP_ERR_MEMORY> on memory allocation failure and B<SRP_ERR_VBASE_BN_LIB> for invalid decoded parameter values.",
    "SRP_VBASE_add0_user": "SRP_VBASE_add0_user() returns 1 on success and 0 on failure.",
    "SSL_group_to_name": "If non-NULL, SSL_group_to_name() returns the TLS group name corresponding to the given I<id> as a NULL-terminated string. If SSL_group_to_name() returns NULL, an error occurred; possibly no corresponding tlsname was registered during provider initialisation.",
    "X509_cmp_time": "X509_cmp_time() and X509_cmp_current_time() return -1 if B<asn1_time> is earlier than, or equal to, B<in_tm> (resp. current time), and 1 otherwise. These methods return 0 on error.",
    "X509_cmp_current_time": "X509_cmp_time() and X509_cmp_current_time() return -1 if B<asn1_time> is earlier than, or equal to, B<in_tm> (resp. current time), and 1 otherwise. These methods return 0 on error.",
    "X509_cmp_timeframe": "X509_cmp_timeframe() returns 0 if B<vpm> is not NULL and the verification parameters do not contain B<X509_V_FLAG_USE_CHECK_TIME> but do contain B<X509_V_FLAG_NO_CHECK_TIME>. Otherwise it returns 1 if the end time is not NULL and the reference time (which has determined as stated above) is past the end time, -1 if the start time is not NULL and the reference time is before, else 0 to indicate that the reference time is in range (implying that the end time is not before the start time if both are present).",
    "X509_time_adj": "X509_time_adj() and X509_time_adj_ex() return a pointer to the updated ASN1_TIME structure, and NULL on error.",
    "X509_time_adj_ex": "X509_time_adj() and X509_time_adj_ex() return a pointer to the updated ASN1_TIME structure, and NULL on error.",
    "BN_is_bit_set": "BN_is_bit_set() returns 1 if the bit is set, 0 otherwise.",
    "X509_STORE_CTX_get_error": "X509_STORE_CTX_get_error() returns B<X509_V_OK> or an error code.",
    "X509_STORE_CTX_get_error_depth": "X509_STORE_CTX_get_error_depth() returns a nonnegative error depth.",
    "X509_STORE_CTX_get_current_cert": "X509_STORE_CTX_get_current_cert() returns the certificate which caused the error or NULL if no certificate is relevant to the error.",
    "X509_verify_cert_error_string": "X509_verify_cert_error_string() returns a human readable error string for verification error I<n>.",
    "SSL_CTX_use_psk_identity_hint": "B<SSL_CTX_use_psk_identity_hint()> and B<SSL_use_psk_identity_hint()> return 1 on success, 0 otherwise.",
    "SSL_use_psk_identity_hint": "B<SSL_CTX_use_psk_identity_hint()> and B<SSL_use_psk_identity_hint()> return 1 on success, 0 otherwise.",
    "EVP_MD_fetch": "=item EVP_MD_fetch()",
    "EVP_MD_up_ref": "=item EVP_MD_up_ref()",
    "EVP_Q_digest": "=item EVP_Q_digest(), EVP_Digest(), EVP_DigestInit_ex2(), EVP_DigestInit_ex(), EVP_DigestUpdate(), EVP_DigestFinal_ex(), EVP_DigestFinalXOF(), and EVP_DigestFinal()",
    "EVP_Digest": "=item EVP_Q_digest(), EVP_Digest(), EVP_DigestInit_ex2(), EVP_DigestInit_ex(), EVP_DigestUpdate(), EVP_DigestFinal_ex(), EVP_DigestFinalXOF(), and EVP_DigestFinal()",
    "EVP_DigestInit_ex2": "=item EVP_Q_digest(), EVP_Digest(), EVP_DigestInit_ex2(), EVP_DigestInit_ex(), EVP_DigestUpdate(), EVP_DigestFinal_ex(), EVP_DigestFinalXOF(), and EVP_DigestFinal()",
    "EVP_DigestInit_ex": "=item EVP_Q_digest(), EVP_Digest(), EVP_DigestInit_ex2(), EVP_DigestInit_ex(), EVP_DigestUpdate(), EVP_DigestFinal_ex(), EVP_DigestFinalXOF(), and EVP_DigestFinal()",
    "EVP_DigestUpdate": "=item EVP_Q_digest(), EVP_Digest(), EVP_DigestInit_ex2(), EVP_DigestInit_ex(), EVP_DigestUpdate(), EVP_DigestFinal_ex(), EVP_DigestFinalXOF(), and EVP_DigestFinal()",
    "EVP_DigestFinal_ex": "=item EVP_Q_digest(), EVP_Digest(), EVP_DigestInit_ex2(), EVP_DigestInit_ex(), EVP_DigestUpdate(), EVP_DigestFinal_ex(), EVP_DigestFinalXOF(), and EVP_DigestFinal()",
    "EVP_DigestFinalXOF": "=item EVP_Q_digest(), EVP_Digest(), EVP_DigestInit_ex2(), EVP_DigestInit_ex(), EVP_DigestUpdate(), EVP_DigestFinal_ex(), EVP_DigestFinalXOF(), and EVP_DigestFinal()",
    "EVP_DigestFinal": "=item EVP_Q_digest(), EVP_Digest(), EVP_DigestInit_ex2(), EVP_DigestInit_ex(), EVP_DigestUpdate(), EVP_DigestFinal_ex(), EVP_DigestFinalXOF(), and EVP_DigestFinal()",
    "EVP_MD_CTX_ctrl": "=item EVP_MD_CTX_ctrl()",
    "EVP_MD_CTX_set_params": "=item EVP_MD_CTX_set_params(), EVP_MD_CTX_get_params()",
    "EVP_MD_CTX_get_params": "=item EVP_MD_CTX_set_params(), EVP_MD_CTX_get_params()",
    "EVP_MD_CTX_settable_params": "=item EVP_MD_CTX_settable_params(), EVP_MD_CTX_gettable_params()",
    "EVP_MD_CTX_gettable_params": "=item EVP_MD_CTX_settable_params(), EVP_MD_CTX_gettable_params()",
    "EVP_MD_CTX_copy_ex": "=item EVP_MD_CTX_copy_ex()",
    "EVP_MD_get_type": "=item EVP_MD_get_type(), EVP_MD_get_pkey_type()",
    "EVP_MD_get_pkey_type": "=item EVP_MD_get_type(), EVP_MD_get_pkey_type()",
    "EVP_MD_get_size": "=item EVP_MD_get_size(), EVP_MD_get_block_size(), EVP_MD_CTX_get_size(), EVP_MD_CTX_get_block_size()",
    "EVP_MD_get_block_size": "=item EVP_MD_get_size(), EVP_MD_get_block_size(), EVP_MD_CTX_get_size(), EVP_MD_CTX_get_block_size()",
    "EVP_MD_CTX_get_size": "=item EVP_MD_get_size(), EVP_MD_get_block_size(), EVP_MD_CTX_get_size(), EVP_MD_CTX_get_block_size()",
    "EVP_MD_CTX_get_block_size": "=item EVP_MD_get_size(), EVP_MD_get_block_size(), EVP_MD_CTX_get_size(), EVP_MD_CTX_get_block_size()",
    "EVP_md_null": "=item EVP_md_null()",
    "EVP_get_digestbyname": "=item EVP_get_digestbyname(), EVP_get_digestbynid(), EVP_get_digestbyobj()",
    "EVP_get_digestbynid": "=item EVP_get_digestbyname(), EVP_get_digestbynid(), EVP_get_digestbyobj()",
    "EVP_get_digestbyobj": "=item EVP_get_digestbyname(), EVP_get_digestbynid(), EVP_get_digestbyobj()",
    "EVP_MD_CTX_set_pkey_ctx": "=item EVP_MD_CTX_set_pkey_ctx()",
    "EVP_MD_names_do_all": "=item EVP_MD_names_do_all()",
    "SSL_CTX_sess_set_cache_size": "SSL_CTX_sess_set_cache_size() returns the previously valid size.",
    "SSL_CTX_sess_get_cache_size": "SSL_CTX_sess_get_cache_size() returns the currently valid size.",
    "EVP_PKEY_asn1_count": "EVP_PKEY_asn1_count() returns the number of available public key methods.",
    "EVP_PKEY_asn1_get0": "EVP_PKEY_asn1_get0() return a public key method or B<NULL> if B<idx> is out of range.",
    "EVP_PKEY_asn1_get0_info": "EVP_PKEY_asn1_get0_info() returns 0 on failure, 1 on success.",
    "DH_generate_key": "DH_generate_key() returns 1 on success, 0 otherwise.",
    "DH_compute_key": "DH_compute_key() returns the size of the shared secret on success, -1 on error.",
    "DH_compute_key_padded": "DH_compute_key_padded() returns B<DH_size(dh)> on success, -1 on error.",
    "CMS_verify_receipt": "CMS_verify_receipt() returns 1 for a successful verification and zero if an error occurred.",
    "PEM_read_bio_ex": "PEM_read_bio_ex() returns 1 for success or 0 for failure.",
    "ENGINE_get_first": "ENGINE_get_first(), ENGINE_get_last(), ENGINE_get_next() and ENGINE_get_prev() return a valid B<ENGINE> structure or NULL if an error occurred.",
    "ENGINE_get_last": "ENGINE_get_first(), ENGINE_get_last(), ENGINE_get_next() and ENGINE_get_prev() return a valid B<ENGINE> structure or NULL if an error occurred.",
    "ENGINE_get_next": "ENGINE_get_first(), ENGINE_get_last(), ENGINE_get_next() and ENGINE_get_prev() return a valid B<ENGINE> structure or NULL if an error occurred.",
    "ENGINE_get_prev": "ENGINE_get_first(), ENGINE_get_last(), ENGINE_get_next() and ENGINE_get_prev() return a valid B<ENGINE> structure or NULL if an error occurred.",
    "ENGINE_add": "ENGINE_add() and ENGINE_remove() return 1 on success or 0 on error.",
    "ENGINE_remove": "ENGINE_add() and ENGINE_remove() return 1 on success or 0 on error.",
    "ENGINE_by_id": "ENGINE_by_id() returns a valid B<ENGINE> structure or NULL if an error occurred.",
    "ENGINE_init": "ENGINE_init() and ENGINE_finish() return 1 on success or 0 on error.",
    "ENGINE_finish": "ENGINE_init() and ENGINE_finish() return 1 on success or 0 on error.",
    "ENGINE_get_default_TYPE": "All ENGINE_get_default_TYPE() functions, ENGINE_get_cipher_engine() and ENGINE_get_digest_engine() return a valid B<ENGINE> structure on success or NULL if an error occurred.",
    "ENGINE_get_cipher_engine": "All ENGINE_get_default_TYPE() functions, ENGINE_get_cipher_engine() and ENGINE_get_digest_engine() return a valid B<ENGINE> structure on success or NULL if an error occurred.",
    "ENGINE_get_digest_engine": "All ENGINE_get_default_TYPE() functions, ENGINE_get_cipher_engine() and ENGINE_get_digest_engine() return a valid B<ENGINE> structure on success or NULL if an error occurred.",
    "ENGINE_set_default_TYPE": "All ENGINE_set_default_TYPE() functions return 1 on success or 0 on error.",
    "ENGINE_set_default": "ENGINE_set_default() returns 1 on success or 0 on error.",
    "ENGINE_get_table_flags": "ENGINE_get_table_flags() returns an unsigned integer value representing the global table flags which are used to control the registration behaviour of B<ENGINE> implementations.",
    "ENGINE_register_TYPE": "All ENGINE_register_TYPE() functions return 1 on success or 0 on error.",
    "ENGINE_register_complete": "ENGINE_register_complete() and ENGINE_register_all_complete() return 1 on success or 0 on error.",
    "ENGINE_register_all_complete": "ENGINE_register_complete() and ENGINE_register_all_complete() return 1 on success or 0 on error.",
    "ENGINE_ctrl": "ENGINE_ctrl() returns a positive value on success or others on error.",
    "ENGINE_cmd_is_executable": "ENGINE_cmd_is_executable() returns 1 if B<cmd> is executable or 0 otherwise.",
    "ENGINE_ctrl_cmd": "ENGINE_ctrl_cmd() and ENGINE_ctrl_cmd_string() return 1 on success or 0 on error.",
    "ENGINE_ctrl_cmd_string": "ENGINE_ctrl_cmd() and ENGINE_ctrl_cmd_string() return 1 on success or 0 on error.",
    "ENGINE_new": "ENGINE_new() returns a valid B<ENGINE> structure on success or NULL if an error occurred.",
    "ENGINE_free": "ENGINE_free() returns 1 on success or 0 on error.",
    "ENGINE_up_ref": "ENGINE_up_ref() returns 1 on success or 0 on error.",
    "ENGINE_set_id": "ENGINE_set_id() and ENGINE_set_name() return 1 on success or 0 on error.",
    "ENGINE_set_name": "ENGINE_set_id() and ENGINE_set_name() return 1 on success or 0 on error.",
    "ENGINE_get_id": "ENGINE_get_id() and ENGINE_get_name() return a string representing the identifier and the name of the ENGINE B<e> respectively.",
    "ENGINE_get_name": "ENGINE_get_id() and ENGINE_get_name() return a string representing the identifier and the name of the ENGINE B<e> respectively.",
    "ENGINE_get_RSA": "ENGINE_get_RSA(), ENGINE_get_DSA(), ENGINE_get_DH() and ENGINE_get_RAND() return corresponding method structures for each algorithms.",
    "ENGINE_get_DSA": "ENGINE_get_RSA(), ENGINE_get_DSA(), ENGINE_get_DH() and ENGINE_get_RAND() return corresponding method structures for each algorithms.",
    "ENGINE_get_DH": "ENGINE_get_RSA(), ENGINE_get_DSA(), ENGINE_get_DH() and ENGINE_get_RAND() return corresponding method structures for each algorithms.",
    "ENGINE_get_RAND": "ENGINE_get_RSA(), ENGINE_get_DSA(), ENGINE_get_DH() and ENGINE_get_RAND() return corresponding method structures for each algorithms.",
    "ENGINE_get_destroy_function": "ENGINE_get_destroy_function(), ENGINE_get_init_function(), ENGINE_get_finish_function(), ENGINE_get_ctrl_function(), ENGINE_get_load_privkey_function(), ENGINE_get_load_pubkey_function(), ENGINE_get_ciphers() and ENGINE_get_digests() return corresponding function pointers of the callbacks.",
    "ENGINE_get_init_function": "ENGINE_get_destroy_function(), ENGINE_get_init_function(), ENGINE_get_finish_function(), ENGINE_get_ctrl_function(), ENGINE_get_load_privkey_function(), ENGINE_get_load_pubkey_function(), ENGINE_get_ciphers() and ENGINE_get_digests() return corresponding function pointers of the callbacks.",
    "ENGINE_get_finish_function": "ENGINE_get_destroy_function(), ENGINE_get_init_function(), ENGINE_get_finish_function(), ENGINE_get_ctrl_function(), ENGINE_get_load_privkey_function(), ENGINE_get_load_pubkey_function(), ENGINE_get_ciphers() and ENGINE_get_digests() return corresponding function pointers of the callbacks.",
    "ENGINE_get_ctrl_function": "ENGINE_get_destroy_function(), ENGINE_get_init_function(), ENGINE_get_finish_function(), ENGINE_get_ctrl_function(), ENGINE_get_load_privkey_function(), ENGINE_get_load_pubkey_function(), ENGINE_get_ciphers() and ENGINE_get_digests() return corresponding function pointers of the callbacks.",
    "ENGINE_get_load_privkey_function": "ENGINE_get_destroy_function(), ENGINE_get_init_function(), ENGINE_get_finish_function(), ENGINE_get_ctrl_function(), ENGINE_get_load_privkey_function(), ENGINE_get_load_pubkey_function(), ENGINE_get_ciphers() and ENGINE_get_digests() return corresponding function pointers of the callbacks.",
    "ENGINE_get_load_pubkey_function": "ENGINE_get_destroy_function(), ENGINE_get_init_function(), ENGINE_get_finish_function(), ENGINE_get_ctrl_function(), ENGINE_get_load_privkey_function(), ENGINE_get_load_pubkey_function(), ENGINE_get_ciphers() and ENGINE_get_digests() return corresponding function pointers of the callbacks.",
    "ENGINE_get_ciphers": "ENGINE_get_destroy_function(), ENGINE_get_init_function(), ENGINE_get_finish_function(), ENGINE_get_ctrl_function(), ENGINE_get_load_privkey_function(), ENGINE_get_load_pubkey_function(), ENGINE_get_ciphers() and ENGINE_get_digests() return corresponding function pointers of the callbacks.",
    "ENGINE_get_digests": "ENGINE_get_destroy_function(), ENGINE_get_init_function(), ENGINE_get_finish_function(), ENGINE_get_ctrl_function(), ENGINE_get_load_privkey_function(), ENGINE_get_load_pubkey_function(), ENGINE_get_ciphers() and ENGINE_get_digests() return corresponding function pointers of the callbacks.",
    "ENGINE_get_cipher": "ENGINE_get_cipher() returns a valid B<EVP_CIPHER> structure on success or NULL if an error occurred.",
    "ENGINE_get_digest": "ENGINE_get_digest() returns a valid B<EVP_MD> structure on success or NULL if an error occurred.",
    "ENGINE_get_flags": "ENGINE_get_flags() returns an integer representing the ENGINE flags which are used to control various behaviours of an ENGINE.",
    "ENGINE_get_cmd_defns": "ENGINE_get_cmd_defns() returns an B<ENGINE_CMD_DEFN> structure or NULL if it's not set.",
    "ENGINE_load_private_key": "ENGINE_load_private_key() and ENGINE_load_public_key() return a valid B<EVP_PKEY> structure on success or NULL if an error occurred.",
    "ENGINE_load_public_key": "ENGINE_load_private_key() and ENGINE_load_public_key() return a valid B<EVP_PKEY> structure on success or NULL if an error occurred.",
    "DSA_generate_key": "DSA_generate_key() returns 1 on success, 0 otherwise. The error codes can be obtained by L<ERR_get_error(3)>.",
    "PKCS5_PBE_keyivgen": "PKCS5_PBE_keyivgen(), PKCS5_v2_PBE_keyivgen(), PKCS5_v2_PBE_keyivgen_ex(), PKCS5_v2_scrypt_keyivgen(), PKCS5_v2_scrypt_keyivgen_ex(), PKCS5_pbe_set0_algor() and PKCS5_pbe_set0_algor_ex() return 1 for success and 0 if an error occurs.",
    "PKCS5_v2_PBE_keyivgen": "PKCS5_PBE_keyivgen(), PKCS5_v2_PBE_keyivgen(), PKCS5_v2_PBE_keyivgen_ex(), PKCS5_v2_scrypt_keyivgen(), PKCS5_v2_scrypt_keyivgen_ex(), PKCS5_pbe_set0_algor() and PKCS5_pbe_set0_algor_ex() return 1 for success and 0 if an error occurs.",
    "PKCS5_v2_PBE_keyivgen_ex": "PKCS5_PBE_keyivgen(), PKCS5_v2_PBE_keyivgen(), PKCS5_v2_PBE_keyivgen_ex(), PKCS5_v2_scrypt_keyivgen(), PKCS5_v2_scrypt_keyivgen_ex(), PKCS5_pbe_set0_algor() and PKCS5_pbe_set0_algor_ex() return 1 for success and 0 if an error occurs.",
    "PKCS5_v2_scrypt_keyivgen": "PKCS5_PBE_keyivgen(), PKCS5_v2_PBE_keyivgen(), PKCS5_v2_PBE_keyivgen_ex(), PKCS5_v2_scrypt_keyivgen(), PKCS5_v2_scrypt_keyivgen_ex(), PKCS5_pbe_set0_algor() and PKCS5_pbe_set0_algor_ex() return 1 for success and 0 if an error occurs.",
    "PKCS5_v2_scrypt_keyivgen_ex": "PKCS5_PBE_keyivgen(), PKCS5_v2_PBE_keyivgen(), PKCS5_v2_PBE_keyivgen_ex(), PKCS5_v2_scrypt_keyivgen(), PKCS5_v2_scrypt_keyivgen_ex(), PKCS5_pbe_set0_algor() and PKCS5_pbe_set0_algor_ex() return 1 for success and 0 if an error occurs.",
    "PKCS5_pbe_set0_algor": "PKCS5_PBE_keyivgen(), PKCS5_v2_PBE_keyivgen(), PKCS5_v2_PBE_keyivgen_ex(), PKCS5_v2_scrypt_keyivgen(), PKCS5_v2_scrypt_keyivgen_ex(), PKCS5_pbe_set0_algor() and PKCS5_pbe_set0_algor_ex() return 1 for success and 0 if an error occurs.",
    "PKCS5_pbe_set0_algor_ex": "PKCS5_PBE_keyivgen(), PKCS5_v2_PBE_keyivgen(), PKCS5_v2_PBE_keyivgen_ex(), PKCS5_v2_scrypt_keyivgen(), PKCS5_v2_scrypt_keyivgen_ex(), PKCS5_pbe_set0_algor() and PKCS5_pbe_set0_algor_ex() return 1 for success and 0 if an error occurs.",
    "PKCS5_pbe_set": "PKCS5_pbe_set(), PKCS5_pbe_set_ex(), PKCS5_pbe2_set(), PKCS5_pbe2_set_iv(), PKCS5_pbe2_set_iv_ex(), PKCS5_pbe2_set_scrypt(), PKCS5_pbkdf2_set() and PKCS5_pbkdf2_set_ex() return an B<X509_ALGOR> object or NULL if an error occurs.",
    "PKCS5_pbe_set_ex": "PKCS5_pbe_set(), PKCS5_pbe_set_ex(), PKCS5_pbe2_set(), PKCS5_pbe2_set_iv(), PKCS5_pbe2_set_iv_ex(), PKCS5_pbe2_set_scrypt(), PKCS5_pbkdf2_set() and PKCS5_pbkdf2_set_ex() return an B<X509_ALGOR> object or NULL if an error occurs.",
    "PKCS5_pbe2_set": "PKCS5_pbe_set(), PKCS5_pbe_set_ex(), PKCS5_pbe2_set(), PKCS5_pbe2_set_iv(), PKCS5_pbe2_set_iv_ex(), PKCS5_pbe2_set_scrypt(), PKCS5_pbkdf2_set() and PKCS5_pbkdf2_set_ex() return an B<X509_ALGOR> object or NULL if an error occurs.",
    "PKCS5_pbe2_set_iv": "PKCS5_pbe_set(), PKCS5_pbe_set_ex(), PKCS5_pbe2_set(), PKCS5_pbe2_set_iv(), PKCS5_pbe2_set_iv_ex(), PKCS5_pbe2_set_scrypt(), PKCS5_pbkdf2_set() and PKCS5_pbkdf2_set_ex() return an B<X509_ALGOR> object or NULL if an error occurs.",
    "PKCS5_pbe2_set_iv_ex": "PKCS5_pbe_set(), PKCS5_pbe_set_ex(), PKCS5_pbe2_set(), PKCS5_pbe2_set_iv(), PKCS5_pbe2_set_iv_ex(), PKCS5_pbe2_set_scrypt(), PKCS5_pbkdf2_set() and PKCS5_pbkdf2_set_ex() return an B<X509_ALGOR> object or NULL if an error occurs.",
    "PKCS5_pbe2_set_scrypt": "PKCS5_pbe_set(), PKCS5_pbe_set_ex(), PKCS5_pbe2_set(), PKCS5_pbe2_set_iv(), PKCS5_pbe2_set_iv_ex(), PKCS5_pbe2_set_scrypt(), PKCS5_pbkdf2_set() and PKCS5_pbkdf2_set_ex() return an B<X509_ALGOR> object or NULL if an error occurs.",
    "PKCS5_pbkdf2_set": "PKCS5_pbe_set(), PKCS5_pbe_set_ex(), PKCS5_pbe2_set(), PKCS5_pbe2_set_iv(), PKCS5_pbe2_set_iv_ex(), PKCS5_pbe2_set_scrypt(), PKCS5_pbkdf2_set() and PKCS5_pbkdf2_set_ex() return an B<X509_ALGOR> object or NULL if an error occurs.",
    "PKCS5_pbkdf2_set_ex": "PKCS5_pbe_set(), PKCS5_pbe_set_ex(), PKCS5_pbe2_set(), PKCS5_pbe2_set_iv(), PKCS5_pbe2_set_iv_ex(), PKCS5_pbe2_set_scrypt(), PKCS5_pbkdf2_set() and PKCS5_pbkdf2_set_ex() return an B<X509_ALGOR> object or NULL if an error occurs.",
    "OCSP_resp_find_status": "OCSP_resp_find_status() returns 1 if I<id> is found in I<bs> and 0 otherwise.",
    "OCSP_resp_count": "OCSP_resp_count() returns the total number of B<OCSP_SINGLERESP> fields in I<bs> or -1 on error.",
    "OCSP_resp_get0": "OCSP_resp_get0() returns a pointer to an B<OCSP_SINGLERESP> structure or NULL on error, such as I<idx> being out of range.",
    "OCSP_resp_find": "OCSP_resp_find() returns the index of I<id> in I<bs> (which may be 0) or -1 on error, such as when I<id> was not found.",
    "OCSP_single_get0_status": "OCSP_single_get0_status() returns the status of I<single> or -1 if an error occurred.",
    "OCSP_resp_get0_produced_at": "OCSP_resp_get0_produced_at() returns the B<producedAt> field from I<bs>.",
    "OCSP_resp_get0_signature": "OCSP_resp_get0_signature() returns the signature from I<bs>.",
    "OCSP_resp_get0_tbs_sigalg": "OCSP_resp_get0_tbs_sigalg() returns the B<signatureAlgorithm> field from I<bs>.",
    "OCSP_resp_get0_respdata": "OCSP_resp_get0_respdata() returns the B<tbsResponseData> field from I<bs>.",
    "OCSP_resp_get0_certs": "OCSP_resp_get0_certs() returns any certificates included in I<bs>.",
    "OCSP_resp_get0_signer": "OCSP_resp_get0_signer() returns 1 if the signing certificate was located, or 0 if not found or on error.",
    "OCSP_resp_get0_id": "OCSP_resp_get0_id() and OCSP_resp_get1_id() return 1 on success, 0 on failure.",
    "OCSP_resp_get1_id": "OCSP_resp_get0_id() and OCSP_resp_get1_id() return 1 on success, 0 on failure.",
    "OCSP_check_validity": "OCSP_check_validity() returns 1 if I<thisupd> and I<nextupd> are valid time values and the current time + I<sec> is not before I<thisupd> and, if I<maxsec> >= 0, the current time - I<maxsec> is not past I<nextupd>. Otherwise it returns 0 to indicate an error.",
    "OCSP_basic_verify": "OCSP_basic_verify() returns 1 on success, 0 on verification not successful, or -1 on a fatal error such as malloc failure.",
    "SMIME_read_CMS_ex": "SMIME_read_CMS_ex() and SMIME_read_CMS() return a valid B<CMS_ContentInfo> structure or B<NULL> if an error occurred. The error can be obtained from ERR_get_error(3).",
    "SMIME_read_CMS": "SMIME_read_CMS_ex() and SMIME_read_CMS() return a valid B<CMS_ContentInfo> structure or B<NULL> if an error occurred. The error can be obtained from ERR_get_error(3).",
    "EVP_KEM_fetch": "EVP_KEM_fetch() returns a pointer to an B<EVP_KEM> for success or B<NULL> for failure.",
    "EVP_KEM_up_ref": "EVP_KEM_up_ref() returns 1 for success or 0 otherwise.",
    "EVP_KEM_names_do_all": "EVP_KEM_names_do_all() returns 1 if the callback was called for all names. A return value of 0 means that the callback was not called for any names.",
    "EVP_KEM_gettable_ctx_params": "EVP_KEM_gettable_ctx_params() and EVP_KEM_settable_ctx_params() return a constant B<OSSL_PARAM> array or NULL on error.",
    "EVP_KEM_settable_ctx_params": "EVP_KEM_gettable_ctx_params() and EVP_KEM_settable_ctx_params() return a constant B<OSSL_PARAM> array or NULL on error.",
    "EC_POINT_new": "EC_POINT_new() and EC_POINT_dup() return the newly allocated EC_POINT or NULL on error.",
    "EC_POINT_dup": "EC_POINT_new() and EC_POINT_dup() return the newly allocated EC_POINT or NULL on error.",
    "EC_POINT_copy": "The following functions return 1 on success or 0 on error: EC_POINT_copy(), EC_POINT_set_to_infinity(), EC_POINT_set_Jprojective_coordinates_GFp(), EC_POINT_get_Jprojective_coordinates_GFp(), EC_POINT_set_affine_coordinates_GFp(), EC_POINT_get_affine_coordinates_GFp(), EC_POINT_set_compressed_coordinates_GFp(), EC_POINT_set_affine_coordinates_GF2m(), EC_POINT_get_affine_coordinates_GF2m(), EC_POINT_set_compressed_coordinates_GF2m() and EC_POINT_oct2point().",
    "EC_POINT_set_to_infinity": "The following functions return 1 on success or 0 on error: EC_POINT_copy(), EC_POINT_set_to_infinity(), EC_POINT_set_Jprojective_coordinates_GFp(), EC_POINT_get_Jprojective_coordinates_GFp(), EC_POINT_set_affine_coordinates_GFp(), EC_POINT_get_affine_coordinates_GFp(), EC_POINT_set_compressed_coordinates_GFp(), EC_POINT_set_affine_coordinates_GF2m(), EC_POINT_get_affine_coordinates_GF2m(), EC_POINT_set_compressed_coordinates_GF2m() and EC_POINT_oct2point().",
    "EC_POINT_set_Jprojective_coordinates_GFp": "The following functions return 1 on success or 0 on error: EC_POINT_copy(), EC_POINT_set_to_infinity(), EC_POINT_set_Jprojective_coordinates_GFp(), EC_POINT_get_Jprojective_coordinates_GFp(), EC_POINT_set_affine_coordinates_GFp(), EC_POINT_get_affine_coordinates_GFp(), EC_POINT_set_compressed_coordinates_GFp(), EC_POINT_set_affine_coordinates_GF2m(), EC_POINT_get_affine_coordinates_GF2m(), EC_POINT_set_compressed_coordinates_GF2m() and EC_POINT_oct2point().",
    "EC_POINT_get_Jprojective_coordinates_GFp": "The following functions return 1 on success or 0 on error: EC_POINT_copy(), EC_POINT_set_to_infinity(), EC_POINT_set_Jprojective_coordinates_GFp(), EC_POINT_get_Jprojective_coordinates_GFp(), EC_POINT_set_affine_coordinates_GFp(), EC_POINT_get_affine_coordinates_GFp(), EC_POINT_set_compressed_coordinates_GFp(), EC_POINT_set_affine_coordinates_GF2m(), EC_POINT_get_affine_coordinates_GF2m(), EC_POINT_set_compressed_coordinates_GF2m() and EC_POINT_oct2point().",
    "EC_POINT_set_affine_coordinates_GFp": "The following functions return 1 on success or 0 on error: EC_POINT_copy(), EC_POINT_set_to_infinity(), EC_POINT_set_Jprojective_coordinates_GFp(), EC_POINT_get_Jprojective_coordinates_GFp(), EC_POINT_set_affine_coordinates_GFp(), EC_POINT_get_affine_coordinates_GFp(), EC_POINT_set_compressed_coordinates_GFp(), EC_POINT_set_affine_coordinates_GF2m(), EC_POINT_get_affine_coordinates_GF2m(), EC_POINT_set_compressed_coordinates_GF2m() and EC_POINT_oct2point().",
    "EC_POINT_get_affine_coordinates_GFp": "The following functions return 1 on success or 0 on error: EC_POINT_copy(), EC_POINT_set_to_infinity(), EC_POINT_set_Jprojective_coordinates_GFp(), EC_POINT_get_Jprojective_coordinates_GFp(), EC_POINT_set_affine_coordinates_GFp(), EC_POINT_get_affine_coordinates_GFp(), EC_POINT_set_compressed_coordinates_GFp(), EC_POINT_set_affine_coordinates_GF2m(), EC_POINT_get_affine_coordinates_GF2m(), EC_POINT_set_compressed_coordinates_GF2m() and EC_POINT_oct2point().",
    "EC_POINT_set_compressed_coordinates_GFp": "The following functions return 1 on success or 0 on error: EC_POINT_copy(), EC_POINT_set_to_infinity(), EC_POINT_set_Jprojective_coordinates_GFp(), EC_POINT_get_Jprojective_coordinates_GFp(), EC_POINT_set_affine_coordinates_GFp(), EC_POINT_get_affine_coordinates_GFp(), EC_POINT_set_compressed_coordinates_GFp(), EC_POINT_set_affine_coordinates_GF2m(), EC_POINT_get_affine_coordinates_GF2m(), EC_POINT_set_compressed_coordinates_GF2m() and EC_POINT_oct2point().",
    "EC_POINT_set_affine_coordinates_GF2m": "The following functions return 1 on success or 0 on error: EC_POINT_copy(), EC_POINT_set_to_infinity(), EC_POINT_set_Jprojective_coordinates_GFp(), EC_POINT_get_Jprojective_coordinates_GFp(), EC_POINT_set_affine_coordinates_GFp(), EC_POINT_get_affine_coordinates_GFp(), EC_POINT_set_compressed_coordinates_GFp(), EC_POINT_set_affine_coordinates_GF2m(), EC_POINT_get_affine_coordinates_GF2m(), EC_POINT_set_compressed_coordinates_GF2m() and EC_POINT_oct2point().",
    "EC_POINT_get_affine_coordinates_GF2m": "The following functions return 1 on success or 0 on error: EC_POINT_copy(), EC_POINT_set_to_infinity(), EC_POINT_set_Jprojective_coordinates_GFp(), EC_POINT_get_Jprojective_coordinates_GFp(), EC_POINT_set_affine_coordinates_GFp(), EC_POINT_get_affine_coordinates_GFp(), EC_POINT_set_compressed_coordinates_GFp(), EC_POINT_set_affine_coordinates_GF2m(), EC_POINT_get_affine_coordinates_GF2m(), EC_POINT_set_compressed_coordinates_GF2m() and EC_POINT_oct2point().",
    "EC_POINT_set_compressed_coordinates_GF2m": "The following functions return 1 on success or 0 on error: EC_POINT_copy(), EC_POINT_set_to_infinity(), EC_POINT_set_Jprojective_coordinates_GFp(), EC_POINT_get_Jprojective_coordinates_GFp(), EC_POINT_set_affine_coordinates_GFp(), EC_POINT_get_affine_coordinates_GFp(), EC_POINT_set_compressed_coordinates_GFp(), EC_POINT_set_affine_coordinates_GF2m(), EC_POINT_get_affine_coordinates_GF2m(), EC_POINT_set_compressed_coordinates_GF2m() and EC_POINT_oct2point().",
    "EC_POINT_oct2point": "The following functions return 1 on success or 0 on error: EC_POINT_copy(), EC_POINT_set_to_infinity(), EC_POINT_set_Jprojective_coordinates_GFp(), EC_POINT_get_Jprojective_coordinates_GFp(), EC_POINT_set_affine_coordinates_GFp(), EC_POINT_get_affine_coordinates_GFp(), EC_POINT_set_compressed_coordinates_GFp(), EC_POINT_set_affine_coordinates_GF2m(), EC_POINT_get_affine_coordinates_GF2m(), EC_POINT_set_compressed_coordinates_GF2m() and EC_POINT_oct2point().",
    "EC_POINT_point2oct": "EC_POINT_point2oct() and EC_POINT_point2buf() return the length of the required buffer or 0 on error.",
    "EC_POINT_point2buf": "EC_POINT_point2oct() and EC_POINT_point2buf() return the length of the required buffer or 0 on error.",
    "EC_POINT_point2bn": "EC_POINT_point2bn() returns the pointer to the BIGNUM supplied, or NULL on error.",
    "EC_POINT_bn2point": "EC_POINT_bn2point() returns the pointer to the EC_POINT supplied, or NULL on error.",
    "EC_POINT_point2hex": "EC_POINT_point2hex() returns a pointer to the hex string, or NULL on error.",
    "EC_POINT_hex2point": "EC_POINT_hex2point() returns the pointer to the EC_POINT supplied, or NULL on error.",
    "CMS_add1_signer": "CMS_add1_signer() returns an internal pointer to the CMS_SignerInfo structure just added or NULL if an error occurs.",
    "OSSL_STORE_SEARCH_by_name": "OSSL_STORE_SEARCH_by_name(), OSSL_STORE_SEARCH_by_issuer_serial(), OSSL_STORE_SEARCH_by_key_fingerprint(), and OSSL_STORE_SEARCH_by_alias() return a B<OSSL_STORE_SEARCH> pointer on success, or NULL on failure.",
    "OSSL_STORE_SEARCH_by_issuer_serial": "OSSL_STORE_SEARCH_by_name(), OSSL_STORE_SEARCH_by_issuer_serial(), OSSL_STORE_SEARCH_by_key_fingerprint(), and OSSL_STORE_SEARCH_by_alias() return a B<OSSL_STORE_SEARCH> pointer on success, or NULL on failure.",
    "OSSL_STORE_SEARCH_by_key_fingerprint": "OSSL_STORE_SEARCH_by_name(), OSSL_STORE_SEARCH_by_issuer_serial(), OSSL_STORE_SEARCH_by_key_fingerprint(), and OSSL_STORE_SEARCH_by_alias() return a B<OSSL_STORE_SEARCH> pointer on success, or NULL on failure.",
    "OSSL_STORE_SEARCH_by_alias": "OSSL_STORE_SEARCH_by_name(), OSSL_STORE_SEARCH_by_issuer_serial(), OSSL_STORE_SEARCH_by_key_fingerprint(), and OSSL_STORE_SEARCH_by_alias() return a B<OSSL_STORE_SEARCH> pointer on success, or NULL on failure.",
    "OSSL_STORE_SEARCH_get_type": "OSSL_STORE_SEARCH_get_type() returns the criterion type of the given B<OSSL_STORE_SEARCH>. There is no error value.",
    "OSSL_STORE_SEARCH_get0_name": "OSSL_STORE_SEARCH_get0_name() returns a B<X509_NAME> pointer on success, or NULL when the given B<OSSL_STORE_SEARCH> was of a different type.",
    "OSSL_STORE_SEARCH_get0_serial": "OSSL_STORE_SEARCH_get0_serial() returns a B<ASN1_INTEGER> pointer on success, or NULL when the given B<OSSL_STORE_SEARCH> was of a different type.",
    "OSSL_STORE_SEARCH_get0_bytes": "OSSL_STORE_SEARCH_get0_bytes() returns a B<const unsigned char> pointer and sets I<*length> to the strings length on success, or NULL when the given B<OSSL_STORE_SEARCH> was of a different type.",
    "OSSL_STORE_SEARCH_get0_string": "OSSL_STORE_SEARCH_get0_string() returns a B<const char> pointer on success, or NULL when the given B<OSSL_STORE_SEARCH> was of a different type.",
    "OSSL_STORE_SEARCH_get0_digest": "OSSL_STORE_SEARCH_get0_digest() returns a B<const EVP_MD> pointer. NULL is a valid value and means that the store loader default will be used when applicable.",
    "RAND_cleanup": "RAND_cleanup() returns no value.",
    "X509_VERIFY_PARAM_set_flags": "X509_VERIFY_PARAM_set_flags(), X509_VERIFY_PARAM_clear_flags(), X509_VERIFY_PARAM_set_inh_flags(), X509_VERIFY_PARAM_set_purpose(), X509_VERIFY_PARAM_set_trust(), X509_VERIFY_PARAM_add0_policy() X509_VERIFY_PARAM_set1_policies(), X509_VERIFY_PARAM_set1_host(), X509_VERIFY_PARAM_add1_host(), X509_VERIFY_PARAM_set1_email(), X509_VERIFY_PARAM_set1_ip() and X509_VERIFY_PARAM_set1_ip_asc() return 1 for success and 0 for failure.",
    "X509_VERIFY_PARAM_clear_flags": "X509_VERIFY_PARAM_set_flags(), X509_VERIFY_PARAM_clear_flags(), X509_VERIFY_PARAM_set_inh_flags(), X509_VERIFY_PARAM_set_purpose(), X509_VERIFY_PARAM_set_trust(), X509_VERIFY_PARAM_add0_policy() X509_VERIFY_PARAM_set1_policies(), X509_VERIFY_PARAM_set1_host(), X509_VERIFY_PARAM_add1_host(), X509_VERIFY_PARAM_set1_email(), X509_VERIFY_PARAM_set1_ip() and X509_VERIFY_PARAM_set1_ip_asc() return 1 for success and 0 for failure.",
    "X509_VERIFY_PARAM_set_inh_flags": "X509_VERIFY_PARAM_set_flags(), X509_VERIFY_PARAM_clear_flags(), X509_VERIFY_PARAM_set_inh_flags(), X509_VERIFY_PARAM_set_purpose(), X509_VERIFY_PARAM_set_trust(), X509_VERIFY_PARAM_add0_policy() X509_VERIFY_PARAM_set1_policies(), X509_VERIFY_PARAM_set1_host(), X509_VERIFY_PARAM_add1_host(), X509_VERIFY_PARAM_set1_email(), X509_VERIFY_PARAM_set1_ip() and X509_VERIFY_PARAM_set1_ip_asc() return 1 for success and 0 for failure.",
    "X509_VERIFY_PARAM_set_purpose": "X509_VERIFY_PARAM_set_flags(), X509_VERIFY_PARAM_clear_flags(), X509_VERIFY_PARAM_set_inh_flags(), X509_VERIFY_PARAM_set_purpose(), X509_VERIFY_PARAM_set_trust(), X509_VERIFY_PARAM_add0_policy() X509_VERIFY_PARAM_set1_policies(), X509_VERIFY_PARAM_set1_host(), X509_VERIFY_PARAM_add1_host(), X509_VERIFY_PARAM_set1_email(), X509_VERIFY_PARAM_set1_ip() and X509_VERIFY_PARAM_set1_ip_asc() return 1 for success and 0 for failure.",
    "X509_VERIFY_PARAM_set_trust": "X509_VERIFY_PARAM_set_flags(), X509_VERIFY_PARAM_clear_flags(), X509_VERIFY_PARAM_set_inh_flags(), X509_VERIFY_PARAM_set_purpose(), X509_VERIFY_PARAM_set_trust(), X509_VERIFY_PARAM_add0_policy() X509_VERIFY_PARAM_set1_policies(), X509_VERIFY_PARAM_set1_host(), X509_VERIFY_PARAM_add1_host(), X509_VERIFY_PARAM_set1_email(), X509_VERIFY_PARAM_set1_ip() and X509_VERIFY_PARAM_set1_ip_asc() return 1 for success and 0 for failure.",
    "X509_VERIFY_PARAM_add0_policy": "X509_VERIFY_PARAM_set_flags(), X509_VERIFY_PARAM_clear_flags(), X509_VERIFY_PARAM_set_inh_flags(), X509_VERIFY_PARAM_set_purpose(), X509_VERIFY_PARAM_set_trust(), X509_VERIFY_PARAM_add0_policy() X509_VERIFY_PARAM_set1_policies(), X509_VERIFY_PARAM_set1_host(), X509_VERIFY_PARAM_add1_host(), X509_VERIFY_PARAM_set1_email(), X509_VERIFY_PARAM_set1_ip() and X509_VERIFY_PARAM_set1_ip_asc() return 1 for success and 0 for failure.",
    "X509_VERIFY_PARAM_set1_policies": "X509_VERIFY_PARAM_set_flags(), X509_VERIFY_PARAM_clear_flags(), X509_VERIFY_PARAM_set_inh_flags(), X509_VERIFY_PARAM_set_purpose(), X509_VERIFY_PARAM_set_trust(), X509_VERIFY_PARAM_add0_policy() X509_VERIFY_PARAM_set1_policies(), X509_VERIFY_PARAM_set1_host(), X509_VERIFY_PARAM_add1_host(), X509_VERIFY_PARAM_set1_email(), X509_VERIFY_PARAM_set1_ip() and X509_VERIFY_PARAM_set1_ip_asc() return 1 for success and 0 for failure.",
    "X509_VERIFY_PARAM_set1_host": "X509_VERIFY_PARAM_set_flags(), X509_VERIFY_PARAM_clear_flags(), X509_VERIFY_PARAM_set_inh_flags(), X509_VERIFY_PARAM_set_purpose(), X509_VERIFY_PARAM_set_trust(), X509_VERIFY_PARAM_add0_policy() X509_VERIFY_PARAM_set1_policies(), X509_VERIFY_PARAM_set1_host(), X509_VERIFY_PARAM_add1_host(), X509_VERIFY_PARAM_set1_email(), X509_VERIFY_PARAM_set1_ip() and X509_VERIFY_PARAM_set1_ip_asc() return 1 for success and 0 for failure.",
    "X509_VERIFY_PARAM_add1_host": "X509_VERIFY_PARAM_set_flags(), X509_VERIFY_PARAM_clear_flags(), X509_VERIFY_PARAM_set_inh_flags(), X509_VERIFY_PARAM_set_purpose(), X509_VERIFY_PARAM_set_trust(), X509_VERIFY_PARAM_add0_policy() X509_VERIFY_PARAM_set1_policies(), X509_VERIFY_PARAM_set1_host(), X509_VERIFY_PARAM_add1_host(), X509_VERIFY_PARAM_set1_email(), X509_VERIFY_PARAM_set1_ip() and X509_VERIFY_PARAM_set1_ip_asc() return 1 for success and 0 for failure.",
    "X509_VERIFY_PARAM_set1_email": "X509_VERIFY_PARAM_set_flags(), X509_VERIFY_PARAM_clear_flags(), X509_VERIFY_PARAM_set_inh_flags(), X509_VERIFY_PARAM_set_purpose(), X509_VERIFY_PARAM_set_trust(), X509_VERIFY_PARAM_add0_policy() X509_VERIFY_PARAM_set1_policies(), X509_VERIFY_PARAM_set1_host(), X509_VERIFY_PARAM_add1_host(), X509_VERIFY_PARAM_set1_email(), X509_VERIFY_PARAM_set1_ip() and X509_VERIFY_PARAM_set1_ip_asc() return 1 for success and 0 for failure.",
    "X509_VERIFY_PARAM_set1_ip": "X509_VERIFY_PARAM_set_flags(), X509_VERIFY_PARAM_clear_flags(), X509_VERIFY_PARAM_set_inh_flags(), X509_VERIFY_PARAM_set_purpose(), X509_VERIFY_PARAM_set_trust(), X509_VERIFY_PARAM_add0_policy() X509_VERIFY_PARAM_set1_policies(), X509_VERIFY_PARAM_set1_host(), X509_VERIFY_PARAM_add1_host(), X509_VERIFY_PARAM_set1_email(), X509_VERIFY_PARAM_set1_ip() and X509_VERIFY_PARAM_set1_ip_asc() return 1 for success and 0 for failure.",
    "X509_VERIFY_PARAM_set1_ip_asc": "X509_VERIFY_PARAM_set_flags(), X509_VERIFY_PARAM_clear_flags(), X509_VERIFY_PARAM_set_inh_flags(), X509_VERIFY_PARAM_set_purpose(), X509_VERIFY_PARAM_set_trust(), X509_VERIFY_PARAM_add0_policy() X509_VERIFY_PARAM_set1_policies(), X509_VERIFY_PARAM_set1_host(), X509_VERIFY_PARAM_add1_host(), X509_VERIFY_PARAM_set1_email(), X509_VERIFY_PARAM_set1_ip() and X509_VERIFY_PARAM_set1_ip_asc() return 1 for success and 0 for failure.",
    "X509_VERIFY_PARAM_get0_host": "X509_VERIFY_PARAM_get0_host(), X509_VERIFY_PARAM_get0_email(), and X509_VERIFY_PARAM_get1_ip_asc(), return the string pointers pecified above or NULL if the respective value has not been set or on error.",
    "X509_VERIFY_PARAM_get0_email": "X509_VERIFY_PARAM_get0_host(), X509_VERIFY_PARAM_get0_email(), and X509_VERIFY_PARAM_get1_ip_asc(), return the string pointers pecified above or NULL if the respective value has not been set or on error.",
    "X509_VERIFY_PARAM_get1_ip_asc": "X509_VERIFY_PARAM_get0_host(), X509_VERIFY_PARAM_get0_email(), and X509_VERIFY_PARAM_get1_ip_asc(), return the string pointers pecified above or NULL if the respective value has not been set or on error.",
    "X509_VERIFY_PARAM_get_flags": "X509_VERIFY_PARAM_get_flags() returns the current verification flags.",
    "X509_VERIFY_PARAM_get_hostflags": "X509_VERIFY_PARAM_get_hostflags() returns any current host flags.",
    "X509_VERIFY_PARAM_get_inh_flags": "X509_VERIFY_PARAM_get_inh_flags() returns the current inheritance flags.",
    "X509_VERIFY_PARAM_set_time": "X509_VERIFY_PARAM_set_time() and X509_VERIFY_PARAM_set_depth() do not return values.",
    "X509_VERIFY_PARAM_set_depth": "X509_VERIFY_PARAM_set_time() and X509_VERIFY_PARAM_set_depth() do not return values.",
    "X509_VERIFY_PARAM_get_depth": "X509_VERIFY_PARAM_get_depth() returns the current verification depth.",
    "X509_VERIFY_PARAM_get_auth_level": "X509_VERIFY_PARAM_get_auth_level() returns the current authentication security level.",
    "OCSP_cert_to_id": "OCSP_cert_to_id() and OCSP_cert_id_new() return either a pointer to a valid B<OCSP_CERTID> structure or B<NULL> if an error occurred.",
    "OCSP_cert_id_new": "OCSP_cert_to_id() and OCSP_cert_id_new() return either a pointer to a valid B<OCSP_CERTID> structure or B<NULL> if an error occurred.",
    "OCSP_id_cmp": "OCSP_id_cmp() and OCSP_id_issuer_cmp() returns zero for a match and nonzero otherwise.",
    "OCSP_id_issuer_cmp": "OCSP_id_cmp() and OCSP_id_issuer_cmp() returns zero for a match and nonzero otherwise.",
    "OCSP_CERTID_free": "OCSP_CERTID_free() does not return a value.",
    "OCSP_id_get0_info": "OCSP_id_get0_info() returns 1 for success and 0 for failure.",
    "EVP_OpenInit": "EVP_OpenInit() returns 0 on error or a non zero integer (actually the recovered secret key size) if successful.",
    "EVP_OpenUpdate": "EVP_OpenUpdate() returns 1 for success or 0 for failure.",
    "EVP_OpenFinal": "EVP_OpenFinal() returns 0 if the decrypt failed or 1 for success.",
    "SSL_sendfile": "For SSL_sendfile(), the following return values can occur:",
    "UI_get_string_type": "UI_get_string_type() returns the UI string type.",
    "UI_get_input_flags": "UI_get_input_flags() returns the UI string flags.",
    "UI_get0_output_string": "UI_get0_output_string() returns the UI string output string.",
    "UI_get0_action_string": "UI_get0_action_string() returns the UI string action description string for B<UIT_BOOLEAN> type UI strings, NULL for any other type.",
    "UI_get0_result_string": "UI_get0_result_string() returns the UI string result buffer for B<UIT_PROMPT> and B<UIT_VERIFY> type UI strings, NULL for any other type.",
    "UI_get_result_string_length": "UI_get_result_string_length() returns the UI string result buffer's content length for B<UIT_PROMPT> and B<UIT_VERIFY> type UI strings, -1 for any other type.",
    "UI_get0_test_string": "UI_get0_test_string() returns the UI string action description string for B<UIT_VERIFY> type UI strings, NULL for any other type.",
    "UI_get_result_minsize": "UI_get_result_minsize() returns the minimum allowed result size for the UI string for B<UIT_PROMPT> and B<UIT_VERIFY> type strings, -1 for any other type.",
    "UI_get_result_maxsize": "UI_get_result_maxsize() returns the minimum allowed result size for the UI string for B<UIT_PROMPT> and B<UIT_VERIFY> type strings, -1 for any other type.",
    "UI_set_result": "UI_set_result() returns 0 on success or when the UI string is of any type other than B<UIT_PROMPT>, B<UIT_VERIFY> or B<UIT_BOOLEAN>, -1 on error.",
    "SSL_CTX_set_quiet_shutdown": "SSL_CTX_set_quiet_shutdown() and SSL_set_quiet_shutdown() do not return diagnostic information.",
    "SSL_set_quiet_shutdown": "SSL_CTX_set_quiet_shutdown() and SSL_set_quiet_shutdown() do not return diagnostic information.",
    "SSL_CTX_get_quiet_shutdown": "SSL_CTX_get_quiet_shutdown() and SSL_get_quiet_shutdown return the current setting.",
    "BIO_lookup_ex": "BIO_lookup_ex() and BIO_lookup() return 1 on success and 0 when an error occurred, and will leave an error indication on the OpenSSL error stack in that case.",
    "BIO_lookup": "BIO_lookup_ex() and BIO_lookup() return 1 on success and 0 when an error occurred, and will leave an error indication on the OpenSSL error stack in that case.",
    "SSL_CTX_set_msg_callback": "SSL_CTX_set_msg_callback(), SSL_CTX_set_msg_callback_arg(), SSL_set_msg_callback() and SSL_set_msg_callback_arg() do not return values.",
    "SSL_CTX_set_msg_callback_arg": "SSL_CTX_set_msg_callback(), SSL_CTX_set_msg_callback_arg(), SSL_set_msg_callback() and SSL_set_msg_callback_arg() do not return values.",
    "SSL_set_msg_callback": "SSL_CTX_set_msg_callback(), SSL_CTX_set_msg_callback_arg(), SSL_set_msg_callback() and SSL_set_msg_callback_arg() do not return values.",
    "SSL_set_msg_callback_arg": "SSL_CTX_set_msg_callback(), SSL_CTX_set_msg_callback_arg(), SSL_set_msg_callback() and SSL_set_msg_callback_arg() do not return values.",
    "EVP_PKEY_decapsulate_init": "EVP_PKEY_decapsulate_init() and EVP_PKEY_decapsulate() return 1 for success and 0 or a negative value for failure. In particular a return value of -2 indicates the operation is not supported by the private key algorithm.",
    "EVP_PKEY_decapsulate": "EVP_PKEY_decapsulate_init() and EVP_PKEY_decapsulate() return 1 for success and 0 or a negative value for failure. In particular a return value of -2 indicates the operation is not supported by the private key algorithm.",
    "OSSL_DECODER_CTX_new": "OSSL_DECODER_CTX_new() returns a pointer to a B<OSSL_DECODER_CTX>, or NULL if the context structure couldn't be allocated.",
    "OSSL_DECODER_settable_ctx_params": "OSSL_DECODER_settable_ctx_params() returns an L<OSSL_PARAM(3)> array, or NULL if none is available.",
    "OSSL_DECODER_CTX_set_params": "OSSL_DECODER_CTX_set_params() returns 1 if all recognised parameters were valid, or 0 if one of them was invalid or caused some other failure in the implementation.",
    "OSSL_DECODER_CTX_add_decoder": "OSSL_DECODER_CTX_add_decoder(), OSSL_DECODER_CTX_add_extra(), OSSL_DECODER_CTX_set_construct(), OSSL_DECODER_CTX_set_construct_data() and OSSL_DECODER_CTX_set_cleanup() return 1 on success, or 0 on failure.",
    "OSSL_DECODER_CTX_add_extra": "OSSL_DECODER_CTX_add_decoder(), OSSL_DECODER_CTX_add_extra(), OSSL_DECODER_CTX_set_construct(), OSSL_DECODER_CTX_set_construct_data() and OSSL_DECODER_CTX_set_cleanup() return 1 on success, or 0 on failure.",
    "OSSL_DECODER_CTX_set_construct": "OSSL_DECODER_CTX_add_decoder(), OSSL_DECODER_CTX_add_extra(), OSSL_DECODER_CTX_set_construct(), OSSL_DECODER_CTX_set_construct_data() and OSSL_DECODER_CTX_set_cleanup() return 1 on success, or 0 on failure.",
    "OSSL_DECODER_CTX_set_construct_data": "OSSL_DECODER_CTX_add_decoder(), OSSL_DECODER_CTX_add_extra(), OSSL_DECODER_CTX_set_construct(), OSSL_DECODER_CTX_set_construct_data() and OSSL_DECODER_CTX_set_cleanup() return 1 on success, or 0 on failure.",
    "OSSL_DECODER_CTX_set_cleanup": "OSSL_DECODER_CTX_add_decoder(), OSSL_DECODER_CTX_add_extra(), OSSL_DECODER_CTX_set_construct(), OSSL_DECODER_CTX_set_construct_data() and OSSL_DECODER_CTX_set_cleanup() return 1 on success, or 0 on failure.",
    "OSSL_DECODER_CTX_get_construct": "OSSL_DECODER_CTX_get_construct(), OSSL_DECODER_CTX_get_construct_data() and OSSL_DECODER_CTX_get_cleanup() return the current pointers to the constructor, the constructor data and the cleanup functions, respectively.",
    "OSSL_DECODER_CTX_get_construct_data": "OSSL_DECODER_CTX_get_construct(), OSSL_DECODER_CTX_get_construct_data() and OSSL_DECODER_CTX_get_cleanup() return the current pointers to the constructor, the constructor data and the cleanup functions, respectively.",
    "OSSL_DECODER_CTX_get_cleanup": "OSSL_DECODER_CTX_get_construct(), OSSL_DECODER_CTX_get_construct_data() and OSSL_DECODER_CTX_get_cleanup() return the current pointers to the constructor, the constructor data and the cleanup functions, respectively.",
    "OSSL_DECODER_CTX_num_decoders": "OSSL_DECODER_CTX_num_decoders() returns the current number of decoders.  It returns 0 if I<ctx> is NULL.",
    "OSSL_DECODER_export": "OSSL_DECODER_export() returns 1 on success, or 0 on failure.",
    "OSSL_DECODER_INSTANCE_decoder": "OSSL_DECODER_INSTANCE_decoder() returns an B<OSSL_DECODER> pointer on success, or NULL on failure.",
    "OSSL_DECODER_INSTANCE_decoder_ctx": "OSSL_DECODER_INSTANCE_decoder_ctx() returns a provider context pointer on success, or NULL on failure.",
    "DH_new": "If the allocation fails, DH_new() returns B<NULL> and sets an error code that can be obtained by L<ERR_get_error(3)>. Otherwise it returns a pointer to the newly allocated structure.",
    "DH_free": "DH_free() returns no value.",
    "EVP_PKEY_encapsulate_init": "EVP_PKEY_encapsulate_init() and EVP_PKEY_encapsulate() return 1 for success and 0 or a negative value for failure. In particular a return value of -2 indicates the operation is not supported by the public key algorithm.",
    "EVP_PKEY_encapsulate": "EVP_PKEY_encapsulate_init() and EVP_PKEY_encapsulate() return 1 for success and 0 or a negative value for failure. In particular a return value of -2 indicates the operation is not supported by the public key algorithm.",
    "ASN1_STRING_length": "ASN1_STRING_length() returns the length of the content of I<x>.",
    "ASN1_STRING_get0_data": "ASN1_STRING_get0_data() and ASN1_STRING_data() return an internal pointer to the data of I<x>.",
    "ASN1_STRING_data": "ASN1_STRING_get0_data() and ASN1_STRING_data() return an internal pointer to the data of I<x>.",
    "ASN1_STRING_dup": "ASN1_STRING_dup() returns a valid B<ASN1_STRING> structure or NULL if an error occurred.",
    "ASN1_STRING_cmp": "ASN1_STRING_cmp() returns an integer greater than, equal to, or less than 0, according to whether I<a> is greater than, equal to, or less than I<b>.",
    "ASN1_STRING_set": "ASN1_STRING_set() returns 1 on success or 0 on error.",
    "ASN1_STRING_type": "ASN1_STRING_type() returns the type of I<x>.",
    "ASN1_STRING_to_UTF8": "ASN1_STRING_to_UTF8() returns the number of bytes in output string I<out> or a negative value if an error occurred.",
    "SHA1": "SHA1(), SHA224(), SHA256(), SHA384() and SHA512() return a pointer to the hash value.",
    "SHA224": "SHA1(), SHA224(), SHA256(), SHA384() and SHA512() return a pointer to the hash value.",
    "SHA256": "SHA1(), SHA224(), SHA256(), SHA384() and SHA512() return a pointer to the hash value.",
    "SHA384": "SHA1(), SHA224(), SHA256(), SHA384() and SHA512() return a pointer to the hash value.",
    "SHA512": "SHA1(), SHA224(), SHA256(), SHA384() and SHA512() return a pointer to the hash value.",
    "SHA1_Init": "SHA1_Init(), SHA1_Update() and SHA1_Final() and equivalent SHA224, SHA256, SHA384 and SHA512 functions return 1 for success, 0 otherwise.",
    "SHA1_Update": "SHA1_Init(), SHA1_Update() and SHA1_Final() and equivalent SHA224, SHA256, SHA384 and SHA512 functions return 1 for success, 0 otherwise.",
    "SHA1_Final": "SHA1_Init(), SHA1_Update() and SHA1_Final() and equivalent SHA224, SHA256, SHA384 and SHA512 functions return 1 for success, 0 otherwise.",
    "EVP_PKEY_settable_params": "EVP_PKEY_settable_params() returns NULL on error or if it is not supported,",
    "SMIME_read_ASN1_ex": "SMIME_read_ASN1_ex() and SMIME_read_ASN1() return a valid B<ASN1_VALUE> structure or B<NULL> if an error occurred. The error can be obtained from ERR_get_error(3).",
    "SMIME_read_ASN1": "SMIME_read_ASN1_ex() and SMIME_read_ASN1() return a valid B<ASN1_VALUE> structure or B<NULL> if an error occurred. The error can be obtained from ERR_get_error(3).",
    "BN_copy": "BN_copy() returns B<to> on success, NULL on error. BN_dup() returns the new B<BIGNUM>, and NULL on error. The error codes can be obtained by L<ERR_get_error(3)>.",
    "BN_dup": "BN_copy() returns B<to> on success, NULL on error. BN_dup() returns the new B<BIGNUM>, and NULL on error. The error codes can be obtained by L<ERR_get_error(3)>.",
    "X509_ALGOR_dup": "X509_ALGOR_dup() returns a valid B<X509_ALGOR> structure or NULL if an error occurred.",
    "X509_ALGOR_set0": "X509_ALGOR_set0() and X509_ALGOR_copy() return 1 on success or 0 on error.",
    "X509_ALGOR_copy": "X509_ALGOR_set0() and X509_ALGOR_copy() return 1 on success or 0 on error.",
    "X509_ALGOR_get0": "X509_ALGOR_get0() and X509_ALGOR_set_md() return no values.",
    "X509_ALGOR_set_md": "X509_ALGOR_get0() and X509_ALGOR_set_md() return no values.",
    "X509_ALGOR_cmp": "X509_ALGOR_cmp() returns 0 if the two parameters have identical encodings and nonzero otherwise.",
    "SSL_CTX_set_generate_session_id": "SSL_CTX_set_generate_session_id() and SSL_set_generate_session_id() always return 1.",
    "SSL_set_generate_session_id": "SSL_CTX_set_generate_session_id() and SSL_set_generate_session_id() always return 1.",
    "SSL_has_matching_session_id": "SSL_has_matching_session_id() returns 1 if another session with the same id is already in the cache.",
    "SSL_rstate_string": "SSL_rstate_string() and SSL_rstate_string_long() can return the following values:",
    "SSL_rstate_string_long": "SSL_rstate_string() and SSL_rstate_string_long() can return the following values:",
    "OSSL_PARAM_construct_TYPE": "OSSL_PARAM_construct_TYPE(), OSSL_PARAM_construct_BN(), OSSL_PARAM_construct_utf8_string(), OSSL_PARAM_construct_octet_string(), OSSL_PARAM_construct_utf8_ptr() and OSSL_PARAM_construct_octet_ptr() return a populated B<OSSL_PARAM> structure.",
    "OSSL_PARAM_construct_BN": "OSSL_PARAM_construct_TYPE(), OSSL_PARAM_construct_BN(), OSSL_PARAM_construct_utf8_string(), OSSL_PARAM_construct_octet_string(), OSSL_PARAM_construct_utf8_ptr() and OSSL_PARAM_construct_octet_ptr() return a populated B<OSSL_PARAM> structure.",
    "OSSL_PARAM_construct_utf8_string": "OSSL_PARAM_construct_TYPE(), OSSL_PARAM_construct_BN(), OSSL_PARAM_construct_utf8_string(), OSSL_PARAM_construct_octet_string(), OSSL_PARAM_construct_utf8_ptr() and OSSL_PARAM_construct_octet_ptr() return a populated B<OSSL_PARAM> structure.",
    "OSSL_PARAM_construct_octet_string": "OSSL_PARAM_construct_TYPE(), OSSL_PARAM_construct_BN(), OSSL_PARAM_construct_utf8_string(), OSSL_PARAM_construct_octet_string(), OSSL_PARAM_construct_utf8_ptr() and OSSL_PARAM_construct_octet_ptr() return a populated B<OSSL_PARAM> structure.",
    "OSSL_PARAM_construct_utf8_ptr": "OSSL_PARAM_construct_TYPE(), OSSL_PARAM_construct_BN(), OSSL_PARAM_construct_utf8_string(), OSSL_PARAM_construct_octet_string(), OSSL_PARAM_construct_utf8_ptr() and OSSL_PARAM_construct_octet_ptr() return a populated B<OSSL_PARAM> structure.",
    "OSSL_PARAM_construct_octet_ptr": "OSSL_PARAM_construct_TYPE(), OSSL_PARAM_construct_BN(), OSSL_PARAM_construct_utf8_string(), OSSL_PARAM_construct_octet_string(), OSSL_PARAM_construct_utf8_ptr() and OSSL_PARAM_construct_octet_ptr() return a populated B<OSSL_PARAM> structure.",
    "OSSL_PARAM_locate": "OSSL_PARAM_locate() and OSSL_PARAM_locate_const() return a pointer to the matching B<OSSL_PARAM> object.  They return NULL on error or when no object matching I<key> exists in the I<array>.",
    "OSSL_PARAM_locate_const": "OSSL_PARAM_locate() and OSSL_PARAM_locate_const() return a pointer to the matching B<OSSL_PARAM> object.  They return NULL on error or when no object matching I<key> exists in the I<array>.",
    "OSSL_PARAM_modified": "OSSL_PARAM_modified() returns 1 if the parameter was set and 0 otherwise.",
    "BIO_get_callback_ex": "BIO_get_callback_ex() and BIO_get_callback() return the callback function previously set by a call to BIO_set_callback_ex() and BIO_set_callback() respectively.",
    "BIO_get_callback": "BIO_get_callback_ex() and BIO_get_callback() return the callback function previously set by a call to BIO_set_callback_ex() and BIO_set_callback() respectively.",
    "BIO_set_callback_ex": "BIO_get_callback_ex() and BIO_get_callback() return the callback function previously set by a call to BIO_set_callback_ex() and BIO_set_callback() respectively.",
    "BIO_set_callback": "BIO_get_callback_ex() and BIO_get_callback() return the callback function previously set by a call to BIO_set_callback_ex() and BIO_set_callback() respectively.",
    "BIO_get_callback_arg": "BIO_get_callback_arg() returns a B<char> pointer to the value previously set via a call to BIO_set_callback_arg().",
    "BIO_set_callback_arg": "BIO_get_callback_arg() returns a B<char> pointer to the value previously set via a call to BIO_set_callback_arg().",
    "BIO_debug_callback": "BIO_debug_callback() returns 1 or B<ret> if it's called after specific BIO operations.",
    "BIO_s_core": "BIO_s_core() return a core BIO B<BIO_METHOD> structure.",
    "BIO_new_from_core_bio": "BIO_new_from_core_bio() returns a BIO structure on success or NULL on failure. A failure will most commonly be because the library context was not constructed using OSSL_LIB_CTX_new_from_dispatch(3).",
    "BN_RECP_CTX_new": "BN_RECP_CTX_new() returns the newly allocated B<BN_RECP_CTX>, and NULL on error.",
    "BN_RECP_CTX_free": "BN_RECP_CTX_free() has no return value.",
    "SSL_CTX_set_alpn_protos": "SSL_CTX_set_alpn_protos() and SSL_set_alpn_protos() return 0 on success, and non-0 on failure. WARNING: these functions reverse the return value convention.",
    "SSL_set_alpn_protos": "SSL_CTX_set_alpn_protos() and SSL_set_alpn_protos() return 0 on success, and non-0 on failure. WARNING: these functions reverse the return value convention.",
    "SSL_select_next_proto": "SSL_select_next_proto() returns one of the following:",
    "SSL_CTX_set_next_proto_select_cb": "The callback set using SSL_CTX_set_next_proto_select_cb() should return B<SSL_TLSEXT_ERR_OK> if successful. Any other value is fatal to the connection.",
    "SSL_CTX_set_next_protos_advertised_cb": "The callback set using SSL_CTX_set_next_protos_advertised_cb() should return B<SSL_TLSEXT_ERR_OK> if it wishes to advertise. Otherwise, no such extension will be included in the ServerHello.",
    "X509_NAME_get_index_by_NID": "X509_NAME_get_index_by_NID() and X509_NAME_get_index_by_OBJ() return the index of the next matching entry or -1 if not found. X509_NAME_get_index_by_NID() can also return -2 if the supplied NID is invalid.",
    "X509_NAME_get_index_by_OBJ": "X509_NAME_get_index_by_NID() and X509_NAME_get_index_by_OBJ() return the index of the next matching entry or -1 if not found. X509_NAME_get_index_by_NID() can also return -2 if the supplied NID is invalid.",
    "X509_NAME_entry_count": "X509_NAME_entry_count() returns the total number of entries.",
    "X509_NAME_get_entry": "X509_NAME_get_entry() returns an B<X509_NAME> pointer to the requested entry or B<NULL> if the index is invalid.",
    "SSL_SESSION_get0_peer": "SSL_SESSION_get0_peer() returns a pointer to the peer certificate or NULL if no peer certificate is available.",
    "PEM_X509_INFO_read_ex": "PEM_X509_INFO_read_ex() and PEM_X509_INFO_read_bio_ex() return a stack of B<X509_INFO> objects or NULL on failure.",
    "PEM_X509_INFO_read_bio_ex": "PEM_X509_INFO_read_ex() and PEM_X509_INFO_read_bio_ex() return a stack of B<X509_INFO> objects or NULL on failure.",
    "CRYPTO_memcmp": "CRYPTO_memcmp() returns 0 if the memory regions are equal and nonzero otherwise.",
    "SSL_write_early_data": "SSL_write_early_data() returns 1 for success or 0 for failure. In the event of a failure call L<SSL_get_error(3)> to determine the correct course of action.",
    "SSL_read_early_data": "SSL_read_early_data() returns SSL_READ_EARLY_DATA_ERROR for failure, SSL_READ_EARLY_DATA_SUCCESS for success with more data to read and SSL_READ_EARLY_DATA_FINISH for success with no more to data be read. In the event of a failure call L<SSL_get_error(3)> to determine the correct course of action.",
    "SSL_get_max_early_data": "SSL_get_max_early_data(), SSL_CTX_get_max_early_data() and SSL_SESSION_get_max_early_data() return the maximum number of early data bytes that may be sent.",
    "SSL_CTX_get_max_early_data": "SSL_get_max_early_data(), SSL_CTX_get_max_early_data() and SSL_SESSION_get_max_early_data() return the maximum number of early data bytes that may be sent.",
    "SSL_SESSION_get_max_early_data": "SSL_get_max_early_data(), SSL_CTX_get_max_early_data() and SSL_SESSION_get_max_early_data() return the maximum number of early data bytes that may be sent.",
    "SSL_set_max_early_data": "SSL_set_max_early_data(), SSL_CTX_set_max_early_data() and SSL_SESSION_set_max_early_data() return 1 for success or 0 for failure.",
    "SSL_CTX_set_max_early_data": "SSL_set_max_early_data(), SSL_CTX_set_max_early_data() and SSL_SESSION_set_max_early_data() return 1 for success or 0 for failure.",
    "SSL_SESSION_set_max_early_data": "SSL_set_max_early_data(), SSL_CTX_set_max_early_data() and SSL_SESSION_set_max_early_data() return 1 for success or 0 for failure.",
    "SSL_get_early_data_status": "SSL_get_early_data_status() returns SSL_EARLY_DATA_ACCEPTED if early data was accepted by the server, SSL_EARLY_DATA_REJECTED if early data was rejected by the server, or SSL_EARLY_DATA_NOT_SENT if no early data was sent.",
    "BN_cmp": "BN_cmp() returns -1 if I<a> E<lt> I<b>, 0 if I<a> == I<b> and 1 if I<a> E<gt> I<b>. BN_ucmp() is the same using the absolute values of I<a> and I<b>.",
    "BN_ucmp": "BN_cmp() returns -1 if I<a> E<lt> I<b>, 0 if I<a> == I<b> and 1 if I<a> E<gt> I<b>. BN_ucmp() is the same using the absolute values of I<a> and I<b>.",
    "BN_is_zero": "BN_is_zero(), BN_is_one() BN_is_word(), BN_abs_is_word() and BN_is_odd() return 1 if the condition is true, 0 otherwise.",
    "BN_is_one": "BN_is_zero(), BN_is_one() BN_is_word(), BN_abs_is_word() and BN_is_odd() return 1 if the condition is true, 0 otherwise.",
    "BN_is_word": "BN_is_zero(), BN_is_one() BN_is_word(), BN_abs_is_word() and BN_is_odd() return 1 if the condition is true, 0 otherwise.",
    "BN_abs_is_word": "BN_is_zero(), BN_is_one() BN_is_word(), BN_abs_is_word() and BN_is_odd() return 1 if the condition is true, 0 otherwise.",
    "BN_is_odd": "BN_is_zero(), BN_is_one() BN_is_word(), BN_abs_is_word() and BN_is_odd() return 1 if the condition is true, 0 otherwise.",
    "X509_STORE_get0_param": "X509_STORE_get0_param() returns a pointer to an B<X509_VERIFY_PARAM> structure.",
    "X509_STORE_set1_param": "X509_STORE_set1_param() returns 1 for success and 0 for failure.",
    "X509_STORE_get0_objects": "X509_STORE_get0_objects() returns a pointer to a stack of B<X509_OBJECT>.",
    "X509_STORE_get1_all_certs": "X509_STORE_get1_all_certs() returns a pointer to a stack of the retrieved certificates on success, else NULL.",
    "OSSL_CMP_MSG_http_perform": "OSSL_CMP_MSG_http_perform() returns a CMP message on success, else NULL.",
    "OSSL_DECODER_CTX_new_for_pkey": "OSSL_DECODER_CTX_new_for_pkey() returns a pointer to a B<OSSL_DECODER_CTX>, or NULL if it couldn't be created.",
    "OSSL_DECODER_CTX_set_passphrase": "OSSL_DECODER_CTX_set_passphrase(), OSSL_DECODER_CTX_set_pem_password_cb(), OSSL_DECODER_CTX_set_passphrase_ui() and OSSL_DECODER_CTX_set_passphrase_cb() all return 1 on success, or 0 on failure.",
    "OSSL_DECODER_CTX_set_pem_password_cb": "OSSL_DECODER_CTX_set_passphrase(), OSSL_DECODER_CTX_set_pem_password_cb(), OSSL_DECODER_CTX_set_passphrase_ui() and OSSL_DECODER_CTX_set_passphrase_cb() all return 1 on success, or 0 on failure.",
    "OSSL_DECODER_CTX_set_passphrase_ui": "OSSL_DECODER_CTX_set_passphrase(), OSSL_DECODER_CTX_set_pem_password_cb(), OSSL_DECODER_CTX_set_passphrase_ui() and OSSL_DECODER_CTX_set_passphrase_cb() all return 1 on success, or 0 on failure.",
    "OSSL_DECODER_CTX_set_passphrase_cb": "OSSL_DECODER_CTX_set_passphrase(), OSSL_DECODER_CTX_set_pem_password_cb(), OSSL_DECODER_CTX_set_passphrase_ui() and OSSL_DECODER_CTX_set_passphrase_cb() all return 1 on success, or 0 on failure.",
    "SSL_CONF_CTX_set_flags": "SSL_CONF_CTX_set_flags() and SSL_CONF_CTX_clear_flags() returns the new flags value after setting or clearing flags.",
    "SSL_CONF_CTX_clear_flags": "SSL_CONF_CTX_set_flags() and SSL_CONF_CTX_clear_flags() returns the new flags value after setting or clearing flags.",
    "BIO_f_prefix": "BIO_f_prefix() returns the prefix BIO method.",
    "BIO_set_prefix": "BIO_set_prefix() returns 1 if the prefix was correctly set, or 0 on failure.",
    "BIO_set_indent": "BIO_set_indent() returns 1 if the prefix was correctly set, or 0 on failure.",
    "BIO_get_indent": "BIO_get_indent() returns the current indentation.",
    "SSL_set_info_callback": "SSL_set_info_callback() does not provide diagnostic information.",
    "SSL_get_info_callback": "SSL_get_info_callback() returns the current setting.",
    "CRYPTO_THREAD_run_once": "CRYPTO_THREAD_run_once() returns 1 on success, or 0 on error.",
    "CRYPTO_THREAD_lock_new": "CRYPTO_THREAD_lock_new() returns the allocated lock, or NULL on error.",
    "CRYPTO_THREAD_lock_free": "CRYPTO_THREAD_lock_free() returns no value.",
    "SSL_SESSION_has_ticket": "SSL_SESSION_has_ticket() returns 1 if session ticket exists or 0 otherwise.",
    "SSL_SESSION_get_ticket_lifetime_hint": "SSL_SESSION_get_ticket_lifetime_hint() returns the number of seconds.",
    "CRYPTO_secure_malloc_init": "CRYPTO_secure_malloc_initialized() returns 1 if the secure heap is available (that is, if CRYPTO_secure_malloc_init() has been called, but CRYPTO_secure_malloc_done() has not been called or failed) or 0 if not.",
    "CRYPTO_secure_malloc_initialized": "CRYPTO_secure_malloc_initialized() returns 1 if the secure heap is available (that is, if CRYPTO_secure_malloc_init() has been called, but CRYPTO_secure_malloc_done() has not been called or failed) or 0 if not.",
    "CRYPTO_secure_malloc_done": "CRYPTO_secure_malloc_done() returns 1 if the secure memory area is released, or 0 if not.",
    "OPENSSL_secure_malloc": "OPENSSL_secure_malloc() and OPENSSL_secure_zalloc() return a pointer into the secure heap of the requested size, or C<NULL> if memory could not be allocated.",
    "OPENSSL_secure_zalloc": "OPENSSL_secure_malloc() and OPENSSL_secure_zalloc() return a pointer into the secure heap of the requested size, or C<NULL> if memory could not be allocated.",
    "CRYPTO_secure_allocated": "CRYPTO_secure_allocated() returns 1 if the pointer is in the secure heap, or 0 if not.",
    "OPENSSL_secure_free": "OPENSSL_secure_free() and OPENSSL_secure_clear_free() return no values.",
    "OPENSSL_secure_clear_free": "OPENSSL_secure_free() and OPENSSL_secure_clear_free() return no values.",
    "UI_new": "UI_new() and UI_new_method() return a valid B<UI> structure or NULL if an error occurred.",
    "UI_new_method": "UI_new() and UI_new_method() return a valid B<UI> structure or NULL if an error occurred.",
    "UI_add_input_string": "UI_add_input_string(), UI_dup_input_string(), UI_add_verify_string(), UI_dup_verify_string(), UI_add_input_boolean(), UI_dup_input_boolean(), UI_add_info_string(), UI_dup_info_string(), UI_add_error_string() and UI_dup_error_string() return a positive number on success or a value which is less than or equal to 0 otherwise.",
    "UI_dup_input_string": "UI_add_input_string(), UI_dup_input_string(), UI_add_verify_string(), UI_dup_verify_string(), UI_add_input_boolean(), UI_dup_input_boolean(), UI_add_info_string(), UI_dup_info_string(), UI_add_error_string() and UI_dup_error_string() return a positive number on success or a value which is less than or equal to 0 otherwise.",
    "UI_add_verify_string": "UI_add_input_string(), UI_dup_input_string(), UI_add_verify_string(), UI_dup_verify_string(), UI_add_input_boolean(), UI_dup_input_boolean(), UI_add_info_string(), UI_dup_info_string(), UI_add_error_string() and UI_dup_error_string() return a positive number on success or a value which is less than or equal to 0 otherwise.",
    "UI_dup_verify_string": "UI_add_input_string(), UI_dup_input_string(), UI_add_verify_string(), UI_dup_verify_string(), UI_add_input_boolean(), UI_dup_input_boolean(), UI_add_info_string(), UI_dup_info_string(), UI_add_error_string() and UI_dup_error_string() return a positive number on success or a value which is less than or equal to 0 otherwise.",
    "UI_add_input_boolean": "UI_add_input_string(), UI_dup_input_string(), UI_add_verify_string(), UI_dup_verify_string(), UI_add_input_boolean(), UI_dup_input_boolean(), UI_add_info_string(), UI_dup_info_string(), UI_add_error_string() and UI_dup_error_string() return a positive number on success or a value which is less than or equal to 0 otherwise.",
    "UI_dup_input_boolean": "UI_add_input_string(), UI_dup_input_string(), UI_add_verify_string(), UI_dup_verify_string(), UI_add_input_boolean(), UI_dup_input_boolean(), UI_add_info_string(), UI_dup_info_string(), UI_add_error_string() and UI_dup_error_string() return a positive number on success or a value which is less than or equal to 0 otherwise.",
    "UI_add_info_string": "UI_add_input_string(), UI_dup_input_string(), UI_add_verify_string(), UI_dup_verify_string(), UI_add_input_boolean(), UI_dup_input_boolean(), UI_add_info_string(), UI_dup_info_string(), UI_add_error_string() and UI_dup_error_string() return a positive number on success or a value which is less than or equal to 0 otherwise.",
    "UI_dup_info_string": "UI_add_input_string(), UI_dup_input_string(), UI_add_verify_string(), UI_dup_verify_string(), UI_add_input_boolean(), UI_dup_input_boolean(), UI_add_info_string(), UI_dup_info_string(), UI_add_error_string() and UI_dup_error_string() return a positive number on success or a value which is less than or equal to 0 otherwise.",
    "UI_add_error_string": "UI_add_input_string(), UI_dup_input_string(), UI_add_verify_string(), UI_dup_verify_string(), UI_add_input_boolean(), UI_dup_input_boolean(), UI_add_info_string(), UI_dup_info_string(), UI_add_error_string() and UI_dup_error_string() return a positive number on success or a value which is less than or equal to 0 otherwise.",
    "UI_dup_error_string": "UI_add_input_string(), UI_dup_input_string(), UI_add_verify_string(), UI_dup_verify_string(), UI_add_input_boolean(), UI_dup_input_boolean(), UI_add_info_string(), UI_dup_info_string(), UI_add_error_string() and UI_dup_error_string() return a positive number on success or a value which is less than or equal to 0 otherwise.",
    "UI_construct_prompt": "UI_construct_prompt() returns a string or NULL if an error occurred.",
    "UI_dup_user_data": "UI_dup_user_data() returns 0 on success or -1 on error.",
    "UI_get0_result": "UI_get0_result() returns a string or NULL on error.",
    "UI_get_result_length": "UI_get_result_length() returns a positive integer or 0 on success; otherwise it returns -1 on error.",
    "UI_process": "UI_process() returns 0 on success or a negative value on error.",
    "UI_ctrl": "UI_ctrl() returns a mask on success or -1 on error.",
    "UI_get_default_method": "UI_get_default_method(), UI_get_method(), UI_OpenSSL(), UI_null() and UI_set_method() return either a valid B<UI_METHOD> structure or NULL respectively.",
    "UI_get_method": "UI_get_default_method(), UI_get_method(), UI_OpenSSL(), UI_null() and UI_set_method() return either a valid B<UI_METHOD> structure or NULL respectively.",
    "UI_OpenSSL": "UI_get_default_method(), UI_get_method(), UI_OpenSSL(), UI_null() and UI_set_method() return either a valid B<UI_METHOD> structure or NULL respectively.",
    "UI_null": "UI_get_default_method(), UI_get_method(), UI_OpenSSL(), UI_null() and UI_set_method() return either a valid B<UI_METHOD> structure or NULL respectively.",
    "UI_set_method": "UI_get_default_method(), UI_get_method(), UI_OpenSSL(), UI_null() and UI_set_method() return either a valid B<UI_METHOD> structure or NULL respectively.",
    "OSSL_CMP_CTX_free": "OSSL_CMP_exec_certreq(), OSSL_CMP_exec_IR_ses(), OSSL_CMP_exec_CR_ses(), OSSL_CMP_exec_P10CR_ses(), and OSSL_CMP_exec_KUR_ses() return a pointer to the newly obtained X509 certificate on success, NULL on error. This pointer will be freed implicitly by OSSL_CMP_CTX_free() or CSSL_CMP_CTX_reinit().",
    "OSSL_CMP_CTX_print_errors": "OSSL_CMP_CTX_free() and OSSL_CMP_CTX_print_errors() do not return anything.",
    "OSSL_CMP_CTX_new": "OSSL_CMP_CTX_new(), OSSL_CMP_CTX_get_http_cb_arg(), OSSL_CMP_CTX_get_transfer_cb_arg(), OSSL_CMP_CTX_get0_trustedStore(), OSSL_CMP_CTX_get0_untrusted(), OSSL_CMP_CTX_get0_newPkey(), OSSL_CMP_CTX_get_certConf_cb_arg(), OSSL_CMP_CTX_get0_statusString(), OSSL_CMP_CTX_get0_newCert(), OSSL_CMP_CTX_get0_newChain(), OSSL_CMP_CTX_get1_caPubs(), and OSSL_CMP_CTX_get1_extraCertsIn() return the intended pointer value as described above or NULL on error.",
    "OSSL_CMP_CTX_get_http_cb_arg": "OSSL_CMP_CTX_new(), OSSL_CMP_CTX_get_http_cb_arg(), OSSL_CMP_CTX_get_transfer_cb_arg(), OSSL_CMP_CTX_get0_trustedStore(), OSSL_CMP_CTX_get0_untrusted(), OSSL_CMP_CTX_get0_newPkey(), OSSL_CMP_CTX_get_certConf_cb_arg(), OSSL_CMP_CTX_get0_statusString(), OSSL_CMP_CTX_get0_newCert(), OSSL_CMP_CTX_get0_newChain(), OSSL_CMP_CTX_get1_caPubs(), and OSSL_CMP_CTX_get1_extraCertsIn() return the intended pointer value as described above or NULL on error.",
    "OSSL_CMP_CTX_get_transfer_cb_arg": "OSSL_CMP_CTX_new(), OSSL_CMP_CTX_get_http_cb_arg(), OSSL_CMP_CTX_get_transfer_cb_arg(), OSSL_CMP_CTX_get0_trustedStore(), OSSL_CMP_CTX_get0_untrusted(), OSSL_CMP_CTX_get0_newPkey(), OSSL_CMP_CTX_get_certConf_cb_arg(), OSSL_CMP_CTX_get0_statusString(), OSSL_CMP_CTX_get0_newCert(), OSSL_CMP_CTX_get0_newChain(), OSSL_CMP_CTX_get1_caPubs(), and OSSL_CMP_CTX_get1_extraCertsIn() return the intended pointer value as described above or NULL on error.",
    "OSSL_CMP_CTX_get0_trustedStore": "OSSL_CMP_CTX_new(), OSSL_CMP_CTX_get_http_cb_arg(), OSSL_CMP_CTX_get_transfer_cb_arg(), OSSL_CMP_CTX_get0_trustedStore(), OSSL_CMP_CTX_get0_untrusted(), OSSL_CMP_CTX_get0_newPkey(), OSSL_CMP_CTX_get_certConf_cb_arg(), OSSL_CMP_CTX_get0_statusString(), OSSL_CMP_CTX_get0_newCert(), OSSL_CMP_CTX_get0_newChain(), OSSL_CMP_CTX_get1_caPubs(), and OSSL_CMP_CTX_get1_extraCertsIn() return the intended pointer value as described above or NULL on error.",
    "OSSL_CMP_CTX_get0_untrusted": "OSSL_CMP_CTX_new(), OSSL_CMP_CTX_get_http_cb_arg(), OSSL_CMP_CTX_get_transfer_cb_arg(), OSSL_CMP_CTX_get0_trustedStore(), OSSL_CMP_CTX_get0_untrusted(), OSSL_CMP_CTX_get0_newPkey(), OSSL_CMP_CTX_get_certConf_cb_arg(), OSSL_CMP_CTX_get0_statusString(), OSSL_CMP_CTX_get0_newCert(), OSSL_CMP_CTX_get0_newChain(), OSSL_CMP_CTX_get1_caPubs(), and OSSL_CMP_CTX_get1_extraCertsIn() return the intended pointer value as described above or NULL on error.",
    "OSSL_CMP_CTX_get0_newPkey": "OSSL_CMP_CTX_new(), OSSL_CMP_CTX_get_http_cb_arg(), OSSL_CMP_CTX_get_transfer_cb_arg(), OSSL_CMP_CTX_get0_trustedStore(), OSSL_CMP_CTX_get0_untrusted(), OSSL_CMP_CTX_get0_newPkey(), OSSL_CMP_CTX_get_certConf_cb_arg(), OSSL_CMP_CTX_get0_statusString(), OSSL_CMP_CTX_get0_newCert(), OSSL_CMP_CTX_get0_newChain(), OSSL_CMP_CTX_get1_caPubs(), and OSSL_CMP_CTX_get1_extraCertsIn() return the intended pointer value as described above or NULL on error.",
    "OSSL_CMP_CTX_get_certConf_cb_arg": "OSSL_CMP_CTX_new(), OSSL_CMP_CTX_get_http_cb_arg(), OSSL_CMP_CTX_get_transfer_cb_arg(), OSSL_CMP_CTX_get0_trustedStore(), OSSL_CMP_CTX_get0_untrusted(), OSSL_CMP_CTX_get0_newPkey(), OSSL_CMP_CTX_get_certConf_cb_arg(), OSSL_CMP_CTX_get0_statusString(), OSSL_CMP_CTX_get0_newCert(), OSSL_CMP_CTX_get0_newChain(), OSSL_CMP_CTX_get1_caPubs(), and OSSL_CMP_CTX_get1_extraCertsIn() return the intended pointer value as described above or NULL on error.",
    "OSSL_CMP_CTX_get0_statusString": "OSSL_CMP_CTX_new(), OSSL_CMP_CTX_get_http_cb_arg(), OSSL_CMP_CTX_get_transfer_cb_arg(), OSSL_CMP_CTX_get0_trustedStore(), OSSL_CMP_CTX_get0_untrusted(), OSSL_CMP_CTX_get0_newPkey(), OSSL_CMP_CTX_get_certConf_cb_arg(), OSSL_CMP_CTX_get0_statusString(), OSSL_CMP_CTX_get0_newCert(), OSSL_CMP_CTX_get0_newChain(), OSSL_CMP_CTX_get1_caPubs(), and OSSL_CMP_CTX_get1_extraCertsIn() return the intended pointer value as described above or NULL on error.",
    "OSSL_CMP_CTX_get0_newCert": "OSSL_CMP_CTX_new(), OSSL_CMP_CTX_get_http_cb_arg(), OSSL_CMP_CTX_get_transfer_cb_arg(), OSSL_CMP_CTX_get0_trustedStore(), OSSL_CMP_CTX_get0_untrusted(), OSSL_CMP_CTX_get0_newPkey(), OSSL_CMP_CTX_get_certConf_cb_arg(), OSSL_CMP_CTX_get0_statusString(), OSSL_CMP_CTX_get0_newCert(), OSSL_CMP_CTX_get0_newChain(), OSSL_CMP_CTX_get1_caPubs(), and OSSL_CMP_CTX_get1_extraCertsIn() return the intended pointer value as described above or NULL on error.",
    "OSSL_CMP_CTX_get0_newChain": "OSSL_CMP_CTX_new(), OSSL_CMP_CTX_get_http_cb_arg(), OSSL_CMP_CTX_get_transfer_cb_arg(), OSSL_CMP_CTX_get0_trustedStore(), OSSL_CMP_CTX_get0_untrusted(), OSSL_CMP_CTX_get0_newPkey(), OSSL_CMP_CTX_get_certConf_cb_arg(), OSSL_CMP_CTX_get0_statusString(), OSSL_CMP_CTX_get0_newCert(), OSSL_CMP_CTX_get0_newChain(), OSSL_CMP_CTX_get1_caPubs(), and OSSL_CMP_CTX_get1_extraCertsIn() return the intended pointer value as described above or NULL on error.",
    "OSSL_CMP_CTX_get1_caPubs": "OSSL_CMP_CTX_new(), OSSL_CMP_CTX_get_http_cb_arg(), OSSL_CMP_CTX_get_transfer_cb_arg(), OSSL_CMP_CTX_get0_trustedStore(), OSSL_CMP_CTX_get0_untrusted(), OSSL_CMP_CTX_get0_newPkey(), OSSL_CMP_CTX_get_certConf_cb_arg(), OSSL_CMP_CTX_get0_statusString(), OSSL_CMP_CTX_get0_newCert(), OSSL_CMP_CTX_get0_newChain(), OSSL_CMP_CTX_get1_caPubs(), and OSSL_CMP_CTX_get1_extraCertsIn() return the intended pointer value as described above or NULL on error.",
    "OSSL_CMP_CTX_get1_extraCertsIn": "OSSL_CMP_CTX_new(), OSSL_CMP_CTX_get_http_cb_arg(), OSSL_CMP_CTX_get_transfer_cb_arg(), OSSL_CMP_CTX_get0_trustedStore(), OSSL_CMP_CTX_get0_untrusted(), OSSL_CMP_CTX_get0_newPkey(), OSSL_CMP_CTX_get_certConf_cb_arg(), OSSL_CMP_CTX_get0_statusString(), OSSL_CMP_CTX_get0_newCert(), OSSL_CMP_CTX_get0_newChain(), OSSL_CMP_CTX_get1_caPubs(), and OSSL_CMP_CTX_get1_extraCertsIn() return the intended pointer value as described above or NULL on error.",
    "OSSL_CMP_CTX_get_option": "OSSL_CMP_CTX_get_option(), OSSL_CMP_CTX_reqExtensions_have_SAN(), OSSL_CMP_CTX_get_status(), and OSSL_CMP_CTX_get_failInfoCode() return the intended value as described above or -1 on error.",
    "OSSL_CMP_CTX_reqExtensions_have_SAN": "OSSL_CMP_CTX_get_option(), OSSL_CMP_CTX_reqExtensions_have_SAN(), OSSL_CMP_CTX_get_status(), and OSSL_CMP_CTX_get_failInfoCode() return the intended value as described above or -1 on error.",
    "OSSL_CMP_CTX_get_status": "OSSL_CMP_CTX_get_option(), OSSL_CMP_CTX_reqExtensions_have_SAN(), OSSL_CMP_CTX_get_status(), and OSSL_CMP_CTX_get_failInfoCode() return the intended value as described above or -1 on error.",
    "OSSL_CMP_CTX_get_failInfoCode": "OSSL_CMP_CTX_get_option(), OSSL_CMP_CTX_reqExtensions_have_SAN(), OSSL_CMP_CTX_get_status(), and OSSL_CMP_CTX_get_failInfoCode() return the intended value as described above or -1 on error.",
    "OSSL_CMP_certConf_cb": "OSSL_CMP_certConf_cb() returns I<fail_info> if it is not equal to 0, else 0 on successful validation, or else a bit field with the B<OSSL_CMP_PKIFAILUREINFO_incorrectData> bit set.",
    "ASN1_INTEGER_set_int64": "ASN1_INTEGER_set_int64(), ASN1_INTEGER_set(), ASN1_ENUMERATED_set_int64() and ASN1_ENUMERATED_set() return 1 for success and 0 for failure. They will only fail if a memory allocation error occurs.",
    "ASN1_INTEGER_set": "ASN1_INTEGER_set_int64(), ASN1_INTEGER_set(), ASN1_ENUMERATED_set_int64() and ASN1_ENUMERATED_set() return 1 for success and 0 for failure. They will only fail if a memory allocation error occurs.",
    "ASN1_ENUMERATED_set_int64": "ASN1_INTEGER_set_int64(), ASN1_INTEGER_set(), ASN1_ENUMERATED_set_int64() and ASN1_ENUMERATED_set() return 1 for success and 0 for failure. They will only fail if a memory allocation error occurs.",
    "ASN1_ENUMERATED_set": "ASN1_INTEGER_set_int64(), ASN1_INTEGER_set(), ASN1_ENUMERATED_set_int64() and ASN1_ENUMERATED_set() return 1 for success and 0 for failure. They will only fail if a memory allocation error occurs.",
    "ASN1_INTEGER_get_int64": "ASN1_INTEGER_get_int64() and ASN1_ENUMERATED_get_int64() return 1 for success and 0 for failure. They will fail if the passed type is incorrect (this will only happen if there is a programming error) or if the value exceeds the range of an B<int64_t> type.",
    "ASN1_ENUMERATED_get_int64": "ASN1_INTEGER_get_int64() and ASN1_ENUMERATED_get_int64() return 1 for success and 0 for failure. They will fail if the passed type is incorrect (this will only happen if there is a programming error) or if the value exceeds the range of an B<int64_t> type.",
    "BN_to_ASN1_INTEGER": "BN_to_ASN1_INTEGER() and BN_to_ASN1_ENUMERATED() return an B<ASN1_INTEGER> or B<ASN1_ENUMERATED> structure respectively or NULL if an error occurs. They will only fail due to a memory allocation error.",
    "BN_to_ASN1_ENUMERATED": "BN_to_ASN1_INTEGER() and BN_to_ASN1_ENUMERATED() return an B<ASN1_INTEGER> or B<ASN1_ENUMERATED> structure respectively or NULL if an error occurs. They will only fail due to a memory allocation error.",
    "ASN1_INTEGER_to_BN": "ASN1_INTEGER_to_BN() and ASN1_ENUMERATED_to_BN() return a B<BIGNUM> structure of NULL if an error occurs. They can fail if the passed type is incorrect (due to programming error) or due to a memory allocation failure.",
    "ASN1_ENUMERATED_to_BN": "ASN1_INTEGER_to_BN() and ASN1_ENUMERATED_to_BN() return a B<BIGNUM> structure of NULL if an error occurs. They can fail if the passed type is incorrect (due to programming error) or due to a memory allocation failure.",
    "PKCS7_verify": "PKCS7_verify() returns one for a successful verification and zero if an error occurs.",
    "PKCS7_get0_signers": "PKCS7_get0_signers() returns all signers or B<NULL> if an error occurred.",
    "X509_get_subject_name": "X509_get_subject_name(), X509_get_issuer_name(), X509_REQ_get_subject_name() and X509_CRL_get_issuer() return an B<X509_NAME> pointer.",
    "X509_get_issuer_name": "X509_get_subject_name(), X509_get_issuer_name(), X509_REQ_get_subject_name() and X509_CRL_get_issuer() return an B<X509_NAME> pointer.",
    "X509_REQ_get_subject_name": "X509_get_subject_name(), X509_get_issuer_name(), X509_REQ_get_subject_name() and X509_CRL_get_issuer() return an B<X509_NAME> pointer.",
    "X509_CRL_get_issuer": "X509_get_subject_name(), X509_get_issuer_name(), X509_REQ_get_subject_name() and X509_CRL_get_issuer() return an B<X509_NAME> pointer.",
    "X509_NAME_hash_ex": "X509_NAME_hash_ex(), X509_NAME_hash(), X509_subject_name_hash() and X509_issuer_name_hash() return the first four bytes of the SHA1 hash value, converted to B<unsigned long> in little endian order, or 0 on failure.",
    "X509_NAME_hash": "X509_NAME_hash_ex(), X509_NAME_hash(), X509_subject_name_hash() and X509_issuer_name_hash() return the first four bytes of the SHA1 hash value, converted to B<unsigned long> in little endian order, or 0 on failure.",
    "X509_subject_name_hash": "X509_NAME_hash_ex(), X509_NAME_hash(), X509_subject_name_hash() and X509_issuer_name_hash() return the first four bytes of the SHA1 hash value, converted to B<unsigned long> in little endian order, or 0 on failure.",
    "X509_issuer_name_hash": "X509_NAME_hash_ex(), X509_NAME_hash(), X509_subject_name_hash() and X509_issuer_name_hash() return the first four bytes of the SHA1 hash value, converted to B<unsigned long> in little endian order, or 0 on failure.",
    "X509_set_subject_name": "X509_set_subject_name(), X509_set_issuer_name(), X509_REQ_set_subject_name() and X509_CRL_set_issuer_name() return 1 for success and 0 for failure.",
    "X509_set_issuer_name": "X509_set_subject_name(), X509_set_issuer_name(), X509_REQ_set_subject_name() and X509_CRL_set_issuer_name() return 1 for success and 0 for failure.",
    "X509_REQ_set_subject_name": "X509_set_subject_name(), X509_set_issuer_name(), X509_REQ_set_subject_name() and X509_CRL_set_issuer_name() return 1 for success and 0 for failure.",
    "X509_CRL_set_issuer_name": "X509_set_subject_name(), X509_set_issuer_name(), X509_REQ_set_subject_name() and X509_CRL_set_issuer_name() return 1 for success and 0 for failure.",
    "X509_STORE_add_cert": "X509_STORE_add_cert(), X509_STORE_add_crl(), X509_STORE_set_depth(), X509_STORE_set_flags(), X509_STORE_set_purpose(), X509_STORE_set_trust(), X509_STORE_load_file_ex(), X509_STORE_load_file(), X509_STORE_load_path(), X509_STORE_load_store_ex(), X509_STORE_load_store(), X509_STORE_load_locations_ex(), X509_STORE_load_locations(), X509_STORE_set_default_paths_ex() and X509_STORE_set_default_paths() return 1 on success or 0 on failure.",
    "X509_STORE_add_crl": "X509_STORE_add_cert(), X509_STORE_add_crl(), X509_STORE_set_depth(), X509_STORE_set_flags(), X509_STORE_set_purpose(), X509_STORE_set_trust(), X509_STORE_load_file_ex(), X509_STORE_load_file(), X509_STORE_load_path(), X509_STORE_load_store_ex(), X509_STORE_load_store(), X509_STORE_load_locations_ex(), X509_STORE_load_locations(), X509_STORE_set_default_paths_ex() and X509_STORE_set_default_paths() return 1 on success or 0 on failure.",
    "X509_STORE_set_depth": "X509_STORE_add_cert(), X509_STORE_add_crl(), X509_STORE_set_depth(), X509_STORE_set_flags(), X509_STORE_set_purpose(), X509_STORE_set_trust(), X509_STORE_load_file_ex(), X509_STORE_load_file(), X509_STORE_load_path(), X509_STORE_load_store_ex(), X509_STORE_load_store(), X509_STORE_load_locations_ex(), X509_STORE_load_locations(), X509_STORE_set_default_paths_ex() and X509_STORE_set_default_paths() return 1 on success or 0 on failure.",
    "X509_STORE_set_flags": "X509_STORE_add_cert(), X509_STORE_add_crl(), X509_STORE_set_depth(), X509_STORE_set_flags(), X509_STORE_set_purpose(), X509_STORE_set_trust(), X509_STORE_load_file_ex(), X509_STORE_load_file(), X509_STORE_load_path(), X509_STORE_load_store_ex(), X509_STORE_load_store(), X509_STORE_load_locations_ex(), X509_STORE_load_locations(), X509_STORE_set_default_paths_ex() and X509_STORE_set_default_paths() return 1 on success or 0 on failure.",
    "X509_STORE_set_purpose": "X509_STORE_add_cert(), X509_STORE_add_crl(), X509_STORE_set_depth(), X509_STORE_set_flags(), X509_STORE_set_purpose(), X509_STORE_set_trust(), X509_STORE_load_file_ex(), X509_STORE_load_file(), X509_STORE_load_path(), X509_STORE_load_store_ex(), X509_STORE_load_store(), X509_STORE_load_locations_ex(), X509_STORE_load_locations(), X509_STORE_set_default_paths_ex() and X509_STORE_set_default_paths() return 1 on success or 0 on failure.",
    "X509_STORE_set_trust": "X509_STORE_add_cert(), X509_STORE_add_crl(), X509_STORE_set_depth(), X509_STORE_set_flags(), X509_STORE_set_purpose(), X509_STORE_set_trust(), X509_STORE_load_file_ex(), X509_STORE_load_file(), X509_STORE_load_path(), X509_STORE_load_store_ex(), X509_STORE_load_store(), X509_STORE_load_locations_ex(), X509_STORE_load_locations(), X509_STORE_set_default_paths_ex() and X509_STORE_set_default_paths() return 1 on success or 0 on failure.",
    "X509_STORE_load_file_ex": "X509_STORE_add_cert(), X509_STORE_add_crl(), X509_STORE_set_depth(), X509_STORE_set_flags(), X509_STORE_set_purpose(), X509_STORE_set_trust(), X509_STORE_load_file_ex(), X509_STORE_load_file(), X509_STORE_load_path(), X509_STORE_load_store_ex(), X509_STORE_load_store(), X509_STORE_load_locations_ex(), X509_STORE_load_locations(), X509_STORE_set_default_paths_ex() and X509_STORE_set_default_paths() return 1 on success or 0 on failure.",
    "X509_STORE_load_file": "X509_STORE_add_cert(), X509_STORE_add_crl(), X509_STORE_set_depth(), X509_STORE_set_flags(), X509_STORE_set_purpose(), X509_STORE_set_trust(), X509_STORE_load_file_ex(), X509_STORE_load_file(), X509_STORE_load_path(), X509_STORE_load_store_ex(), X509_STORE_load_store(), X509_STORE_load_locations_ex(), X509_STORE_load_locations(), X509_STORE_set_default_paths_ex() and X509_STORE_set_default_paths() return 1 on success or 0 on failure.",
    "X509_STORE_load_path": "X509_STORE_add_cert(), X509_STORE_add_crl(), X509_STORE_set_depth(), X509_STORE_set_flags(), X509_STORE_set_purpose(), X509_STORE_set_trust(), X509_STORE_load_file_ex(), X509_STORE_load_file(), X509_STORE_load_path(), X509_STORE_load_store_ex(), X509_STORE_load_store(), X509_STORE_load_locations_ex(), X509_STORE_load_locations(), X509_STORE_set_default_paths_ex() and X509_STORE_set_default_paths() return 1 on success or 0 on failure.",
    "X509_STORE_load_store_ex": "X509_STORE_add_cert(), X509_STORE_add_crl(), X509_STORE_set_depth(), X509_STORE_set_flags(), X509_STORE_set_purpose(), X509_STORE_set_trust(), X509_STORE_load_file_ex(), X509_STORE_load_file(), X509_STORE_load_path(), X509_STORE_load_store_ex(), X509_STORE_load_store(), X509_STORE_load_locations_ex(), X509_STORE_load_locations(), X509_STORE_set_default_paths_ex() and X509_STORE_set_default_paths() return 1 on success or 0 on failure.",
    "X509_STORE_load_store": "X509_STORE_add_cert(), X509_STORE_add_crl(), X509_STORE_set_depth(), X509_STORE_set_flags(), X509_STORE_set_purpose(), X509_STORE_set_trust(), X509_STORE_load_file_ex(), X509_STORE_load_file(), X509_STORE_load_path(), X509_STORE_load_store_ex(), X509_STORE_load_store(), X509_STORE_load_locations_ex(), X509_STORE_load_locations(), X509_STORE_set_default_paths_ex() and X509_STORE_set_default_paths() return 1 on success or 0 on failure.",
    "X509_STORE_load_locations_ex": "X509_STORE_add_cert(), X509_STORE_add_crl(), X509_STORE_set_depth(), X509_STORE_set_flags(), X509_STORE_set_purpose(), X509_STORE_set_trust(), X509_STORE_load_file_ex(), X509_STORE_load_file(), X509_STORE_load_path(), X509_STORE_load_store_ex(), X509_STORE_load_store(), X509_STORE_load_locations_ex(), X509_STORE_load_locations(), X509_STORE_set_default_paths_ex() and X509_STORE_set_default_paths() return 1 on success or 0 on failure.",
    "X509_STORE_load_locations": "X509_STORE_add_cert(), X509_STORE_add_crl(), X509_STORE_set_depth(), X509_STORE_set_flags(), X509_STORE_set_purpose(), X509_STORE_set_trust(), X509_STORE_load_file_ex(), X509_STORE_load_file(), X509_STORE_load_path(), X509_STORE_load_store_ex(), X509_STORE_load_store(), X509_STORE_load_locations_ex(), X509_STORE_load_locations(), X509_STORE_set_default_paths_ex() and X509_STORE_set_default_paths() return 1 on success or 0 on failure.",
    "X509_STORE_set_default_paths_ex": "X509_STORE_add_cert(), X509_STORE_add_crl(), X509_STORE_set_depth(), X509_STORE_set_flags(), X509_STORE_set_purpose(), X509_STORE_set_trust(), X509_STORE_load_file_ex(), X509_STORE_load_file(), X509_STORE_load_path(), X509_STORE_load_store_ex(), X509_STORE_load_store(), X509_STORE_load_locations_ex(), X509_STORE_load_locations(), X509_STORE_set_default_paths_ex() and X509_STORE_set_default_paths() return 1 on success or 0 on failure.",
    "X509_STORE_set_default_paths": "X509_STORE_add_cert(), X509_STORE_add_crl(), X509_STORE_set_depth(), X509_STORE_set_flags(), X509_STORE_set_purpose(), X509_STORE_set_trust(), X509_STORE_load_file_ex(), X509_STORE_load_file(), X509_STORE_load_path(), X509_STORE_load_store_ex(), X509_STORE_load_store(), X509_STORE_load_locations_ex(), X509_STORE_load_locations(), X509_STORE_set_default_paths_ex() and X509_STORE_set_default_paths() return 1 on success or 0 on failure.",
    "X509_STORE_add_lookup": "X509_STORE_add_lookup() returns the found or created L<X509_LOOKUP(3)>, or NULL on error.",
    "SSL_CTX_set_tlsext_status_cb": "SSL_CTX_set_tlsext_status_cb(), SSL_CTX_set_tlsext_status_arg(), SSL_CTX_set_tlsext_status_type(), SSL_set_tlsext_status_type() and SSL_set_tlsext_status_ocsp_resp() return 0 on error or 1 on success.",
    "SSL_CTX_set_tlsext_status_arg": "SSL_CTX_set_tlsext_status_cb(), SSL_CTX_set_tlsext_status_arg(), SSL_CTX_set_tlsext_status_type(), SSL_set_tlsext_status_type() and SSL_set_tlsext_status_ocsp_resp() return 0 on error or 1 on success.",
    "SSL_CTX_set_tlsext_status_type": "SSL_CTX_get_tlsext_status_type() returns the value previously set by SSL_CTX_set_tlsext_status_type(), or -1 if not set.",
    "SSL_set_tlsext_status_type": "SSL_get_tlsext_status_type() returns B<TLSEXT_STATUSTYPE_ocsp> on the client side if SSL_set_tlsext_status_type() was previously called, or on the server side if the client requested OCSP stapling. Otherwise -1 is returned.",
    "SSL_set_tlsext_status_ocsp_resp": "SSL_CTX_set_tlsext_status_cb(), SSL_CTX_set_tlsext_status_arg(), SSL_CTX_set_tlsext_status_type(), SSL_set_tlsext_status_type() and SSL_set_tlsext_status_ocsp_resp() return 0 on error or 1 on success.",
    "SSL_CTX_get_tlsext_status_type": "SSL_CTX_get_tlsext_status_type() returns the value previously set by SSL_CTX_set_tlsext_status_type(), or -1 if not set.",
    "SSL_get_tlsext_status_ocsp_resp": "SSL_get_tlsext_status_ocsp_resp() returns the length of the OCSP response data or -1 if there is no OCSP response data.",
    "SSL_get_tlsext_status_type": "SSL_get_tlsext_status_type() returns B<TLSEXT_STATUSTYPE_ocsp> on the client side if SSL_set_tlsext_status_type() was previously called, or on the server side if the client requested OCSP stapling. Otherwise -1 is returned.",
    "ASYNC_get_wait_ctx": "ASYNC_get_wait_ctx() returns a pointer to the B<ASYNC_WAIT_CTX> for the job.",
    "ASYNC_is_capable": "ASYNC_is_capable() returns 1 if the current platform is async capable or 0 otherwise.",
    "BIO_socket": "BIO_socket() returns the socket number on success or B<INVALID_SOCKET> (-1) on error.  When an error has occurred, the OpenSSL error stack will hold the error data and errno has the system error.",
    "BIO_bind": "BIO_bind(), BIO_connect() and BIO_listen() return 1 on success or 0 on error. When an error has occurred, the OpenSSL error stack will hold the error data and errno has the system error.",
    "BIO_connect": "BIO_bind(), BIO_connect() and BIO_listen() return 1 on success or 0 on error. When an error has occurred, the OpenSSL error stack will hold the error data and errno has the system error.",
    "BIO_listen": "BIO_bind(), BIO_connect() and BIO_listen() return 1 on success or 0 on error. When an error has occurred, the OpenSSL error stack will hold the error data and errno has the system error.",
    "BIO_accept_ex": "BIO_accept_ex() returns the accepted socket on success or B<INVALID_SOCKET> (-1) on error.  When an error has occurred, the OpenSSL error stack will hold the error data and errno has the system error.",
    "ERR_remove_state": "ERR_remove_state() and ERR_remove_thread_state() return no value.",
    "ERR_remove_thread_state": "ERR_remove_state() and ERR_remove_thread_state() return no value.",
    "SSL_CTX_config": "SSL_CTX_config() and SSL_config() return 1 for success or 0 if an error occurred.",
    "SSL_config": "SSL_CTX_config() and SSL_config() return 1 for success or 0 if an error occurred.",
    "DSA_SIG_new": "If the allocation fails, DSA_SIG_new() returns B<NULL> and sets an error code that can be obtained by L<ERR_get_error(3)>. Otherwise it returns a pointer to the newly allocated structure.",
    "DSA_SIG_free": "DSA_SIG_free() returns no value.",
    "DSA_SIG_set0": "DSA_SIG_set0() returns 1 on success or 0 on failure.",
    "SSL_CTX_set_timeout": "SSL_CTX_set_timeout() returns the previously set timeout value.",
    "SSL_CTX_get_timeout": "SSL_CTX_get_timeout() returns the currently set timeout value.",
    "SSL_waiting_for_async": "SSL_waiting_for_async() will return 1 if the current SSL operation is waiting for an async operation to complete and 0 otherwise.",
    "SSL_get_all_async_fds": "SSL_get_all_async_fds() and SSL_get_changed_async_fds() return 1 on success or 0 on error.",
    "SSL_get_changed_async_fds": "SSL_get_all_async_fds() and SSL_get_changed_async_fds() return 1 on success or 0 on error.",
    "BIO_f_cipher": "BIO_f_cipher() returns the cipher BIO method.",
    "BIO_set_cipher": "BIO_set_cipher() does not return a value.",
    "BIO_get_cipher_status": "BIO_get_cipher_status() returns 1 for a successful decrypt and 0 for failure.",
    "BIO_get_cipher_ctx": "BIO_get_cipher_ctx() currently always returns 1.",
    "EVP_MAC_fetch": "EVP_MAC_fetch() returns a pointer to a newly fetched B<EVP_MAC>, or NULL if allocation failed.",
    "EVP_MAC_up_ref": "EVP_MAC_up_ref() returns 1 on success, 0 on error.",
    "EVP_MAC_names_do_all": "EVP_MAC_names_do_all() returns 1 if the callback was called for all names. A return value of 0 means that the callback was not called for any names.",
    "EVP_MAC_free": "EVP_MAC_free() returns nothing at all.",
    "EVP_MAC_is_a": "EVP_MAC_is_a() returns 1 if the given method can be identified with the given name, otherwise 0.",
    "EVP_MAC_get0_name": "EVP_MAC_get0_name() returns a name of the MAC, or NULL on error.",
    "EVP_MAC_get0_provider": "EVP_MAC_get0_provider() returns a pointer to the provider for the MAC, or NULL on error.",
    "EVP_MAC_CTX_new": "EVP_MAC_CTX_new() and EVP_MAC_CTX_dup() return a pointer to a newly created EVP_MAC_CTX, or NULL if allocation failed.",
    "EVP_MAC_CTX_dup": "EVP_MAC_CTX_new() and EVP_MAC_CTX_dup() return a pointer to a newly created EVP_MAC_CTX, or NULL if allocation failed.",
    "EVP_MAC_CTX_free": "EVP_MAC_CTX_free() returns nothing at all.",
    "EVP_MAC_CTX_get_params": "EVP_MAC_CTX_get_params() and EVP_MAC_CTX_set_params() return 1 on success, 0 on error.",
    "EVP_MAC_CTX_set_params": "EVP_MAC_CTX_get_params() and EVP_MAC_CTX_set_params() return 1 on success, 0 on error.",
    "EVP_Q_mac": "EVP_Q_mac() returns a pointer to the computed MAC value, or NULL on error.",
    "EVP_MAC_init": "EVP_MAC_CTX_get_block_size() returns the block size, or 0 if it isn't set. If it isn't set, a call to EVP_MAC_init() will set it.",
    "EVP_MAC_update": "EVP_MAC_init(), EVP_MAC_update(), EVP_MAC_final(), and EVP_MAC_finalXOF() return 1 on success, 0 on error.",
    "EVP_MAC_final": "EVP_MAC_init(), EVP_MAC_update(), EVP_MAC_final(), and EVP_MAC_finalXOF() return 1 on success, 0 on error.",
    "EVP_MAC_finalXOF": "EVP_MAC_init(), EVP_MAC_update(), EVP_MAC_final(), and EVP_MAC_finalXOF() return 1 on success, 0 on error.",
    "EVP_MAC_CTX_get_mac_size": "EVP_MAC_CTX_get_mac_size() returns the expected output size, or 0 if it isn't set.  If it isn't set, a call to EVP_MAC_init() will set it.",
    "EVP_MAC_CTX_get_block_size": "EVP_MAC_CTX_get_block_size() returns the block size, or 0 if it isn't set. If it isn't set, a call to EVP_MAC_init() will set it.",
    "EVP_MAC_do_all_provided": "EVP_MAC_do_all_provided() returns nothing at all.",
    "BIO_snprintf": "All functions return the number of bytes written, or -1 on error. For BIO_snprintf() and BIO_vsnprintf() this includes when the output buffer is too small.",
    "BIO_vsnprintf": "All functions return the number of bytes written, or -1 on error. For BIO_snprintf() and BIO_vsnprintf() this includes when the output buffer is too small.",
    "SSL_CTX_set_cert_store": "SSL_CTX_set_cert_store() does not return diagnostic output.",
    "SSL_CTX_set1_cert_store": "SSL_CTX_set1_cert_store() does not return diagnostic output.",
    "SSL_CTX_get_cert_store": "SSL_CTX_get_cert_store() returns the current setting.",
    "PKCS8_pkey_add1_attr": "PKCS8_pkey_add1_attr(), PKCS8_pkey_add1_attr_by_NID(), and PKCS8_pkey_add1_attr_by_OBJ() return 1 for success and 0 for failure.",
    "PKCS8_pkey_add1_attr_by_NID": "PKCS8_pkey_add1_attr(), PKCS8_pkey_add1_attr_by_NID(), and PKCS8_pkey_add1_attr_by_OBJ() return 1 for success and 0 for failure.",
    "PKCS8_pkey_add1_attr_by_OBJ": "PKCS8_pkey_add1_attr(), PKCS8_pkey_add1_attr_by_NID(), and PKCS8_pkey_add1_attr_by_OBJ() return 1 for success and 0 for failure.",
    "OSSL_PARAM_dup": "The functions OSSL_PARAM_dup() and OSSL_PARAM_merge() return a newly allocated B<OSSL_PARAM> array, or NULL if there was an error. If both parameters are NULL  then NULL is returned.",
    "OSSL_PARAM_merge": "The functions OSSL_PARAM_dup() and OSSL_PARAM_merge() return a newly allocated B<OSSL_PARAM> array, or NULL if there was an error. If both parameters are NULL  then NULL is returned.",
    "SMIME_read_PKCS7_ex": "SMIME_read_PKCS7_ex() and SMIME_read_PKCS7() return a valid B<PKCS7> structure or B<NULL> if an error occurred. The error can be obtained from ERR_get_error(3).",
    "SMIME_read_PKCS7": "SMIME_read_PKCS7_ex() and SMIME_read_PKCS7() return a valid B<PKCS7> structure or B<NULL> if an error occurred. The error can be obtained from ERR_get_error(3).",
    "OSSL_PROVIDER_add": "OSSL_PROVIDER_add(), OSSL_PROVIDER_unload(), OSSL_PROVIDER_get_params() and OSSL_PROVIDER_get_capabilities() return 1 on success, or 0 on error.",
    "OSSL_PROVIDER_unload": "OSSL_PROVIDER_add(), OSSL_PROVIDER_unload(), OSSL_PROVIDER_get_params() and OSSL_PROVIDER_get_capabilities() return 1 on success, or 0 on error.",
    "OSSL_PROVIDER_get_params": "OSSL_PROVIDER_get_params() and returns 1 on success, or 0 on error.",
    "OSSL_PROVIDER_get_capabilities": "OSSL_PROVIDER_add(), OSSL_PROVIDER_unload(), OSSL_PROVIDER_get_params() and OSSL_PROVIDER_get_capabilities() return 1 on success, or 0 on error.",
    "OSSL_PROVIDER_load": "OSSL_PROVIDER_load() and OSSL_PROVIDER_try_load() return a pointer to a provider object on success, or NULL on error.",
    "OSSL_PROVIDER_try_load": "OSSL_PROVIDER_load() and OSSL_PROVIDER_try_load() return a pointer to a provider object on success, or NULL on error.",
    "OSSL_PROVIDER_do_all": "OSSL_PROVIDER_do_all() returns 1 if the callback I<cb> returns 1 for every provider it is called with, or 0 if any provider callback invocation returns 0; callback processing stops at the first callback invocation on a provider that returns 0.",
    "OSSL_PROVIDER_available": "OSSL_PROVIDER_available() returns 1 if the named provider is available, otherwise 0.",
    "OSSL_PROVIDER_gettable_params": "OSSL_PROVIDER_gettable_params() returns a pointer to an array of constant B<OSSL_PARAM>, or NULL if none is provided.",
    "OSSL_PROVIDER_query_operation": "OSSL_PROVIDER_query_operation() returns an array of OSSL_ALGORITHM or NULL on error.",
    "OSSL_PROVIDER_self_test": "OSSL_PROVIDER_self_test() returns 1 if the self tests pass, or 0 on error.",
    "ERR_set_mark": "ERR_set_mark() returns 0 if the error stack is empty, otherwise 1.",
    "ERR_clear_last_mark": "ERR_clear_last_mark() and ERR_pop_to_mark() return 0 if there was no mark in the error stack, which implies that the stack became empty, otherwise 1.",
    "ERR_pop_to_mark": "ERR_clear_last_mark() and ERR_pop_to_mark() return 0 if there was no mark in the error stack, which implies that the stack became empty, otherwise 1.",
    "EC_GROUP_copy": "The following functions return 1 on success or 0 on error: EC_GROUP_copy(), EC_GROUP_set_generator(), EC_GROUP_check(), EC_GROUP_check_discriminant(), EC_GROUP_get_trinomial_basis() and EC_GROUP_get_pentanomial_basis().",
    "EC_GROUP_set_generator": "The following functions return 1 on success or 0 on error: EC_GROUP_copy(), EC_GROUP_set_generator(), EC_GROUP_check(), EC_GROUP_check_discriminant(), EC_GROUP_get_trinomial_basis() and EC_GROUP_get_pentanomial_basis().",
    "EC_GROUP_check": "The following functions return 1 on success or 0 on error: EC_GROUP_copy(), EC_GROUP_set_generator(), EC_GROUP_check(), EC_GROUP_check_discriminant(), EC_GROUP_get_trinomial_basis() and EC_GROUP_get_pentanomial_basis().",
    "EC_GROUP_check_discriminant": "The following functions return 1 on success or 0 on error: EC_GROUP_copy(), EC_GROUP_set_generator(), EC_GROUP_check(), EC_GROUP_check_discriminant(), EC_GROUP_get_trinomial_basis() and EC_GROUP_get_pentanomial_basis().",
    "EC_GROUP_get_trinomial_basis": "The following functions return 1 on success or 0 on error: EC_GROUP_copy(), EC_GROUP_set_generator(), EC_GROUP_check(), EC_GROUP_check_discriminant(), EC_GROUP_get_trinomial_basis() and EC_GROUP_get_pentanomial_basis().",
    "EC_GROUP_get_pentanomial_basis": "The following functions return 1 on success or 0 on error: EC_GROUP_copy(), EC_GROUP_set_generator(), EC_GROUP_check(), EC_GROUP_check_discriminant(), EC_GROUP_get_trinomial_basis() and EC_GROUP_get_pentanomial_basis().",
    "EC_GROUP_dup": "EC_GROUP_dup() returns a pointer to the duplicated curve, or NULL on error.",
    "EC_GROUP_method_of": "EC_GROUP_method_of() returns the EC_METHOD implementation in use for the given curve or NULL on error.",
    "EC_GROUP_get0_generator": "EC_GROUP_get0_generator() returns the generator for the given curve or NULL on error.",
    "EC_GROUP_get_order": "EC_GROUP_get_order() returns 0 if the order is not set (or set to zero) for B<group> or if copying into B<order> fails, 1 otherwise.",
    "EC_GROUP_get_cofactor": "EC_GROUP_get_cofactor() returns 0 if the cofactor is not set (or is set to zero) for B<group> or if copying into B<cofactor> fails, 1 otherwise.",
    "EC_GROUP_get_curve_name": "EC_GROUP_get_curve_name() returns the curve name (NID) for B<group> or will return NID_undef if no curve name is associated.",
    "EC_GROUP_get_asn1_flag": "EC_GROUP_get_asn1_flag() returns the ASN1 flag for the specified B<group> .",
    "EC_GROUP_get_point_conversion_form": "EC_GROUP_get_point_conversion_form() returns the point_conversion_form for B<group>.",
    "EC_GROUP_get_degree": "EC_GROUP_get_degree() returns the degree for B<group> or 0 if the operation is not supported by the underlying group implementation.",
    "EC_GROUP_get_field_type": "EC_GROUP_get_field_type() returns either B<NID_X9_62_prime_field> for prime curves or B<NID_X9_62_characteristic_two_field> for binary curves; these values are defined in the F<< <openssl/obj_mac.h> >> header file.",
    "EC_GROUP_check_named_curve": "EC_GROUP_check_named_curve() returns the nid of the matching named curve, otherwise it returns 0 for no match, or -1 on error.",
    "EC_GROUP_get0_order": "EC_GROUP_get0_order() returns an internal pointer to the group order. EC_GROUP_order_bits() returns the number of bits in the group order. EC_GROUP_get0_cofactor() returns an internal pointer to the group cofactor. EC_GROUP_get0_field() returns an internal pointer to the group field. For curves over GF(p), this is the modulus; for curves over GF(2^m), this is the irreducible polynomial defining the field.",
    "EC_GROUP_order_bits": "EC_GROUP_get0_order() returns an internal pointer to the group order. EC_GROUP_order_bits() returns the number of bits in the group order. EC_GROUP_get0_cofactor() returns an internal pointer to the group cofactor. EC_GROUP_get0_field() returns an internal pointer to the group field. For curves over GF(p), this is the modulus; for curves over GF(2^m), this is the irreducible polynomial defining the field.",
    "EC_GROUP_get0_cofactor": "EC_GROUP_get0_order() returns an internal pointer to the group order. EC_GROUP_order_bits() returns the number of bits in the group order. EC_GROUP_get0_cofactor() returns an internal pointer to the group cofactor. EC_GROUP_get0_field() returns an internal pointer to the group field. For curves over GF(p), this is the modulus; for curves over GF(2^m), this is the irreducible polynomial defining the field.",
    "EC_GROUP_get0_field": "EC_GROUP_get0_order() returns an internal pointer to the group order. EC_GROUP_order_bits() returns the number of bits in the group order. EC_GROUP_get0_cofactor() returns an internal pointer to the group cofactor. EC_GROUP_get0_field() returns an internal pointer to the group field. For curves over GF(p), this is the modulus; for curves over GF(2^m), this is the irreducible polynomial defining the field.",
    "EC_GROUP_get0_seed": "EC_GROUP_get0_seed() returns a pointer to the seed that was used to generate the parameter b, or NULL if the seed is not specified. EC_GROUP_get_seed_len() returns the length of the seed or 0 if the seed is not specified.",
    "EC_GROUP_get_seed_len": "EC_GROUP_get0_seed() returns a pointer to the seed that was used to generate the parameter b, or NULL if the seed is not specified. EC_GROUP_get_seed_len() returns the length of the seed or 0 if the seed is not specified.",
    "EC_GROUP_set_seed": "EC_GROUP_set_seed() returns the length of the seed that has been set. If the supplied seed is NULL, or the supplied seed length is 0, the return value will be 1. On error 0 is returned.",
    "EC_GROUP_cmp": "EC_GROUP_cmp() returns 0 if the curves are equal, 1 if they are not equal, or -1 on error.",
    "EC_GROUP_get_basis_type": "EC_GROUP_get_basis_type() returns the values NID_X9_62_tpBasis or NID_X9_62_ppBasis (as defined in F<< <openssl/obj_mac.h> >>) for a trinomial or pentanomial respectively. Alternatively in the event of an error a 0 is returned.",
    "ERR_load_strings": "ERR_load_strings() returns no value. ERR_PACK() return the error code. ERR_get_next_error_library() returns zero on failure, otherwise a new library number.",
    "ERR_PACK": "ERR_load_strings() returns no value. ERR_PACK() return the error code. ERR_get_next_error_library() returns zero on failure, otherwise a new library number.",
    "ERR_get_next_error_library": "ERR_load_strings() returns no value. ERR_PACK() return the error code. ERR_get_next_error_library() returns zero on failure, otherwise a new library number.",
    "BN_CTX_start": "BN_CTX_start() and BN_CTX_end() return no values.",
    "BN_CTX_end": "BN_CTX_start() and BN_CTX_end() return no values.",
    "BN_CTX_get": "BN_CTX_get() returns a pointer to the B<BIGNUM>, or B<NULL> on error. Once BN_CTX_get() has failed, the subsequent calls will return B<NULL> as well, so it is sufficient to check the return value of the last BN_CTX_get() call. In case of an error, an error code is set, which can be obtained by L<ERR_get_error(3)>.",
    "SSL_SESSION_get_time": "SSL_SESSION_get_time() and SSL_SESSION_get_timeout() return the currently valid values.",
    "SSL_SESSION_get_timeout": "SSL_SESSION_get_time() and SSL_SESSION_get_timeout() return the currently valid values.",
    "SSL_SESSION_set_time": "SSL_SESSION_set_time() and SSL_SESSION_set_timeout() return 1 on success.",
    "SSL_SESSION_set_timeout": "SSL_SESSION_set_time() and SSL_SESSION_set_timeout() return 1 on success.",
    "RSA_meth_new": "RSA_meth_new() and RSA_meth_dup() return the newly allocated RSA_METHOD object or NULL on failure.",
    "RSA_meth_dup": "RSA_meth_new() and RSA_meth_dup() return the newly allocated RSA_METHOD object or NULL on failure.",
    "RSA_meth_get0_name": "RSA_meth_get0_name() and RSA_meth_get_flags() return the name and flags associated with the RSA_METHOD respectively.",
    "RSA_meth_get_flags": "RSA_meth_get0_name() and RSA_meth_get_flags() return the name and flags associated with the RSA_METHOD respectively.",
    "SSL_SESSION_get0_cipher": "SSL_SESSION_get0_cipher() returns the SSL_CIPHER associated with the SSL_SESSION or NULL if it cannot be determined.",
    "SSL_SESSION_set_cipher": "SSL_SESSION_set_cipher() returns 1 on success or 0 on failure.",
    "OSSL_STORE_open": "The functions with the types B<OSSL_STORE_open_fn>, B<OSSL_STORE_open_ex_fn>, B<OSSL_STORE_ctrl_fn>, B<OSSL_STORE_expect_fn>, B<OSSL_STORE_load_fn>, B<OSSL_STORE_eof_fn> and B<OSSL_STORE_close_fn> have the same return values as OSSL_STORE_open(), OSSL_STORE_open_ex(), OSSL_STORE_ctrl(), OSSL_STORE_expect(), OSSL_STORE_load(), OSSL_STORE_eof() and OSSL_STORE_close(), respectively.",
    "OSSL_STORE_load": "The functions with the types B<OSSL_STORE_open_fn>, B<OSSL_STORE_open_ex_fn>, B<OSSL_STORE_ctrl_fn>, B<OSSL_STORE_expect_fn>, B<OSSL_STORE_load_fn>, B<OSSL_STORE_eof_fn> and B<OSSL_STORE_close_fn> have the same return values as OSSL_STORE_open(), OSSL_STORE_open_ex(), OSSL_STORE_ctrl(), OSSL_STORE_expect(), OSSL_STORE_load(), OSSL_STORE_eof() and OSSL_STORE_close(), respectively.",
    "OSSL_STORE_error": "OSSL_STORE_error() returns 1 if an error occurred in an OSSL_STORE_load() call, otherwise 0.",
    "OSSL_STORE_eof": "The functions with the types B<OSSL_STORE_open_fn>, B<OSSL_STORE_open_ex_fn>, B<OSSL_STORE_ctrl_fn>, B<OSSL_STORE_expect_fn>, B<OSSL_STORE_load_fn>, B<OSSL_STORE_eof_fn> and B<OSSL_STORE_close_fn> have the same return values as OSSL_STORE_open(), OSSL_STORE_open_ex(), OSSL_STORE_ctrl(), OSSL_STORE_expect(), OSSL_STORE_load(), OSSL_STORE_eof() and OSSL_STORE_close(), respectively.",
    "OSSL_STORE_ctrl": "The functions with the types B<OSSL_STORE_open_fn>, B<OSSL_STORE_open_ex_fn>, B<OSSL_STORE_ctrl_fn>, B<OSSL_STORE_expect_fn>, B<OSSL_STORE_load_fn>, B<OSSL_STORE_eof_fn> and B<OSSL_STORE_close_fn> have the same return values as OSSL_STORE_open(), OSSL_STORE_open_ex(), OSSL_STORE_ctrl(), OSSL_STORE_expect(), OSSL_STORE_load(), OSSL_STORE_eof() and OSSL_STORE_close(), respectively.",
    "OSSL_STORE_close": "The functions with the types B<OSSL_STORE_open_fn>, B<OSSL_STORE_open_ex_fn>, B<OSSL_STORE_ctrl_fn>, B<OSSL_STORE_expect_fn>, B<OSSL_STORE_load_fn>, B<OSSL_STORE_eof_fn> and B<OSSL_STORE_close_fn> have the same return values as OSSL_STORE_open(), OSSL_STORE_open_ex(), OSSL_STORE_ctrl(), OSSL_STORE_expect(), OSSL_STORE_load(), OSSL_STORE_eof() and OSSL_STORE_close(), respectively.",
    "BN_CTX_new": "BN_CTX_new() and BN_CTX_secure_new() return a pointer to the B<BN_CTX>. If the allocation fails, they return B<NULL> and sets an error code that can be obtained by L<ERR_get_error(3)>.",
    "BN_CTX_secure_new": "BN_CTX_new() and BN_CTX_secure_new() return a pointer to the B<BN_CTX>. If the allocation fails, they return B<NULL> and sets an error code that can be obtained by L<ERR_get_error(3)>.",
    "BN_CTX_free": "BN_CTX_free() has no return values.",
    "BIO_should_read": "BIO_should_read(), BIO_should_write(), BIO_should_io_special(), and BIO_should_retry() return either 1 or 0 based on the actual conditions of the B<BIO>.",
    "BIO_should_write": "BIO_should_read(), BIO_should_write(), BIO_should_io_special(), and BIO_should_retry() return either 1 or 0 based on the actual conditions of the B<BIO>.",
    "BIO_should_io_special": "BIO_should_read(), BIO_should_write(), BIO_should_io_special(), and BIO_should_retry() return either 1 or 0 based on the actual conditions of the B<BIO>.",
    "BIO_should_retry": "BIO_should_read(), BIO_should_write(), BIO_should_io_special(), and BIO_should_retry() return either 1 or 0 based on the actual conditions of the B<BIO>.",
    "BIO_retry_type": "BIO_retry_type() returns a flag combination presenting the cause of a retry condition or false if there is no retry condition.",
    "BIO_get_retry_BIO": "BIO_get_retry_BIO() returns a valid B<BIO> structure.",
    "BIO_get_retry_reason": "BIO_get_retry_reason() returns the reason for a special condition.",
    "HMAC": "HMAC() returns a pointer to the message authentication code or NULL if an error occurred.",
    "HMAC_CTX_new": "HMAC_CTX_new() returns a pointer to a new B<HMAC_CTX> on success or NULL if an error occurred.",
    "HMAC_CTX_reset": "HMAC_CTX_reset(), HMAC_Init_ex(), HMAC_Update(), HMAC_Final() and HMAC_CTX_copy() return 1 for success or 0 if an error occurred.",
    "HMAC_Init_ex": "HMAC_CTX_reset(), HMAC_Init_ex(), HMAC_Update(), HMAC_Final() and HMAC_CTX_copy() return 1 for success or 0 if an error occurred.",
    "HMAC_Update": "HMAC_CTX_reset(), HMAC_Init_ex(), HMAC_Update(), HMAC_Final() and HMAC_CTX_copy() return 1 for success or 0 if an error occurred.",
    "HMAC_Final": "HMAC_CTX_reset(), HMAC_Init_ex(), HMAC_Update(), HMAC_Final() and HMAC_CTX_copy() return 1 for success or 0 if an error occurred.",
    "HMAC_CTX_copy": "HMAC_CTX_reset(), HMAC_Init_ex(), HMAC_Update(), HMAC_Final() and HMAC_CTX_copy() return 1 for success or 0 if an error occurred.",
    "HMAC_CTX_get_md": "HMAC_CTX_get_md() return the EVP_MD previously set for the supplied HMAC_CTX or NULL if no EVP_MD has been set.",
    "HMAC_size": "HMAC_size() returns the length in bytes of the underlying hash function output or zero on error.",
    "X509_get_pubkey": "X509_get_pubkey(), X509_get0_pubkey(), X509_get_X509_PUBKEY(), X509_REQ_get_pubkey() and X509_REQ_get_X509_PUBKEY() return a public key or B<NULL> if an error occurred.",
    "X509_get0_pubkey": "X509_get_pubkey(), X509_get0_pubkey(), X509_get_X509_PUBKEY(), X509_REQ_get_pubkey() and X509_REQ_get_X509_PUBKEY() return a public key or B<NULL> if an error occurred.",
    "X509_get_X509_PUBKEY": "X509_get_pubkey(), X509_get0_pubkey(), X509_get_X509_PUBKEY(), X509_REQ_get_pubkey() and X509_REQ_get_X509_PUBKEY() return a public key or B<NULL> if an error occurred.",
    "X509_REQ_get_pubkey": "X509_get_pubkey(), X509_get0_pubkey(), X509_get_X509_PUBKEY(), X509_REQ_get_pubkey() and X509_REQ_get_X509_PUBKEY() return a public key or B<NULL> if an error occurred.",
    "X509_REQ_get_X509_PUBKEY": "X509_get_pubkey(), X509_get0_pubkey(), X509_get_X509_PUBKEY(), X509_REQ_get_pubkey() and X509_REQ_get_X509_PUBKEY() return a public key or B<NULL> if an error occurred.",
    "X509_set_pubkey": "X509_set_pubkey() and X509_REQ_set_pubkey() return 1 for success and 0 for failure.",
    "X509_REQ_set_pubkey": "X509_set_pubkey() and X509_REQ_set_pubkey() return 1 for success and 0 for failure.",
    "X509_verify": "X509_verify(), X509_REQ_verify_ex(), X509_REQ_verify() and X509_CRL_verify() return 1 if the signature is valid and 0 if the signature check fails. If the signature could not be checked at all because it was ill-formed, the certificate or the request was not complete or some other error occurred then -1 is returned.",
    "X509_REQ_verify_ex": "X509_verify(), X509_REQ_verify_ex(), X509_REQ_verify() and X509_CRL_verify() return 1 if the signature is valid and 0 if the signature check fails. If the signature could not be checked at all because it was ill-formed, the certificate or the request was not complete or some other error occurred then -1 is returned.",
    "X509_REQ_verify": "X509_verify(), X509_REQ_verify_ex(), X509_REQ_verify() and X509_CRL_verify() return 1 if the signature is valid and 0 if the signature check fails. If the signature could not be checked at all because it was ill-formed, the certificate or the request was not complete or some other error occurred then -1 is returned.",
    "X509_CRL_verify": "X509_verify(), X509_REQ_verify_ex(), X509_REQ_verify() and X509_CRL_verify() return 1 if the signature is valid and 0 if the signature check fails. If the signature could not be checked at all because it was ill-formed, the certificate or the request was not complete or some other error occurred then -1 is returned.",
    "X509_self_signed": "X509_self_signed() returns the same values but also returns 1 if all respective fields match and B<verify_signature> is 0.",
    "EVP_PKEY_meth_count": "EVP_PKEY_meth_count() returns the number of available public key methods.",
    "EVP_PKEY_meth_get0": "EVP_PKEY_meth_get0() return a public key method or B<NULL> if B<idx> is out of range.",
    "EVP_PKEY_meth_get0_info": "EVP_PKEY_meth_get0_info() does not return a value.",
    "SSL_set_current_cert": "SSL_set_current_cert() with B<SSL_CERT_SET_SERVER> return 1 for success, 2 if no server certificate is used because the cipher suites is anonymous and 0 for failure.",
    "SSL_CTX_build_cert_chain": "SSL_CTX_build_cert_chain() and SSL_build_cert_chain() return 1 for success and 0 for failure. If the flag B<SSL_BUILD_CHAIN_FLAG_IGNORE_ERROR> and a verification error occurs then 2 is returned.",
    "SSL_build_cert_chain": "SSL_CTX_build_cert_chain() and SSL_build_cert_chain() return 1 for success and 0 for failure. If the flag B<SSL_BUILD_CHAIN_FLAG_IGNORE_ERROR> and a verification error occurs then 2 is returned.",
    "OSSL_CMP_validate_msg": "OSSL_CMP_validate_msg() and OSSL_CMP_validate_cert_path() return 1 on success, 0 on error or validation failed.",
    "OSSL_CMP_validate_cert_path": "OSSL_CMP_validate_msg() and OSSL_CMP_validate_cert_path() return 1 on success, 0 on error or validation failed.",
    "BIO_f_base64": "BIO_f_base64() returns the base64 BIO method.",
    "RC4_set_key": "RC4_set_key() and RC4() do not return values.",
    "RC4": "RC4_set_key() and RC4() do not return values.",
    "X509_LOOKUP_hash_dir": "X509_LOOKUP_hash_dir(), X509_LOOKUP_file() and X509_LOOKUP_store() always return a valid B<X509_LOOKUP_METHOD> structure.",
    "X509_LOOKUP_file": "X509_LOOKUP_hash_dir(), X509_LOOKUP_file() and X509_LOOKUP_store() always return a valid B<X509_LOOKUP_METHOD> structure.",
    "X509_LOOKUP_store": "X509_LOOKUP_hash_dir(), X509_LOOKUP_file() and X509_LOOKUP_store() always return a valid B<X509_LOOKUP_METHOD> structure.",
    "X509_load_cert_file": "X509_load_cert_file(), X509_load_crl_file() and X509_load_cert_crl_file() return the number of loaded objects or 0 on error.",
    "X509_load_crl_file": "X509_load_cert_file(), X509_load_crl_file() and X509_load_cert_crl_file() return the number of loaded objects or 0 on error.",
    "X509_load_cert_crl_file": "X509_load_cert_file(), X509_load_crl_file() and X509_load_cert_crl_file() return the number of loaded objects or 0 on error.",
    "OPENSSL_buf2hexstr": "OPENSSL_buf2hexstr() and OPENSSL_hexstr2buf() return a pointer to allocated memory, or NULL on error.",
    "OPENSSL_hexstr2buf": "OPENSSL_buf2hexstr() and OPENSSL_hexstr2buf() return a pointer to allocated memory, or NULL on error.",
    "OPENSSL_buf2hexstr_ex": "OPENSSL_buf2hexstr_ex() and OPENSSL_hexstr2buf_ex() return 1 on success, or 0 on error.",
    "OPENSSL_hexstr2buf_ex": "OPENSSL_buf2hexstr_ex() and OPENSSL_hexstr2buf_ex() return 1 on success, or 0 on error.",
    "X509_STORE_CTX_new": "X509_STORE_CTX_new() returns a newly allocated context or NULL if an error occurred.",
    "X509_STORE_CTX_init": "X509_STORE_CTX_init() returns 1 for success or 0 if an error occurred.",
    "X509_STORE_CTX_get0_param": "X509_STORE_CTX_get0_param() returns a pointer to an B<X509_VERIFY_PARAM> structure or NULL if an error occurred.",
    "X509_STORE_CTX_cleanup": "X509_STORE_CTX_cleanup(), X509_STORE_CTX_free(), X509_STORE_CTX_set0_trusted_stack(), X509_STORE_CTX_set_cert(), X509_STORE_CTX_set0_crls() and X509_STORE_CTX_set0_param() do not return values.",
    "X509_STORE_CTX_free": "X509_STORE_CTX_cleanup(), X509_STORE_CTX_free(), X509_STORE_CTX_set0_trusted_stack(), X509_STORE_CTX_set_cert(), X509_STORE_CTX_set0_crls() and X509_STORE_CTX_set0_param() do not return values.",
    "X509_STORE_CTX_set0_trusted_stack": "X509_STORE_CTX_cleanup(), X509_STORE_CTX_free(), X509_STORE_CTX_set0_trusted_stack(), X509_STORE_CTX_set_cert(), X509_STORE_CTX_set0_crls() and X509_STORE_CTX_set0_param() do not return values.",
    "X509_STORE_CTX_set_cert": "X509_STORE_CTX_cleanup(), X509_STORE_CTX_free(), X509_STORE_CTX_set0_trusted_stack(), X509_STORE_CTX_set_cert(), X509_STORE_CTX_set0_crls() and X509_STORE_CTX_set0_param() do not return values.",
    "X509_STORE_CTX_set0_crls": "X509_STORE_CTX_cleanup(), X509_STORE_CTX_free(), X509_STORE_CTX_set0_trusted_stack(), X509_STORE_CTX_set_cert(), X509_STORE_CTX_set0_crls() and X509_STORE_CTX_set0_param() do not return values.",
    "X509_STORE_CTX_set0_param": "X509_STORE_CTX_cleanup(), X509_STORE_CTX_free(), X509_STORE_CTX_set0_trusted_stack(), X509_STORE_CTX_set_cert(), X509_STORE_CTX_set0_crls() and X509_STORE_CTX_set0_param() do not return values.",
    "X509_STORE_CTX_set_default": "X509_STORE_CTX_set_default() returns 1 for success or 0 if an error occurred.",
    "X509_STORE_CTX_get_num_untrusted": "X509_STORE_CTX_get_num_untrusted() returns the number of untrusted certificates used.",
    "SSL_CONF_CTX_new": "SSL_CONF_CTX_new() returns either the newly allocated B<SSL_CONF_CTX> structure or B<NULL> if an error occurs.",
    "SSL_CONF_CTX_free": "SSL_CONF_CTX_free() does not return a value.",
    "SCT_set_version": "SCT_set_version() returns 1 if the specified version is supported, 0 otherwise.",
    "SCT_set_log_entry_type": "SCT_set_log_entry_type() returns 1 if the specified log entry type is supported, 0 otherwise.",
    "SCT_set0_log_id": "SCT_set0_log_id() and B<SCT_set1_log_id> return 1 if the specified LogID is a valid SHA-256 hash, 0 otherwise. Additionally, B<SCT_set1_log_id> returns 0 if malloc fails.",
    "SSL_SESSION_get0_hostname": "SSL_SESSION_get0_hostname() returns either a string or NULL based on if there is the SNI value sent by client.",
    "SSL_SESSION_set1_hostname": "SSL_SESSION_set1_hostname() returns 1 on success or 0 on error.",
    "SSL_SESSION_set1_alpn_selected": "SSL_SESSION_set1_alpn_selected() returns 1 on success or 0 on error.",
    "OCSP_request_add1_nonce": "OCSP_request_add1_nonce() and OCSP_basic_add1_nonce() return 1 for success and 0 for failure.",
    "OCSP_basic_add1_nonce": "OCSP_request_add1_nonce() and OCSP_basic_add1_nonce() return 1 for success and 0 for failure.",
    "OCSP_copy_nonce": "OCSP_copy_nonce() returns 1 if a nonce was successfully copied, 2 if no nonce was present in B<req> and 0 if an error occurred.",
    "OCSP_check_nonce": "OCSP_check_nonce() returns the result of the nonce comparison between B<req> and B<resp>. The return value indicates the result of the comparison.  If nonces are present and equal 1 is returned. If the nonces are absent 2 is returned. If a nonce is present in the response only 3 is returned. If nonces are present and unequal 0 is returned. If the nonce is present in the request only then -1 is returned.",
    "X509_check_private_key": "X509_check_private_key() and X509_REQ_check_private_key() return 1 if the keys match each other, and 0 if not.",
    "X509_REQ_check_private_key": "X509_check_private_key() and X509_REQ_check_private_key() return 1 if the keys match each other, and 0 if not.",
    "SSL_pending": "SSL_pending() returns the number of buffered and processed application data bytes that are pending and are available for immediate read. SSL_has_pending() returns 1 if there is buffered record data in the SSL object and 0 otherwise.",
    "SSL_has_pending": "SSL_pending() returns the number of buffered and processed application data bytes that are pending and are available for immediate read. SSL_has_pending() returns 1 if there is buffered record data in the SSL object and 0 otherwise.",
    "ASYNC_WAIT_CTX_new": "ASYNC_WAIT_CTX_new() returns a pointer to the newly allocated B<ASYNC_WAIT_CTX> or NULL on error.",
    "ASYNC_WAIT_CTX_get_status": "ASYNC_WAIT_CTX_set_wait_fd, ASYNC_WAIT_CTX_get_fd, ASYNC_WAIT_CTX_get_all_fds, ASYNC_WAIT_CTX_get_changed_fds, ASYNC_WAIT_CTX_clear_fd, ASYNC_WAIT_CTX_set_callback, ASYNC_WAIT_CTX_get_callback and ASYNC_WAIT_CTX_set_status all return 1 on success or 0 on error. ASYNC_WAIT_CTX_get_status() returns the engine status.",
    "DH_new_by_nid": "DH_new_by_nid() returns a set of DH parameters or B<NULL> if an error occurred.",
    "DH_get_nid": "DH_get_nid() returns the NID of the matching set of parameters for p and g and optionally q, otherwise it returns B<NID_undef> if there is no match.",
    "BIO_s_file": "BIO_s_file() returns the file BIO method.",
    "BIO_new_file": "BIO_new_file() and BIO_new_fp() return a file BIO or NULL if an error occurred.",
    "BIO_new_fp": "BIO_new_file() and BIO_new_fp() return a file BIO or NULL if an error occurred.",
    "BIO_set_fp": "BIO_set_fp() and BIO_get_fp() return 1 for success or 0 for failure (although the current implementation never return 0).",
    "BIO_get_fp": "BIO_set_fp() and BIO_get_fp() return 1 for success or 0 for failure (although the current implementation never return 0).",
    "BIO_seek": "BIO_seek() and BIO_tell() both return the current file position on success and -1 for failure, except file BIOs which for BIO_seek() always return 0 for success and -1 for failure.",
    "fseek": "BIO_seek() returns the same value as the underlying fseek() function: 0 for success or -1 for failure.",
    "BIO_tell": "BIO_seek() and BIO_tell() both return the current file position on success and -1 for failure, except file BIOs which for BIO_seek() always return 0 for success and -1 for failure.",
    "BIO_read_filename": "BIO_read_filename(), BIO_write_filename(), BIO_append_filename() and BIO_rw_filename() return 1 for success or 0 for failure.",
    "BIO_write_filename": "BIO_read_filename(), BIO_write_filename(), BIO_append_filename() and BIO_rw_filename() return 1 for success or 0 for failure.",
    "BIO_append_filename": "BIO_read_filename(), BIO_write_filename(), BIO_append_filename() and BIO_rw_filename() return 1 for success or 0 for failure.",
    "BIO_rw_filename": "BIO_read_filename(), BIO_write_filename(), BIO_append_filename() and BIO_rw_filename() return 1 for success or 0 for failure.",
    "DSA_meth_new": "DSA_meth_new() and DSA_meth_dup() return the newly allocated DSA_METHOD object or NULL on failure.",
    "DSA_meth_dup": "DSA_meth_new() and DSA_meth_dup() return the newly allocated DSA_METHOD object or NULL on failure.",
    "DSA_meth_get0_name": "DSA_meth_get0_name() and DSA_meth_get_flags() return the name and flags associated with the DSA_METHOD respectively.",
    "DSA_meth_get_flags": "DSA_meth_get0_name() and DSA_meth_get_flags() return the name and flags associated with the DSA_METHOD respectively.",
    "DSA_meth_set1_name": "DSA_meth_set1_name() and all DSA_meth_set_*() functions return 1 on success or 0 on failure.",
    "SSL_CTX_set_cipher_list": "SSL_CTX_set_cipher_list() and SSL_set_cipher_list() return 1 if any cipher could be selected and 0 on complete failure.",
    "SSL_set_cipher_list": "SSL_CTX_set_cipher_list() and SSL_set_cipher_list() return 1 if any cipher could be selected and 0 on complete failure.",
    "SSL_CTX_set_ciphersuites": "SSL_CTX_set_ciphersuites() and SSL_set_ciphersuites() return 1 if the requested ciphersuite list was configured, and 0 otherwise.",
    "SSL_set_ciphersuites": "SSL_CTX_set_ciphersuites() and SSL_set_ciphersuites() return 1 if the requested ciphersuite list was configured, and 0 otherwise.",
    "X509_set0_distinguishing_id": "X509_set0_distinguishing_id() and X509_REQ_set0_distinguishing_id() do not return a value.",
    "X509_REQ_set0_distinguishing_id": "X509_set0_distinguishing_id() and X509_REQ_set0_distinguishing_id() do not return a value.",
    "BIO_s_fd": "BIO_s_fd() returns the file descriptor BIO method.",
    "BIO_set_fd": "BIO_set_fd() always returns 1.",
    "BIO_get_fd": "BIO_get_fd() returns the file descriptor or -1 if the BIO has not been initialized.",
    "BIO_new_fd": "BIO_new_fd() returns the newly allocated BIO or NULL is an error occurred.",
    "EVP_PKEY_fromdata_init": "EVP_PKEY_fromdata_init() and EVP_PKEY_fromdata() return 1 for success and 0 or a negative value for failure.  In particular a return value of -2 indicates the operation is not supported by the public key algorithm.",
    "EVP_PKEY_fromdata": "EVP_PKEY_fromdata_init() and EVP_PKEY_fromdata() return 1 for success and 0 or a negative value for failure.  In particular a return value of -2 indicates the operation is not supported by the public key algorithm.",
    "SMIME_write_ASN1_ex": "SMIME_write_ASN1_ex() and SMIME_write_ASN1() return 1 for success or 0 for failure.",
    "SMIME_write_ASN1": "SMIME_write_ASN1_ex() and SMIME_write_ASN1() return 1 for success or 0 for failure.",
    "X509_CRL_get0_by_serial": "X509_CRL_get0_by_serial() and X509_CRL_get0_by_cert() return 0 for failure, 1 on success except if the revoked entry has the reason C<removeFromCRL> (8), in which case 2 is returned.",
    "X509_CRL_get0_by_cert": "X509_CRL_get0_by_serial() and X509_CRL_get0_by_cert() return 0 for failure, 1 on success except if the revoked entry has the reason C<removeFromCRL> (8), in which case 2 is returned.",
    "X509_REVOKED_set_serialNumber": "X509_REVOKED_set_serialNumber(), X509_REVOKED_set_revocationDate(), X509_CRL_add0_revoked() and X509_CRL_sort() return 1 for success and 0 for failure.",
    "X509_REVOKED_set_revocationDate": "X509_REVOKED_set_serialNumber(), X509_REVOKED_set_revocationDate(), X509_CRL_add0_revoked() and X509_CRL_sort() return 1 for success and 0 for failure.",
    "X509_CRL_add0_revoked": "X509_REVOKED_set_serialNumber(), X509_REVOKED_set_revocationDate(), X509_CRL_add0_revoked() and X509_CRL_sort() return 1 for success and 0 for failure.",
    "X509_CRL_sort": "X509_REVOKED_set_serialNumber(), X509_REVOKED_set_revocationDate(), X509_CRL_add0_revoked() and X509_CRL_sort() return 1 for success and 0 for failure.",
    "X509_REVOKED_get0_serialNumber": "X509_REVOKED_get0_serialNumber() returns an B<ASN1_INTEGER> pointer.",
    "X509_REVOKED_get0_revocationDate": "X509_REVOKED_get0_revocationDate() returns an B<ASN1_TIME> value.",
    "X509_CRL_get_REVOKED": "X509_CRL_get_REVOKED() returns a STACK of revoked entries.",
    "DES_set_key": "DES_set_key(), DES_key_sched(), DES_set_key_checked() and DES_is_weak_key() return 0 on success or negative values on error.",
    "DES_key_sched": "DES_set_key(), DES_key_sched(), DES_set_key_checked() and DES_is_weak_key() return 0 on success or negative values on error.",
    "DES_set_key_checked": "DES_set_key(), DES_key_sched(), DES_set_key_checked() and DES_is_weak_key() return 0 on success or negative values on error.",
    "DES_is_weak_key": "DES_set_key(), DES_key_sched(), DES_set_key_checked() and DES_is_weak_key() return 0 on success or negative values on error.",
    "DES_cbc_cksum": "DES_cbc_cksum() and DES_quad_cksum() return 4-byte integer representing the last 4 bytes of the checksum of the input.",
    "DES_quad_cksum": "DES_cbc_cksum() and DES_quad_cksum() return 4-byte integer representing the last 4 bytes of the checksum of the input.",
    "DES_fcrypt": "DES_fcrypt() returns a pointer to the caller-provided buffer and DES_crypt() - to a static buffer on success; otherwise they return NULL.",
    "DES_crypt": "DES_fcrypt() returns a pointer to the caller-provided buffer and DES_crypt() - to a static buffer on success; otherwise they return NULL.",
    "SSL_free_buffers": "The SSL_free_buffers() function returns 1 if the buffers have been freed. This value is also returned if the buffers had been freed before calling SSL_free_buffers(). The SSL_alloc_buffers() function returns 1 if the buffers have been allocated. This value is also returned if the buffers had been allocated before calling SSL_alloc_buffers().",
    "SSL_alloc_buffers": "The SSL_free_buffers() function returns 1 if the buffers have been freed. This value is also returned if the buffers had been freed before calling SSL_free_buffers(). The SSL_alloc_buffers() function returns 1 if the buffers have been allocated. This value is also returned if the buffers had been allocated before calling SSL_alloc_buffers().",
    "PKCS12_SAFEBAG_get0_attrs": "PKCS12_SAFEBAG_get0_attrs() returns the stack of B<X509_ATTRIBUTE>s from a  PKCS#12 safeBag, which could be empty.",
    "PKCS12_get_attr_gen": "PKCS12_get_attr_gen() does not allocate a new attribute. The returned attribute is still owned by the B<PKCS12_SAFEBAG> in which it resides.",
    "BIO_f_buffer": "BIO_f_buffer() returns the buffering BIO method.",
    "BIO_get_buffer_num_lines": "BIO_get_buffer_num_lines() returns the number of lines buffered (may be 0).",
    "BIO_set_read_buffer_size": "BIO_set_read_buffer_size(), BIO_set_write_buffer_size() and BIO_set_buffer_size() return 1 if the buffer was successfully resized or 0 for failure.",
    "BIO_set_write_buffer_size": "BIO_set_read_buffer_size(), BIO_set_write_buffer_size() and BIO_set_buffer_size() return 1 if the buffer was successfully resized or 0 for failure.",
    "BIO_set_buffer_size": "BIO_set_read_buffer_size(), BIO_set_write_buffer_size() and BIO_set_buffer_size() return 1 if the buffer was successfully resized or 0 for failure.",
    "BIO_set_buffer_read_data": "BIO_set_buffer_read_data() returns 1 if the data was set correctly or 0 if there was an error.",
    "BIO_get_new_index": "BIO_get_new_index() returns the new BIO type value or -1 if an error occurred.",
    "BIO_do_accept": "BIO_do_accept(), BIO_set_accept_name(), BIO_set_accept_port(), BIO_set_nbio_accept(), BIO_set_accept_bios(), BIO_set_accept_ip_family(), and BIO_set_bind_mode() return 1 for success and 0 or -1 for failure.",
    "BIO_set_accept_name": "BIO_do_accept(), BIO_set_accept_name(), BIO_set_accept_port(), BIO_set_nbio_accept(), BIO_set_accept_bios(), BIO_set_accept_ip_family(), and BIO_set_bind_mode() return 1 for success and 0 or -1 for failure.",
    "BIO_set_accept_port": "BIO_do_accept(), BIO_set_accept_name(), BIO_set_accept_port(), BIO_set_nbio_accept(), BIO_set_accept_bios(), BIO_set_accept_ip_family(), and BIO_set_bind_mode() return 1 for success and 0 or -1 for failure.",
    "BIO_set_nbio_accept": "BIO_do_accept(), BIO_set_accept_name(), BIO_set_accept_port(), BIO_set_nbio_accept(), BIO_set_accept_bios(), BIO_set_accept_ip_family(), and BIO_set_bind_mode() return 1 for success and 0 or -1 for failure.",
    "BIO_set_accept_bios": "BIO_do_accept(), BIO_set_accept_name(), BIO_set_accept_port(), BIO_set_nbio_accept(), BIO_set_accept_bios(), BIO_set_accept_ip_family(), and BIO_set_bind_mode() return 1 for success and 0 or -1 for failure.",
    "BIO_set_accept_ip_family": "BIO_do_accept(), BIO_set_accept_name(), BIO_set_accept_port(), BIO_set_nbio_accept(), BIO_set_accept_bios(), BIO_set_accept_ip_family(), and BIO_set_bind_mode() return 1 for success and 0 or -1 for failure.",
    "BIO_set_bind_mode": "BIO_do_accept(), BIO_set_accept_name(), BIO_set_accept_port(), BIO_set_nbio_accept(), BIO_set_accept_bios(), BIO_set_accept_ip_family(), and BIO_set_bind_mode() return 1 for success and 0 or -1 for failure.",
    "BIO_get_accept_name": "BIO_get_accept_name() returns the accept name or NULL on error. BIO_get_peer_name() returns the peer name or NULL on error.",
    "BIO_get_peer_name": "BIO_get_accept_name() returns the accept name or NULL on error. BIO_get_peer_name() returns the peer name or NULL on error.",
    "BIO_get_accept_port": "BIO_get_accept_port() returns the accept port as a string or NULL on error. BIO_get_peer_port() returns the peer port as a string or NULL on error. BIO_get_accept_ip_family() returns the IP family or -1 on error.",
    "BIO_get_peer_port": "BIO_get_accept_port() returns the accept port as a string or NULL on error. BIO_get_peer_port() returns the peer port as a string or NULL on error. BIO_get_accept_ip_family() returns the IP family or -1 on error.",
    "BIO_get_accept_ip_family": "BIO_get_accept_port() returns the accept port as a string or NULL on error. BIO_get_peer_port() returns the peer port as a string or NULL on error. BIO_get_accept_ip_family() returns the IP family or -1 on error.",
    "BIO_get_bind_mode": "BIO_get_bind_mode() returns the set of B<BIO_BIND> flags, or -1 on failure.",
    "BIO_new_accept": "BIO_new_accept() returns a BIO or NULL on error.",
    "X509_check_issued": "X509_check_issued() returns B<X509_V_OK> if all checks are successful or some B<X509_V_ERR*> constant to indicate an error.",
    "OCSP_REQUEST_new": "OCSP_REQUEST_new() returns an empty B<OCSP_REQUEST> structure or B<NULL> if an error occurred.",
    "OCSP_request_add0_id": "OCSP_request_add0_id() returns the B<OCSP_ONEREQ> structure containing B<cid> or B<NULL> if an error occurred.",
    "OCSP_request_sign": "OCSP_request_sign() and OCSP_request_add1_cert() return 1 for success and 0 for failure.",
    "OCSP_request_add1_cert": "OCSP_request_sign() and OCSP_request_add1_cert() return 1 for success and 0 for failure.",
    "OCSP_request_onereq_count": "OCSP_request_onereq_count() returns the total number of B<OCSP_ONEREQ> structures in B<req>.",
    "OCSP_request_onereq_get0": "OCSP_request_onereq_get0() returns a pointer to an B<OCSP_ONEREQ> structure or B<NULL> if the index value is out or range.",
    "EVP_PKEY_meth_new": "EVP_PKEY_meth_new() returns a pointer to a new B<EVP_PKEY_METHOD> object or returns NULL on error.",
    "EVP_PKEY_meth_free": "EVP_PKEY_meth_free() and EVP_PKEY_meth_copy() do not return values.",
    "EVP_PKEY_meth_copy": "EVP_PKEY_meth_free() and EVP_PKEY_meth_copy() do not return values.",
    "EVP_PKEY_meth_find": "EVP_PKEY_meth_find() returns a pointer to the found B<EVP_PKEY_METHOD> object or returns NULL if not found.",
    "EVP_PKEY_meth_add0": "EVP_PKEY_meth_add0() returns 1 if method is added successfully or 0 if an error occurred.",
    "EVP_PKEY_meth_remove": "EVP_PKEY_meth_remove() returns 1 if method is removed successfully or 0 if an error occurred.",
    "X509_get0_notBefore": "X509_get0_notBefore(), X509_get0_notAfter() and X509_CRL_get0_lastUpdate() return a pointer to an B<ASN1_TIME> structure.",
    "X509_get0_notAfter": "X509_get0_notBefore(), X509_get0_notAfter() and X509_CRL_get0_lastUpdate() return a pointer to an B<ASN1_TIME> structure.",
    "X509_CRL_get0_lastUpdate": "X509_CRL_get0_lastUpdate() return a pointer to an B<ASN1_TIME> structure or NULL if the B<lastUpdate> field is absent.",
    "X509_set1_notBefore": "X509_set1_notBefore(), X509_set1_notAfter(), X509_CRL_set1_lastUpdate() and X509_CRL_set1_nextUpdate() return 1 for success or 0 for failure.",
    "X509_set1_notAfter": "X509_set1_notBefore(), X509_set1_notAfter(), X509_CRL_set1_lastUpdate() and X509_CRL_set1_nextUpdate() return 1 for success or 0 for failure.",
    "X509_CRL_set1_lastUpdate": "X509_set1_notBefore(), X509_set1_notAfter(), X509_CRL_set1_lastUpdate() and X509_CRL_set1_nextUpdate() return 1 for success or 0 for failure.",
    "X509_CRL_set1_nextUpdate": "X509_set1_notBefore(), X509_set1_notAfter(), X509_CRL_set1_lastUpdate() and X509_CRL_set1_nextUpdate() return 1 for success or 0 for failure.",
    "EVP_RAND_fetch": "EVP_RAND_fetch() returns a pointer to a newly fetched B<EVP_RAND>, or NULL if allocation failed.",
    "EVP_RAND_get0_provider": "EVP_RAND_get0_provider() returns a pointer to the provider for the RAND, or NULL on error.",
    "EVP_RAND_CTX_get0_rand": "EVP_RAND_CTX_get0_rand() returns a pointer to the B<EVP_RAND> associated with the context.",
    "EVP_RAND_get0_name": "EVP_RAND_get0_name() returns the name of the random number generation algorithm.",
    "EVP_RAND_up_ref": "EVP_RAND_up_ref() returns 1 on success, 0 on error.",
    "EVP_RAND_names_do_all": "EVP_RAND_names_do_all() returns 1 if the callback was called for all names. A return value of 0 means that the callback was not called for any names.",
    "EVP_RAND_CTX_new": "EVP_RAND_CTX_new() returns either the newly allocated B<EVP_RAND_CTX> structure or NULL if an error occurred.",
    "EVP_RAND_CTX_free": "EVP_RAND_CTX_free() does not return a value.",
    "EVP_RAND_nonce": "EVP_RAND_nonce() returns the length of the nonce.",
    "EVP_RAND_get_strength": "EVP_RAND_get_strength() returns the strength of the random number generator in bits.",
    "EVP_RAND_gettable_params": "EVP_RAND_gettable_params(), EVP_RAND_gettable_ctx_params() and EVP_RAND_settable_ctx_params() return an array of OSSL_PARAMs.",
    "EVP_RAND_gettable_ctx_params": "EVP_RAND_gettable_params(), EVP_RAND_gettable_ctx_params() and EVP_RAND_settable_ctx_params() return an array of OSSL_PARAMs.",
    "EVP_RAND_settable_ctx_params": "EVP_RAND_gettable_params(), EVP_RAND_gettable_ctx_params() and EVP_RAND_settable_ctx_params() return an array of OSSL_PARAMs.",
    "EVP_RAND_verify_zeroization": "EVP_RAND_verify_zeroization() returns 1 if the internal DRBG state is currently zeroed, and 0 if not.",
    "SSL_CTX_set_default_ctlog_list_file": "SSL_CTX_set_default_ctlog_list_file() and SSL_CTX_set_ctlog_list_file() return 1 if the log list is successfully loaded, and 0 if an error occurs. In the case of an error, the log list may have been partially loaded.",
    "SSL_CTX_set_ctlog_list_file": "SSL_CTX_set_default_ctlog_list_file() and SSL_CTX_set_ctlog_list_file() return 1 if the log list is successfully loaded, and 0 if an error occurs. In the case of an error, the log list may have been partially loaded.",
    "RSA_new": "If the allocation fails, RSA_new() returns B<NULL> and sets an error code that can be obtained by L<ERR_get_error(3)>. Otherwise it returns a pointer to the newly allocated structure.",
    "RSA_free": "RSA_free() returns no value.",
    "OSSL_ENCODER_CTX_new_for_pkey": "OSSL_ENCODER_CTX_new_for_pkey() returns a pointer to an B<OSSL_ENCODER_CTX>, or NULL if it couldn't be created.",
    "OSSL_ENCODER_CTX_set_cipher": "OSSL_ENCODER_CTX_set_cipher(), OSSL_ENCODER_CTX_set_passphrase(), OSSL_ENCODER_CTX_set_pem_password_cb(), OSSL_ENCODER_CTX_set_passphrase_ui() and OSSL_ENCODER_CTX_set_passphrase_cb() all return 1 on success, or 0 on failure.",
    "OSSL_ENCODER_CTX_set_passphrase": "OSSL_ENCODER_CTX_set_cipher(), OSSL_ENCODER_CTX_set_passphrase(), OSSL_ENCODER_CTX_set_pem_password_cb(), OSSL_ENCODER_CTX_set_passphrase_ui() and OSSL_ENCODER_CTX_set_passphrase_cb() all return 1 on success, or 0 on failure.",
    "OSSL_ENCODER_CTX_set_pem_password_cb": "OSSL_ENCODER_CTX_set_cipher(), OSSL_ENCODER_CTX_set_passphrase(), OSSL_ENCODER_CTX_set_pem_password_cb(), OSSL_ENCODER_CTX_set_passphrase_ui() and OSSL_ENCODER_CTX_set_passphrase_cb() all return 1 on success, or 0 on failure.",
    "OSSL_ENCODER_CTX_set_passphrase_ui": "OSSL_ENCODER_CTX_set_cipher(), OSSL_ENCODER_CTX_set_passphrase(), OSSL_ENCODER_CTX_set_pem_password_cb(), OSSL_ENCODER_CTX_set_passphrase_ui() and OSSL_ENCODER_CTX_set_passphrase_cb() all return 1 on success, or 0 on failure.",
    "OSSL_ENCODER_CTX_set_passphrase_cb": "OSSL_ENCODER_CTX_set_cipher(), OSSL_ENCODER_CTX_set_passphrase(), OSSL_ENCODER_CTX_set_pem_password_cb(), OSSL_ENCODER_CTX_set_passphrase_ui() and OSSL_ENCODER_CTX_set_passphrase_cb() all return 1 on success, or 0 on failure.",
    "BUF_MEM_new": "BUF_MEM_new() returns the buffer or NULL on error.",
    "BUF_MEM_free": "BUF_MEM_free() has no return value.",
    "BUF_MEM_grow": "BUF_MEM_grow() and BUF_MEM_grow_clean() return zero on error or the new size (i.e., B<len>).",
    "BUF_MEM_grow_clean": "BUF_MEM_grow() and BUF_MEM_grow_clean() return zero on error or the new size (i.e., B<len>).",
    "EVP_RSA_gen": "EVP_RSA_gen() returns an I<EVP_PKEY> or NULL on failure.",
    "RSA_generate_multi_prime_key": "RSA_generate_multi_prime_key() returns 1 on success or 0 on error. RSA_generate_key_ex() returns 1 on success or 0 on error. The error codes can be obtained by L<ERR_get_error(3)>.",
    "RSA_generate_key_ex": "RSA_generate_multi_prime_key() returns 1 on success or 0 on error. RSA_generate_key_ex() returns 1 on success or 0 on error. The error codes can be obtained by L<ERR_get_error(3)>.",
    "RSA_generate_key": "RSA_generate_key() returns a pointer to the RSA structure or NULL if the key generation fails.",
    "X509_STORE_CTX_get1_issuer": "X509_STORE_CTX_get1_issuer() returns 1 if a suitable certificate is found, 0 if not found, -1 on other error.",
    "OSSL_CMP_log_close": "OSSL_CMP_log_close() and OSSL_CMP_print_errors_cb() do not return anything.",
    "OSSL_CMP_print_errors_cb": "OSSL_CMP_log_close() and OSSL_CMP_print_errors_cb() do not return anything.",
    "SSL_up_ref": "SSL_up_ref() returns 1 for success and 0 for failure.",
    "X509_check_host": "All functions can also return -2 if the input is malformed. For example, X509_check_host() returns -2 if the provided B<name> contains embedded NULs.",
    "SSL_library_init": "SSL_library_init() always returns \"1\", so it is safe to discard the return value.",
    "EVP_PKEY_derive_init": "EVP_PKEY_derive_init() and EVP_PKEY_derive() return 1 for success and 0 or a negative value for failure. In particular a return value of -2 indicates the operation is not supported by the public key algorithm.",
    "EVP_PKEY_derive": "EVP_PKEY_derive_init() and EVP_PKEY_derive() return 1 for success and 0 or a negative value for failure. In particular a return value of -2 indicates the operation is not supported by the public key algorithm.",
    "CMS_decrypt": "CMS_decrypt() returns either 1 for success or 0 for failure. The error can be obtained from ERR_get_error(3)",
    "EVP_PKEY_verify_init": "EVP_PKEY_verify_init() and EVP_PKEY_verify() return 1 if the verification was successful and 0 if it failed. Unlike other functions the return value 0 from EVP_PKEY_verify() only indicates that the signature did not verify successfully (that is tbs did not match the original data or the signature was of invalid form) it is not an indication of a more serious error.",
    "EVP_PKEY_verify": "EVP_PKEY_verify_init() and EVP_PKEY_verify() return 1 if the verification was successful and 0 if it failed. Unlike other functions the return value 0 from EVP_PKEY_verify() only indicates that the signature did not verify successfully (that is tbs did not match the original data or the signature was of invalid form) it is not an indication of a more serious error.",
    "X509v3_get_ext_count": "X509v3_get_ext_count() returns the extension count.",
    "X509v3_get_ext": "X509v3_get_ext(), X509v3_delete_ext() and X509_delete_ext() return an B<X509_EXTENSION> pointer or B<NULL> if an error occurs.",
    "X509v3_delete_ext": "X509v3_get_ext(), X509v3_delete_ext() and X509_delete_ext() return an B<X509_EXTENSION> pointer or B<NULL> if an error occurs.",
    "X509_delete_ext": "X509v3_get_ext(), X509v3_delete_ext() and X509_delete_ext() return an B<X509_EXTENSION> pointer or B<NULL> if an error occurs.",
    "X509v3_get_ext_by_NID": "X509v3_get_ext_by_NID() X509v3_get_ext_by_OBJ() and X509v3_get_ext_by_critical() return the an extension index or B<-1> if an error occurs.",
    "X509v3_get_ext_by_OBJ": "X509v3_get_ext_by_NID() X509v3_get_ext_by_OBJ() and X509v3_get_ext_by_critical() return the an extension index or B<-1> if an error occurs.",
    "X509v3_get_ext_by_critical": "X509v3_get_ext_by_NID() X509v3_get_ext_by_OBJ() and X509v3_get_ext_by_critical() return the an extension index or B<-1> if an error occurs.",
    "X509v3_add_ext": "X509v3_add_ext() returns a stack of extensions or B<NULL> on error.",
    "X509_add_ext": "X509_add_ext() returns 1 on success and 0 on error.",
    "EVP_MD_meth_new": "EVP_MD_meth_new() and EVP_MD_meth_dup() return a pointer to a newly created B<EVP_MD>, or NULL on failure. All EVP_MD_meth_set_*() functions return 1. EVP_MD_get_input_blocksize(), EVP_MD_meth_get_result_size(), EVP_MD_meth_get_app_datasize() and EVP_MD_meth_get_flags() return the indicated sizes or flags. All other EVP_CIPHER_meth_get_*() functions return pointers to their respective B<md> function.",
    "EVP_MD_meth_dup": "EVP_MD_meth_new() and EVP_MD_meth_dup() return a pointer to a newly created B<EVP_MD>, or NULL on failure. All EVP_MD_meth_set_*() functions return 1. EVP_MD_get_input_blocksize(), EVP_MD_meth_get_result_size(), EVP_MD_meth_get_app_datasize() and EVP_MD_meth_get_flags() return the indicated sizes or flags. All other EVP_CIPHER_meth_get_*() functions return pointers to their respective B<md> function.",
    "EVP_MD_get_input_blocksize": "EVP_MD_meth_new() and EVP_MD_meth_dup() return a pointer to a newly created B<EVP_MD>, or NULL on failure. All EVP_MD_meth_set_*() functions return 1. EVP_MD_get_input_blocksize(), EVP_MD_meth_get_result_size(), EVP_MD_meth_get_app_datasize() and EVP_MD_meth_get_flags() return the indicated sizes or flags. All other EVP_CIPHER_meth_get_*() functions return pointers to their respective B<md> function.",
    "EVP_MD_meth_get_result_size": "EVP_MD_meth_new() and EVP_MD_meth_dup() return a pointer to a newly created B<EVP_MD>, or NULL on failure. All EVP_MD_meth_set_*() functions return 1. EVP_MD_get_input_blocksize(), EVP_MD_meth_get_result_size(), EVP_MD_meth_get_app_datasize() and EVP_MD_meth_get_flags() return the indicated sizes or flags. All other EVP_CIPHER_meth_get_*() functions return pointers to their respective B<md> function.",
    "EVP_MD_meth_get_app_datasize": "EVP_MD_meth_new() and EVP_MD_meth_dup() return a pointer to a newly created B<EVP_MD>, or NULL on failure. All EVP_MD_meth_set_*() functions return 1. EVP_MD_get_input_blocksize(), EVP_MD_meth_get_result_size(), EVP_MD_meth_get_app_datasize() and EVP_MD_meth_get_flags() return the indicated sizes or flags. All other EVP_CIPHER_meth_get_*() functions return pointers to their respective B<md> function.",
    "EVP_MD_meth_get_flags": "EVP_MD_meth_new() and EVP_MD_meth_dup() return a pointer to a newly created B<EVP_MD>, or NULL on failure. All EVP_MD_meth_set_*() functions return 1. EVP_MD_get_input_blocksize(), EVP_MD_meth_get_result_size(), EVP_MD_meth_get_app_datasize() and EVP_MD_meth_get_flags() return the indicated sizes or flags. All other EVP_CIPHER_meth_get_*() functions return pointers to their respective B<md> function.",
    "PKCS7_encrypt_ex": "PKCS7_encrypt_ex() and PKCS7_encrypt() return either a PKCS7 structure or NULL if an error occurred. The error can be obtained from ERR_get_error(3).",
    "PKCS7_encrypt": "PKCS7_encrypt_ex() and PKCS7_encrypt() return either a PKCS7 structure or NULL if an error occurred. The error can be obtained from ERR_get_error(3).",
    "X509_NAME_cmp": "X509_NAME_cmp(), X509_issuer_and_serial_cmp(), X509_issuer_name_cmp(), X509_subject_name_cmp(), X509_CRL_cmp(), and X509_CRL_match() may return B<-2> to indicate an error.",
    "X509_issuer_and_serial_cmp": "X509_NAME_cmp(), X509_issuer_and_serial_cmp(), X509_issuer_name_cmp(), X509_subject_name_cmp(), X509_CRL_cmp(), and X509_CRL_match() may return B<-2> to indicate an error.",
    "X509_issuer_name_cmp": "X509_NAME_cmp(), X509_issuer_and_serial_cmp(), X509_issuer_name_cmp(), X509_subject_name_cmp(), X509_CRL_cmp(), and X509_CRL_match() may return B<-2> to indicate an error.",
    "X509_subject_name_cmp": "X509_NAME_cmp(), X509_issuer_and_serial_cmp(), X509_issuer_name_cmp(), X509_subject_name_cmp(), X509_CRL_cmp(), and X509_CRL_match() may return B<-2> to indicate an error.",
    "X509_CRL_cmp": "X509_NAME_cmp(), X509_issuer_and_serial_cmp(), X509_issuer_name_cmp(), X509_subject_name_cmp(), X509_CRL_cmp(), and X509_CRL_match() may return B<-2> to indicate an error.",
    "X509_CRL_match": "X509_NAME_cmp(), X509_issuer_and_serial_cmp(), X509_issuer_name_cmp(), X509_subject_name_cmp(), X509_CRL_cmp(), and X509_CRL_match() may return B<-2> to indicate an error.",
    "EVP_PKEY_get_size": "EVP_PKEY_get_size(), EVP_PKEY_get_bits() and EVP_PKEY_get_security_bits() return a positive number, or 0 if this size isn't available.",
    "EVP_PKEY_get_bits": "EVP_PKEY_get_size(), EVP_PKEY_get_bits() and EVP_PKEY_get_security_bits() return a positive number, or 0 if this size isn't available.",
    "EVP_PKEY_get_security_bits": "EVP_PKEY_get_size(), EVP_PKEY_get_bits() and EVP_PKEY_get_security_bits() return a positive number, or 0 if this size isn't available.",
    "SSL_free": "SSL_free() does not provide diagnostic information.",
    "SCT_validate": "SCT_get_validation_status() returns the validation status of the SCT. If SCT_validate() or SCT_LIST_validate() have not been passed that SCT, the returned value will be SCT_VALIDATION_STATUS_NOT_SET.",
    "SCT_LIST_validate": "SCT_get_validation_status() returns the validation status of the SCT. If SCT_validate() or SCT_LIST_validate() have not been passed that SCT, the returned value will be SCT_VALIDATION_STATUS_NOT_SET.",
    "SCT_get_validation_status": "SCT_get_validation_status() returns the validation status of the SCT. If SCT_validate() or SCT_LIST_validate() have not been passed that SCT, the returned value will be SCT_VALIDATION_STATUS_NOT_SET.",
    "X509_get_version": "X509_get_version(), X509_REQ_get_version() and X509_CRL_get_version() return the numerical value of the version field.",
    "X509_REQ_get_version": "X509_get_version(), X509_REQ_get_version() and X509_CRL_get_version() return the numerical value of the version field.",
    "X509_CRL_get_version": "X509_get_version(), X509_REQ_get_version() and X509_CRL_get_version() return the numerical value of the version field.",
    "X509_set_version": "X509_set_version(), X509_REQ_set_version() and X509_CRL_set_version() return 1 for success and 0 for failure.",
    "X509_REQ_set_version": "X509_set_version(), X509_REQ_set_version() and X509_CRL_set_version() return 1 for success and 0 for failure.",
    "X509_CRL_set_version": "X509_set_version(), X509_REQ_set_version() and X509_CRL_set_version() return 1 for success and 0 for failure.",
    "X509V3_EXT_d2i": "X509V3_EXT_d2i() and *X509V3_get_d2i() return a pointer to an extension specific structure or B<NULL> if an error occurs.",
    "X509V3_get_d2i": "X509V3_EXT_d2i() and *X509V3_get_d2i() return a pointer to an extension specific structure or B<NULL> if an error occurs.",
    "X509V3_EXT_i2d": "X509V3_EXT_i2d() returns a pointer to an B<X509_EXTENSION> structure or B<NULL> if an error occurs.",
    "X509V3_add1_i2d": "X509V3_add1_i2d() returns 1 if the operation is successful and 0 if it fails due to a non-fatal error (extension not found, already exists, cannot be encoded) or -1 due to a fatal error such as a memory allocation failure.",
    "X509_get0_extensions": "X509_get0_extensions(), X509_CRL_get0_extensions() and X509_REVOKED_get0_extensions() return a stack of extensions. They return NULL if no extensions are present.",
    "X509_CRL_get0_extensions": "X509_get0_extensions(), X509_CRL_get0_extensions() and X509_REVOKED_get0_extensions() return a stack of extensions. They return NULL if no extensions are present.",
    "X509_REVOKED_get0_extensions": "X509_get0_extensions(), X509_CRL_get0_extensions() and X509_REVOKED_get0_extensions() return a stack of extensions. They return NULL if no extensions are present.",
    "PKCS12_create": "PKCS12_create() returns a valid B<PKCS12> structure or NULL if an error occurred.",
    "PKCS5_PBKDF2_HMAC": "PKCS5_PBKDF2_HMAC() and PBKCS5_PBKDF2_HMAC_SHA1() return 1 on success or 0 on error.",
    "PBKCS5_PBKDF2_HMAC_SHA1": "PKCS5_PBKDF2_HMAC() and PBKCS5_PBKDF2_HMAC_SHA1() return 1 on success or 0 on error.",
    "MDC2": "MDC2() returns a pointer to the hash value.",
    "MDC2_Init": "MDC2_Init(), MDC2_Update() and MDC2_Final() return 1 for success, 0 otherwise.",
    "MDC2_Update": "MDC2_Init(), MDC2_Update() and MDC2_Final() return 1 for success, 0 otherwise.",
    "MDC2_Final": "MDC2_Init(), MDC2_Update() and MDC2_Final() return 1 for success, 0 otherwise.",
    "SSL_CTX_sess_get_new_cb": "SSL_CTX_sess_get_new_cb(), SSL_CTX_sess_get_remove_cb() and SSL_CTX_sess_get_get_cb() return different callback function pointers respectively.",
    "SSL_CTX_sess_get_remove_cb": "SSL_CTX_sess_get_new_cb(), SSL_CTX_sess_get_remove_cb() and SSL_CTX_sess_get_get_cb() return different callback function pointers respectively.",
    "SSL_CTX_sess_get_get_cb": "SSL_CTX_sess_get_new_cb(), SSL_CTX_sess_get_remove_cb() and SSL_CTX_sess_get_get_cb() return different callback function pointers respectively.",
    "BIO_socket_wait": "BIO_socket_wait(), BIO_wait(), and BIO_do_connect_retry() return -1 on error, 0 on timeout, and 1 on success.",
    "BIO_wait": "BIO_socket_wait(), BIO_wait(), and BIO_do_connect_retry() return -1 on error, 0 on timeout, and 1 on success.",
    "BIO_do_connect_retry": "BIO_socket_wait(), BIO_wait(), and BIO_do_connect_retry() return -1 on error, 0 on timeout, and 1 on success.",
    "EVP_PKEY_gettable_params": "EVP_PKEY_gettable_params() returns NULL on error or if it is not supported,",
    "EVP_PKEY_get_utf8_string_param": "All other methods return 1 if a value associated with the key's I<key_name> was successfully returned, or 0 if there was an error. An error may be returned by methods EVP_PKEY_get_utf8_string_param() and EVP_PKEY_get_octet_string_param() if I<max_buf_sz> is not big enough to hold the value.  If I<out_sz> is not NULL, I<*out_sz> will be assigned the required buffer size to hold the value.",
    "EVP_PKEY_get_octet_string_param": "All other methods return 1 if a value associated with the key's I<key_name> was successfully returned, or 0 if there was an error. An error may be returned by methods EVP_PKEY_get_utf8_string_param() and EVP_PKEY_get_octet_string_param() if I<max_buf_sz> is not big enough to hold the value.  If I<out_sz> is not NULL, I<*out_sz> will be assigned the required buffer size to hold the value.",
    "PKCS7_decrypt": "PKCS7_decrypt() returns either 1 for success or 0 for failure. The error can be obtained from ERR_get_error(3)",
    "X509_NAME_ENTRY_get_object": "X509_NAME_ENTRY_get_object() returns a valid B<ASN1_OBJECT> structure if it is set or NULL if an error occurred.",
    "X509_NAME_ENTRY_get_data": "X509_NAME_ENTRY_get_data() returns a valid B<ASN1_STRING> structure if it is set or NULL if an error occurred.",
    "X509_NAME_ENTRY_set_object": "X509_NAME_ENTRY_set_object() and X509_NAME_ENTRY_set_data() return 1 on success or 0 on error.",
    "X509_NAME_ENTRY_set_data": "X509_NAME_ENTRY_set_object() and X509_NAME_ENTRY_set_data() return 1 on success or 0 on error.",
    "X509_NAME_ENTRY_create_by_txt": "X509_NAME_ENTRY_create_by_txt(), X509_NAME_ENTRY_create_by_NID() and X509_NAME_ENTRY_create_by_OBJ() return a valid B<X509_NAME_ENTRY> on success or NULL if an error occurred.",
    "X509_NAME_ENTRY_create_by_NID": "X509_NAME_ENTRY_create_by_txt(), X509_NAME_ENTRY_create_by_NID() and X509_NAME_ENTRY_create_by_OBJ() return a valid B<X509_NAME_ENTRY> on success or NULL if an error occurred.",
    "X509_NAME_ENTRY_create_by_OBJ": "X509_NAME_ENTRY_create_by_txt(), X509_NAME_ENTRY_create_by_NID() and X509_NAME_ENTRY_create_by_OBJ() return a valid B<X509_NAME_ENTRY> on success or NULL if an error occurred.",
    "EVP_PKEY_is_a": "EVP_PKEY_is_a() returns 1 if I<pkey> has the key type I<name>, otherwise 0.",
    "EVP_PKEY_can_sign": "EVP_PKEY_can_sign() returns 1 if the I<pkey> key type functionality supports signing, otherwise 0.",
    "EVP_PKEY_get0_type_name": "EVP_PKEY_get0_type_name() returns the name that is found or NULL on error.",
    "EVP_PKEY_get0_description": "EVP_PKEY_get0_description() returns the description if found or NULL if not.",
    "EVP_PKEY_get0_provider": "EVP_PKEY_get0_provider() returns the provider if found or NULL if not.",
    "EVP_PKEY_type_names_do_all": "EVP_PKEY_type_names_do_all() returns 1 if the callback was called for all names. A return value of 0 means that the callback was not called for any names.",
    "SSL_get_read_ahead": "SSL_get_read_ahead() and SSL_CTX_get_read_ahead() return 0 if reading ahead is off, and non zero otherwise.",
    "SSL_CTX_get_read_ahead": "SSL_get_read_ahead() and SSL_CTX_get_read_ahead() return 0 if reading ahead is off, and non zero otherwise.",
    "BIO_reset": "BIO_reset() normally returns 1 for success and 0 or -1 for failure. File BIOs are an exception, they return 0 for success and -1 for failure.",
    "BIO_flush": "BIO_flush() returns 1 for success and 0 or -1 for failure.",
    "BIO_eof": "BIO_eof() returns 1 if EOF has been reached, 0 if not, or -1 for failure.",
    "BIO_set_close": "BIO_set_close() always returns 1.",
    "BIO_get_close": "BIO_get_close() returns the close flag value: BIO_CLOSE or BIO_NOCLOSE.",
    "BIO_pending": "BIO_pending(), BIO_ctrl_pending(), BIO_wpending() and BIO_ctrl_wpending() return the amount of pending data.",
    "BIO_ctrl_pending": "BIO_pending(), BIO_ctrl_pending(), BIO_wpending() and BIO_ctrl_wpending() return the amount of pending data.",
    "BIO_wpending": "BIO_pending(), BIO_ctrl_pending(), BIO_wpending() and BIO_ctrl_wpending() return the amount of pending data.",
    "BIO_ctrl_wpending": "BIO_pending(), BIO_ctrl_pending(), BIO_wpending() and BIO_ctrl_wpending() return the amount of pending data.",
    "BIO_get_ktls_send": "BIO_get_ktls_send() returns 1 if the BIO is using the Kernel TLS data-path for sending. Otherwise, it returns zero. BIO_get_ktls_recv() returns 1 if the BIO is using the Kernel TLS data-path for receiving. Otherwise, it returns zero.",
    "BIO_get_ktls_recv": "BIO_get_ktls_send() returns 1 if the BIO is using the Kernel TLS data-path for sending. Otherwise, it returns zero. BIO_get_ktls_recv() returns 1 if the BIO is using the Kernel TLS data-path for receiving. Otherwise, it returns zero.",
    "CRYPTO_get_ex_new_index": "CRYPTO_get_ex_new_index() returns a new index or -1 on failure.",
    "CRYPTO_free_ex_index": "CRYPTO_free_ex_index(), CRYPTO_alloc_ex_data() and CRYPTO_set_ex_data() return 1 on success or 0 on failure.",
    "CRYPTO_alloc_ex_data": "CRYPTO_free_ex_index(), CRYPTO_alloc_ex_data() and CRYPTO_set_ex_data() return 1 on success or 0 on failure.",
    "CRYPTO_get_ex_data": "CRYPTO_get_ex_data() returns the application data or NULL on failure; note that NULL may be a valid value.",
    "dup_func": "dup_func() should return 0 for failure and 1 for success.",
    "SSL_CTX_set_client_CA_list": "SSL_CTX_set_client_CA_list(), SSL_set_client_CA_list(), SSL_CTX_set_client_CA_list(), SSL_set_client_CA_list(), SSL_CTX_set0_CA_list() and SSL_set0_CA_list() do not return a value.",
    "SSL_set_client_CA_list": "SSL_CTX_set_client_CA_list(), SSL_set_client_CA_list(), SSL_CTX_set_client_CA_list(), SSL_set_client_CA_list(), SSL_CTX_set0_CA_list() and SSL_set0_CA_list() do not return a value.",
    "SSL_CTX_set0_CA_list": "SSL_CTX_set_client_CA_list(), SSL_set_client_CA_list(), SSL_CTX_set_client_CA_list(), SSL_set_client_CA_list(), SSL_CTX_set0_CA_list() and SSL_set0_CA_list() do not return a value.",
    "SSL_set0_CA_list": "SSL_CTX_set_client_CA_list(), SSL_set_client_CA_list(), SSL_CTX_set_client_CA_list(), SSL_set_client_CA_list(), SSL_CTX_set0_CA_list() and SSL_set0_CA_list() do not return a value.",
    "SSL_CTX_get_client_CA_list": "SSL_CTX_get_client_CA_list(), SSL_get_client_CA_list(), SSL_CTX_get0_CA_list() and SSL_get0_CA_list() return a stack of CA names or B<NULL> is no CA names are set.",
    "SSL_get_client_CA_list": "SSL_CTX_get_client_CA_list(), SSL_get_client_CA_list(), SSL_CTX_get0_CA_list() and SSL_get0_CA_list() return a stack of CA names or B<NULL> is no CA names are set.",
    "SSL_CTX_get0_CA_list": "SSL_CTX_get_client_CA_list(), SSL_get_client_CA_list(), SSL_CTX_get0_CA_list() and SSL_get0_CA_list() return a stack of CA names or B<NULL> is no CA names are set.",
    "SSL_get0_CA_list": "SSL_CTX_get_client_CA_list(), SSL_get_client_CA_list(), SSL_CTX_get0_CA_list() and SSL_get0_CA_list() return a stack of CA names or B<NULL> is no CA names are set.",
    "SSL_CTX_add_client_CA": "SSL_CTX_add_client_CA(),SSL_add_client_CA(), SSL_CTX_add1_to_CA_list() and SSL_add1_to_CA_list() return 1 for success and 0 for failure.",
    "SSL_add_client_CA": "SSL_CTX_add_client_CA(),SSL_add_client_CA(), SSL_CTX_add1_to_CA_list() and SSL_add1_to_CA_list() return 1 for success and 0 for failure.",
    "SSL_CTX_add1_to_CA_list": "SSL_CTX_add_client_CA(),SSL_add_client_CA(), SSL_CTX_add1_to_CA_list() and SSL_add1_to_CA_list() return 1 for success and 0 for failure.",
    "SSL_add1_to_CA_list": "SSL_CTX_add_client_CA(),SSL_add_client_CA(), SSL_CTX_add1_to_CA_list() and SSL_add1_to_CA_list() return 1 for success and 0 for failure.",
    "SSL_get0_peer_CA_list": "SSL_get0_peer_CA_list() returns a stack of CA names sent by the peer or B<NULL> or an empty stack if no list was sent.",
    "b2i_PVK_bio": "The b2i_PVK_bio() and b2i_PVK_bio_ex() functions return a valid B<EVP_KEY> structure or B<NULL> if an error occurs. The error code can be obtained by calling L<ERR_get_error(3)>.",
    "b2i_PVK_bio_ex": "The b2i_PVK_bio() and b2i_PVK_bio_ex() functions return a valid B<EVP_KEY> structure or B<NULL> if an error occurs. The error code can be obtained by calling L<ERR_get_error(3)>.",
    "i2b_PVK_bio": "i2b_PVK_bio() and i2b_PVK_bio_ex() return the number of bytes successfully encoded or a negative value if an error occurs. The error code can be obtained by calling L<ERR_get_error(3)>.",
    "i2b_PVK_bio_ex": "i2b_PVK_bio() and i2b_PVK_bio_ex() return the number of bytes successfully encoded or a negative value if an error occurs. The error code can be obtained by calling L<ERR_get_error(3)>.",
    "SSL_SESSION_get_id": "SSL_SESSION_get_id() returns a pointer to the session id value. SSL_SESSION_set1_id() returns 1 for success and 0 for failure, for example if the supplied session ID length exceeds B<SSL_MAX_SSL_SESSION_ID_LENGTH>.",
    "SSL_SESSION_set1_id": "SSL_SESSION_get_id() returns a pointer to the session id value. SSL_SESSION_set1_id() returns 1 for success and 0 for failure, for example if the supplied session ID length exceeds B<SSL_MAX_SSL_SESSION_ID_LENGTH>.",
    "SSL_CTX_get_record_padding_callback_arg": "The SSL_CTX_get_record_padding_callback_arg() function returns 1 on success or 0 if the callback function is not set because Kernel TLS is configured for the SSL object.",
    "SSL_get_record_padding_callback_arg": "The SSL_CTX_get_record_padding_callback_arg() and SSL_get_record_padding_callback_arg() functions return the B<arg> value assigned in the corresponding set functions.",
    "SSL_CTX_set_block_padding": "The SSL_CTX_set_block_padding() and SSL_set_block_padding() functions return 1 on success or 0 if B<block_size> is too large.",
    "SSL_set_block_padding": "The SSL_CTX_set_block_padding() and SSL_set_block_padding() functions return 1 on success or 0 if B<block_size> is too large.",
    "EVP_SealInit": "EVP_SealInit() returns 0 on error or B<npubk> if successful.",
    "EVP_SealUpdate": "EVP_SealUpdate() and EVP_SealFinal() return 1 for success and 0 for failure.",
    "EVP_SealFinal": "EVP_SealUpdate() and EVP_SealFinal() return 1 for success and 0 for failure.",
    "PKCS7_type_is_other": "PKCS7_type_is_other() returns either 0 if the content type is matched or 1 otherwise.",
    "BN_new": "BN_new() and BN_secure_new() return a pointer to the B<BIGNUM> initialised to the value 0. If the allocation fails, they return B<NULL> and set an error code that can be obtained by L<ERR_get_error(3)>.",
    "BN_secure_new": "BN_new() and BN_secure_new() return a pointer to the B<BIGNUM> initialised to the value 0. If the allocation fails, they return B<NULL> and set an error code that can be obtained by L<ERR_get_error(3)>.",
    "BN_clear": "BN_clear(), BN_free() and BN_clear_free() have no return values.",
    "BN_free": "BN_clear(), BN_free() and BN_clear_free() have no return values.",
    "BN_clear_free": "BN_clear(), BN_free() and BN_clear_free() have no return values.",
    "i2d_PKCS7_bio_stream": "i2d_PKCS7_bio_stream() returns 1 for success or 0 for failure.",
    "SSL_CTX_set_ssl_version": "The following return values can occur for SSL_CTX_set_ssl_version() and SSL_set_ssl_method():",
    "SSL_set_ssl_method": "The following return values can occur for SSL_CTX_set_ssl_version() and SSL_set_ssl_method():",
    "OSSL_CMP_exec_certreq": "OSSL_CMP_exec_certreq(), OSSL_CMP_exec_IR_ses(), OSSL_CMP_exec_CR_ses(), OSSL_CMP_exec_P10CR_ses(), and OSSL_CMP_exec_KUR_ses() return a pointer to the newly obtained X509 certificate on success, NULL on error. This pointer will be freed implicitly by OSSL_CMP_CTX_free() or CSSL_CMP_CTX_reinit().",
    "OSSL_CMP_exec_IR_ses": "OSSL_CMP_exec_certreq(), OSSL_CMP_exec_IR_ses(), OSSL_CMP_exec_CR_ses(), OSSL_CMP_exec_P10CR_ses(), and OSSL_CMP_exec_KUR_ses() return a pointer to the newly obtained X509 certificate on success, NULL on error. This pointer will be freed implicitly by OSSL_CMP_CTX_free() or CSSL_CMP_CTX_reinit().",
    "OSSL_CMP_exec_CR_ses": "OSSL_CMP_exec_certreq(), OSSL_CMP_exec_IR_ses(), OSSL_CMP_exec_CR_ses(), OSSL_CMP_exec_P10CR_ses(), and OSSL_CMP_exec_KUR_ses() return a pointer to the newly obtained X509 certificate on success, NULL on error. This pointer will be freed implicitly by OSSL_CMP_CTX_free() or CSSL_CMP_CTX_reinit().",
    "OSSL_CMP_exec_P10CR_ses": "OSSL_CMP_exec_certreq(), OSSL_CMP_exec_IR_ses(), OSSL_CMP_exec_CR_ses(), OSSL_CMP_exec_P10CR_ses(), and OSSL_CMP_exec_KUR_ses() return a pointer to the newly obtained X509 certificate on success, NULL on error. This pointer will be freed implicitly by OSSL_CMP_CTX_free() or CSSL_CMP_CTX_reinit().",
    "OSSL_CMP_exec_KUR_ses": "OSSL_CMP_exec_certreq(), OSSL_CMP_exec_IR_ses(), OSSL_CMP_exec_CR_ses(), OSSL_CMP_exec_P10CR_ses(), and OSSL_CMP_exec_KUR_ses() return a pointer to the newly obtained X509 certificate on success, NULL on error. This pointer will be freed implicitly by OSSL_CMP_CTX_free() or CSSL_CMP_CTX_reinit().",
    "CSSL_CMP_CTX_reinit": "OSSL_CMP_exec_certreq(), OSSL_CMP_exec_IR_ses(), OSSL_CMP_exec_CR_ses(), OSSL_CMP_exec_P10CR_ses(), and OSSL_CMP_exec_KUR_ses() return a pointer to the newly obtained X509 certificate on success, NULL on error. This pointer will be freed implicitly by OSSL_CMP_CTX_free() or CSSL_CMP_CTX_reinit().",
    "OSSL_CMP_try_certreq": "OSSL_CMP_try_certreq() returns 1 if the requested certificate is available via L<OSSL_CMP_CTX_get0_newCert(3)> or on successfully aborting a pending certificate request, 0 on error, and -1 in case a 'waiting' status has been received and checkAfter value is available. In the latter case L<OSSL_CMP_CTX_get0_newCert(3)> yields NULL and the output parameter I<checkAfter> has been used to assign the received value unless I<checkAfter> is NULL.",
    "OSSL_CMP_exec_RR_ses": "OSSL_CMP_exec_RR_ses() returns 1 on success, 0 on error.",
    "OSSL_CMP_exec_GENM_ses": "OSSL_CMP_exec_GENM_ses() returns a pointer to the received B<ITAV> sequence on success, NULL on error. This pointer must be freed by the caller.",
    "RSA_set0_key": "RSA_set0_key(), RSA_set0_factors(), RSA_set0_crt_params() and RSA_set0_multi_prime_params() return 1 on success or 0 on failure.",
    "RSA_set0_factors": "RSA_set0_key(), RSA_set0_factors(), RSA_set0_crt_params() and RSA_set0_multi_prime_params() return 1 on success or 0 on failure.",
    "RSA_set0_crt_params": "RSA_set0_key(), RSA_set0_factors(), RSA_set0_crt_params() and RSA_set0_multi_prime_params() return 1 on success or 0 on failure.",
    "RSA_set0_multi_prime_params": "RSA_set0_key(), RSA_set0_factors(), RSA_set0_crt_params() and RSA_set0_multi_prime_params() return 1 on success or 0 on failure.",
    "RSA_get0_n": "RSA_get0_n(), RSA_get0_e(), RSA_get0_d(), RSA_get0_p(), RSA_get0_q(), RSA_get0_dmp1(), RSA_get0_dmq1(), and RSA_get0_iqmp() return the respective value.",
    "RSA_get0_e": "RSA_get0_n(), RSA_get0_e(), RSA_get0_d(), RSA_get0_p(), RSA_get0_q(), RSA_get0_dmp1(), RSA_get0_dmq1(), and RSA_get0_iqmp() return the respective value.",
    "RSA_get0_d": "RSA_get0_n(), RSA_get0_e(), RSA_get0_d(), RSA_get0_p(), RSA_get0_q(), RSA_get0_dmp1(), RSA_get0_dmq1(), and RSA_get0_iqmp() return the respective value.",
    "RSA_get0_p": "RSA_get0_n(), RSA_get0_e(), RSA_get0_d(), RSA_get0_p(), RSA_get0_q(), RSA_get0_dmp1(), RSA_get0_dmq1(), and RSA_get0_iqmp() return the respective value.",
    "RSA_get0_q": "RSA_get0_n(), RSA_get0_e(), RSA_get0_d(), RSA_get0_p(), RSA_get0_q(), RSA_get0_dmp1(), RSA_get0_dmq1(), and RSA_get0_iqmp() return the respective value.",
    "RSA_get0_dmp1": "RSA_get0_n(), RSA_get0_e(), RSA_get0_d(), RSA_get0_p(), RSA_get0_q(), RSA_get0_dmp1(), RSA_get0_dmq1(), and RSA_get0_iqmp() return the respective value.",
    "RSA_get0_dmq1": "RSA_get0_n(), RSA_get0_e(), RSA_get0_d(), RSA_get0_p(), RSA_get0_q(), RSA_get0_dmp1(), RSA_get0_dmq1(), and RSA_get0_iqmp() return the respective value.",
    "RSA_get0_iqmp": "RSA_get0_n(), RSA_get0_e(), RSA_get0_d(), RSA_get0_p(), RSA_get0_q(), RSA_get0_dmp1(), RSA_get0_dmq1(), and RSA_get0_iqmp() return the respective value.",
    "RSA_get0_pss_params": "RSA_get0_pss_params() returns a B<RSA_PSS_PARAMS> pointer, or NULL if there is none.",
    "RSA_get0_multi_prime_factors": "RSA_get0_multi_prime_factors() and RSA_get0_multi_prime_crt_params() return 1 on success or 0 on failure.",
    "RSA_get0_multi_prime_crt_params": "RSA_get0_multi_prime_factors() and RSA_get0_multi_prime_crt_params() return 1 on success or 0 on failure.",
    "RSA_get_multi_prime_extra_count": "RSA_get_multi_prime_extra_count() returns two less than the number of primes in use, which is 0 for traditional RSA and the number of extra primes for multi-prime RSA.",
    "RSA_get_version": "RSA_get_version() returns B<RSA_ASN1_VERSION_MULTI> for multi-prime RSA and B<RSA_ASN1_VERSION_DEFAULT> for normal two-prime RSA, as defined in RFC 8017.",
    "RSA_test_flags": "RSA_test_flags() returns the current state of the flags in the RSA object.",
    "RSA_get0_engine": "RSA_get0_engine() returns the ENGINE set for the RSA object or NULL if no ENGINE has been set.",
    "SSL_set_connect_state": "SSL_set_connect_state() and SSL_set_accept_state() do not return diagnostic information.",
    "SSL_set_accept_state": "SSL_set_connect_state() and SSL_set_accept_state() do not return diagnostic information.",
    "SSL_is_server": "SSL_is_server() returns 1 if B<ssl> is working in server mode or 0 for client mode.",
    "SSL_CTX_set_tmp_ecdh": "SSL_CTX_set_tmp_ecdh() and SSL_set_tmp_ecdh() return 1 on success and 0 on failure.",
    "SSL_set_tmp_ecdh": "SSL_CTX_set_tmp_ecdh() and SSL_set_tmp_ecdh() return 1 on success and 0 on failure.",
    "DSA_OpenSSL": "DSA_OpenSSL() and DSA_get_default_method() return pointers to the respective B<DSA_METHOD>s.",
    "DSA_get_default_method": "DSA_OpenSSL() and DSA_get_default_method() return pointers to the respective B<DSA_METHOD>s.",
    "DSA_set_default_method": "DSA_set_default_method() returns no value.",
    "DSA_set_method": "DSA_set_method() returns nonzero if the provided B<meth> was successfully set as the method for B<dsa> (including unloading the ENGINE handle if the previous method was supplied by an ENGINE).",
    "DSA_new_method": "DSA_new_method() returns NULL and sets an error code that can be obtained by L<ERR_get_error(3)> if the allocation fails. Otherwise it returns a pointer to the newly allocated structure.",
    "SSL_get_extms_support": "SSL_get_extms_support() returns 1 if the current session used extended master secret, 0 if it did not and -1 if a handshake is currently in progress i.e. it is not possible to determine if extended master secret was used.",
    "BN_swap": "BN_swap() does not return a value.",
    "EVP_PKEY_verify_recover_init": "EVP_PKEY_verify_recover_init() and EVP_PKEY_verify_recover() return 1 for success and 0 or a negative value for failure. In particular a return value of -2 indicates the operation is not supported by the public key algorithm.",
    "EVP_PKEY_verify_recover": "EVP_PKEY_verify_recover_init() and EVP_PKEY_verify_recover() return 1 for success and 0 or a negative value for failure. In particular a return value of -2 indicates the operation is not supported by the public key algorithm.",
    "DSA_security_bits": "DSA_security_bits() returns the number of security bits in the key, or -1 if I<dsa> doesn't hold any key parameters.",
    "DSA_bits": "DSA_bits() returns the number of bits in the key, or -1 if I<dsa> doesn't hold any key parameters.",
    "DSA_size": "DSA_size() returns the signature size in bytes, or -1 if I<dsa> doesn't hold any key parameters.",
    "OPENSSL_version_major": "OPENSSL_version_major(), OPENSSL_version_minor() and OPENSSL_version_patch() return the version number parts as integers.",
    "OPENSSL_version_minor": "OPENSSL_version_major(), OPENSSL_version_minor() and OPENSSL_version_patch() return the version number parts as integers.",
    "OPENSSL_version_patch": "OPENSSL_version_major(), OPENSSL_version_minor() and OPENSSL_version_patch() return the version number parts as integers.",
    "OPENSSL_version_pre_release": "OPENSSL_version_pre_release() and OPENSSL_version_build_metadata() return the values of B<OPENSSL_VERSION_PRE_RELEASE> and B<OPENSSL_VERSION_BUILD_METADATA> respectively as constant strings. For any of them that is undefined, the empty string is returned.",
    "OPENSSL_version_build_metadata": "OPENSSL_version_pre_release() and OPENSSL_version_build_metadata() return the values of B<OPENSSL_VERSION_PRE_RELEASE> and B<OPENSSL_VERSION_BUILD_METADATA> respectively as constant strings. For any of them that is undefined, the empty string is returned.",
    "OpenSSL_version": "OpenSSL_version() returns constant strings.",
    "PEM_write_bio_PKCS7_stream": "PEM_write_bio_PKCS7_stream() returns 1 for success or 0 for failure.",
    "ASN1_TIME_set": "ASN1_TIME_set(), ASN1_UTCTIME_set(), ASN1_GENERALIZEDTIME_set(), ASN1_TIME_adj(), ASN1_UTCTIME_adj() and ASN1_GENERALIZEDTIME_set() return a pointer to a time structure or NULL if an error occurred.",
    "ASN1_UTCTIME_set": "ASN1_TIME_set(), ASN1_UTCTIME_set(), ASN1_GENERALIZEDTIME_set(), ASN1_TIME_adj(), ASN1_UTCTIME_adj() and ASN1_GENERALIZEDTIME_set() return a pointer to a time structure or NULL if an error occurred.",
    "ASN1_GENERALIZEDTIME_set": "ASN1_TIME_set(), ASN1_UTCTIME_set(), ASN1_GENERALIZEDTIME_set(), ASN1_TIME_adj(), ASN1_UTCTIME_adj() and ASN1_GENERALIZEDTIME_set() return a pointer to a time structure or NULL if an error occurred.",
    "ASN1_TIME_adj": "ASN1_TIME_set(), ASN1_UTCTIME_set(), ASN1_GENERALIZEDTIME_set(), ASN1_TIME_adj(), ASN1_UTCTIME_adj() and ASN1_GENERALIZEDTIME_set() return a pointer to a time structure or NULL if an error occurred.",
    "ASN1_UTCTIME_adj": "ASN1_TIME_set(), ASN1_UTCTIME_set(), ASN1_GENERALIZEDTIME_set(), ASN1_TIME_adj(), ASN1_UTCTIME_adj() and ASN1_GENERALIZEDTIME_set() return a pointer to a time structure or NULL if an error occurred.",
    "ASN1_TIME_set_string": "ASN1_TIME_set_string(), ASN1_UTCTIME_set_string(), ASN1_GENERALIZEDTIME_set_string() and ASN1_TIME_set_string_X509() return 1 if the time value is successfully set and 0 otherwise.",
    "ASN1_UTCTIME_set_string": "ASN1_TIME_set_string(), ASN1_UTCTIME_set_string(), ASN1_GENERALIZEDTIME_set_string() and ASN1_TIME_set_string_X509() return 1 if the time value is successfully set and 0 otherwise.",
    "ASN1_GENERALIZEDTIME_set_string": "ASN1_TIME_set_string(), ASN1_UTCTIME_set_string(), ASN1_GENERALIZEDTIME_set_string() and ASN1_TIME_set_string_X509() return 1 if the time value is successfully set and 0 otherwise.",
    "ASN1_TIME_set_string_X509": "ASN1_TIME_set_string(), ASN1_UTCTIME_set_string(), ASN1_GENERALIZEDTIME_set_string() and ASN1_TIME_set_string_X509() return 1 if the time value is successfully set and 0 otherwise.",
    "ASN1_TIME_normalize": "ASN1_TIME_normalize() returns 1 on success, and 0 on error.",
    "ASN1_TIME_check": "ASN1_TIME_check(), ASN1_UTCTIME_check and ASN1_GENERALIZEDTIME_check() return 1 if the structure is syntactically correct and 0 otherwise.",
    "ASN1_GENERALIZEDTIME_check": "ASN1_TIME_check(), ASN1_UTCTIME_check and ASN1_GENERALIZEDTIME_check() return 1 if the structure is syntactically correct and 0 otherwise.",
    "ASN1_TIME_print": "ASN1_TIME_print(), ASN1_UTCTIME_print() and ASN1_GENERALIZEDTIME_print() return 1 if the time is successfully printed out and 0 if an I/O error occurred an error occurred (I/O error or invalid time format).",
    "ASN1_UTCTIME_print": "ASN1_TIME_print(), ASN1_UTCTIME_print() and ASN1_GENERALIZEDTIME_print() return 1 if the time is successfully printed out and 0 if an I/O error occurred an error occurred (I/O error or invalid time format).",
    "ASN1_GENERALIZEDTIME_print": "ASN1_TIME_print(), ASN1_UTCTIME_print() and ASN1_GENERALIZEDTIME_print() return 1 if the time is successfully printed out and 0 if an I/O error occurred an error occurred (I/O error or invalid time format).",
    "ASN1_TIME_to_tm": "ASN1_TIME_to_tm() returns 1 if the time is successfully parsed and 0 if an error occurred (invalid time format).",
    "ASN1_TIME_diff": "ASN1_TIME_diff() returns 1 for success and 0 for failure. It can fail if the passed-in time structure has invalid syntax, for example.",
    "ASN1_TIME_cmp_time_t": "ASN1_TIME_cmp_time_t() and ASN1_UTCTIME_cmp_time_t() return -1 if I<s> is before I<t>, 0 if I<s> equals I<t>, or 1 if I<s> is after I<t>. -2 is returned on error.",
    "ASN1_UTCTIME_cmp_time_t": "ASN1_TIME_cmp_time_t() and ASN1_UTCTIME_cmp_time_t() return -1 if I<s> is before I<t>, 0 if I<s> equals I<t>, or 1 if I<s> is after I<t>. -2 is returned on error.",
    "ASN1_TIME_compare": "ASN1_TIME_compare() returns -1 if I<a> is before I<b>, 0 if I<a> equals I<b>, or 1 if I<a> is after I<b>. -2 is returned on error.",
    "ASN1_TIME_to_generalizedtime": "ASN1_TIME_to_generalizedtime() returns a pointer to the appropriate time structure on success or NULL if an error occurred.",
    "ASN1_TIME_dup": "ASN1_TIME_dup(), ASN1_UTCTIME_dup() and ASN1_GENERALIZEDTIME_dup() return a pointer to a time structure or NULL if an error occurred.",
    "ASN1_UTCTIME_dup": "ASN1_TIME_dup(), ASN1_UTCTIME_dup() and ASN1_GENERALIZEDTIME_dup() return a pointer to a time structure or NULL if an error occurred.",
    "ASN1_GENERALIZEDTIME_dup": "ASN1_TIME_dup(), ASN1_UTCTIME_dup() and ASN1_GENERALIZEDTIME_dup() return a pointer to a time structure or NULL if an error occurred.",
    "CMS_add1_recipient_cert": "CMS_add1_recipient_cert() and CMS_add0_recipient_key() return an internal pointer to the CMS_RecipientInfo structure just added or NULL if an error occurs.",
    "CMS_add0_recipient_key": "CMS_add1_recipient_cert() and CMS_add0_recipient_key() return an internal pointer to the CMS_RecipientInfo structure just added or NULL if an error occurs.",
    "SSL_want": "The following return values can currently occur for SSL_want():",
    "SSL_CTX_set_cert_verify_callback": "SSL_CTX_set_cert_verify_callback() does not return a value.",
    "SSL_want_nothing": "SSL_want_nothing(), SSL_want_read(), SSL_want_write(), SSL_want_x509_lookup(), SSL_want_retry_verify(), SSL_want_async(), SSL_want_async_job(), and SSL_want_client_hello_cb() return 1 when the corresponding condition is true or 0 otherwise.",
    "SSL_want_read": "SSL_want_nothing(), SSL_want_read(), SSL_want_write(), SSL_want_x509_lookup(), SSL_want_retry_verify(), SSL_want_async(), SSL_want_async_job(), and SSL_want_client_hello_cb() return 1 when the corresponding condition is true or 0 otherwise.",
    "SSL_want_write": "SSL_want_nothing(), SSL_want_read(), SSL_want_write(), SSL_want_x509_lookup(), SSL_want_retry_verify(), SSL_want_async(), SSL_want_async_job(), and SSL_want_client_hello_cb() return 1 when the corresponding condition is true or 0 otherwise.",
    "SSL_want_x509_lookup": "SSL_want_nothing(), SSL_want_read(), SSL_want_write(), SSL_want_x509_lookup(), SSL_want_retry_verify(), SSL_want_async(), SSL_want_async_job(), and SSL_want_client_hello_cb() return 1 when the corresponding condition is true or 0 otherwise.",
    "SSL_want_retry_verify": "SSL_want_nothing(), SSL_want_read(), SSL_want_write(), SSL_want_x509_lookup(), SSL_want_retry_verify(), SSL_want_async(), SSL_want_async_job(), and SSL_want_client_hello_cb() return 1 when the corresponding condition is true or 0 otherwise.",
    "SSL_want_async": "SSL_want_nothing(), SSL_want_read(), SSL_want_write(), SSL_want_x509_lookup(), SSL_want_retry_verify(), SSL_want_async(), SSL_want_async_job(), and SSL_want_client_hello_cb() return 1 when the corresponding condition is true or 0 otherwise.",
    "SSL_want_async_job": "SSL_want_nothing(), SSL_want_read(), SSL_want_write(), SSL_want_x509_lookup(), SSL_want_retry_verify(), SSL_want_async(), SSL_want_async_job(), and SSL_want_client_hello_cb() return 1 when the corresponding condition is true or 0 otherwise.",
    "SSL_want_client_hello_cb": "SSL_want_nothing(), SSL_want_read(), SSL_want_write(), SSL_want_x509_lookup(), SSL_want_retry_verify(), SSL_want_async(), SSL_want_async_job(), and SSL_want_client_hello_cb() return 1 when the corresponding condition is true or 0 otherwise.",
    "d2i_PKCS8PrivateKey_bio": "d2i_PKCS8PrivateKey_bio() and d2i_PKCS8PrivateKey_fp() return a valid B<EVP_PKEY> structure or NULL if an error occurred.",
    "d2i_PKCS8PrivateKey_fp": "d2i_PKCS8PrivateKey_bio() and d2i_PKCS8PrivateKey_fp() return a valid B<EVP_PKEY> structure or NULL if an error occurred.",
    "i2d_PKCS8PrivateKey_bio": "i2d_PKCS8PrivateKey_bio(), i2d_PKCS8PrivateKey_fp(), i2d_PKCS8PrivateKey_nid_bio() and i2d_PKCS8PrivateKey_nid_fp() return 1 on success or 0 on error.",
    "i2d_PKCS8PrivateKey_fp": "i2d_PKCS8PrivateKey_bio(), i2d_PKCS8PrivateKey_fp(), i2d_PKCS8PrivateKey_nid_bio() and i2d_PKCS8PrivateKey_nid_fp() return 1 on success or 0 on error.",
    "i2d_PKCS8PrivateKey_nid_bio": "i2d_PKCS8PrivateKey_bio(), i2d_PKCS8PrivateKey_fp(), i2d_PKCS8PrivateKey_nid_bio() and i2d_PKCS8PrivateKey_nid_fp() return 1 on success or 0 on error.",
    "i2d_PKCS8PrivateKey_nid_fp": "i2d_PKCS8PrivateKey_bio(), i2d_PKCS8PrivateKey_fp(), i2d_PKCS8PrivateKey_nid_bio() and i2d_PKCS8PrivateKey_nid_fp() return 1 on success or 0 on error.",
    "CMS_verify": "CMS_verify() returns 1 for a successful verification and zero if an error occurred.",
    "CMS_get0_signers": "CMS_get0_signers() returns all signers or NULL if an error occurred.",
    "PKCS12_parse": "PKCS12_parse() returns 1 for success and zero if an error occurred.",
    "SSL_SESSION_set1_master_key": "SSL_SESSION_set1_master_key() returns 1 on success or 0 on failure.",
    "CMS_final": "CMS_final() returns 1 for success or 0 for failure.",
    "EVP_SIGNATURE_fetch": "EVP_SIGNATURE_fetch() returns a pointer to an B<EVP_SIGNATURE> for success or B<NULL> for failure.",
    "EVP_SIGNATURE_up_ref": "EVP_SIGNATURE_up_ref() returns 1 for success or 0 otherwise.",
    "EVP_SIGNATURE_names_do_all": "EVP_SIGNATURE_names_do_all() returns 1 if the callback was called for all names. A return value of 0 means that the callback was not called for any names.",
    "EVP_SIGNATURE_gettable_ctx_params": "EVP_SIGNATURE_gettable_ctx_params() and EVP_SIGNATURE_settable_ctx_params() return a constant B<OSSL_PARAM> array or NULL on error.",
    "EVP_SIGNATURE_settable_ctx_params": "EVP_SIGNATURE_gettable_ctx_params() and EVP_SIGNATURE_settable_ctx_params() return a constant B<OSSL_PARAM> array or NULL on error.",
    "OSSL_ENCODER_CTX_new": "OSSL_ENCODER_CTX_new() returns a pointer to a B<OSSL_ENCODER_CTX>, or NULL if the context structure couldn't be allocated.",
    "OSSL_ENCODER_settable_ctx_params": "OSSL_ENCODER_settable_ctx_params() returns an L<OSSL_PARAM(3)> array, or NULL if none is available.",
    "OSSL_ENCODER_CTX_set_params": "OSSL_ENCODER_CTX_set_params() returns 1 if all recognised parameters were valid, or 0 if one of them was invalid or caused some other failure in the implementation.",
    "OSSL_ENCODER_CTX_add_encoder": "OSSL_ENCODER_CTX_add_encoder(), OSSL_ENCODER_CTX_add_extra(), OSSL_ENCODER_CTX_set_construct(), OSSL_ENCODER_CTX_set_construct_data() and OSSL_ENCODER_CTX_set_cleanup() return 1 on success, or 0 on failure.",
    "OSSL_ENCODER_CTX_add_extra": "OSSL_ENCODER_CTX_add_encoder(), OSSL_ENCODER_CTX_add_extra(), OSSL_ENCODER_CTX_set_construct(), OSSL_ENCODER_CTX_set_construct_data() and OSSL_ENCODER_CTX_set_cleanup() return 1 on success, or 0 on failure.",
    "OSSL_ENCODER_CTX_set_construct": "OSSL_ENCODER_CTX_add_encoder(), OSSL_ENCODER_CTX_add_extra(), OSSL_ENCODER_CTX_set_construct(), OSSL_ENCODER_CTX_set_construct_data() and OSSL_ENCODER_CTX_set_cleanup() return 1 on success, or 0 on failure.",
    "OSSL_ENCODER_CTX_set_construct_data": "OSSL_ENCODER_CTX_add_encoder(), OSSL_ENCODER_CTX_add_extra(), OSSL_ENCODER_CTX_set_construct(), OSSL_ENCODER_CTX_set_construct_data() and OSSL_ENCODER_CTX_set_cleanup() return 1 on success, or 0 on failure.",
    "OSSL_ENCODER_CTX_set_cleanup": "OSSL_ENCODER_CTX_add_encoder(), OSSL_ENCODER_CTX_add_extra(), OSSL_ENCODER_CTX_set_construct(), OSSL_ENCODER_CTX_set_construct_data() and OSSL_ENCODER_CTX_set_cleanup() return 1 on success, or 0 on failure.",
    "OSSL_ENCODER_CTX_get_num_encoders": "OSSL_ENCODER_CTX_get_num_encoders() returns the current number of encoders. It returns 0 if I<ctx> is NULL.",
    "OSSL_ENCODER_INSTANCE_get_encoder": "OSSL_ENCODER_INSTANCE_get_encoder() returns an B<OSSL_ENCODER> pointer on success, or NULL on failure.",
    "OSSL_ENCODER_INSTANCE_get_encoder_ctx": "OSSL_ENCODER_INSTANCE_get_encoder_ctx() returns a provider context pointer on success, or NULL on failure.",
    "OSSL_ENCODER_INSTANCE_get_output_type": "OSSL_ENCODER_INSTANCE_get_output_type() returns a string with the name of the output type.",
    "OSSL_ENCODER_INSTANCE_get_output_structure": "OSSL_ENCODER_INSTANCE_get_output_structure() returns a string with the name of the output structure.",
    "BIO_new_CMS": "BIO_new_CMS() returns a BIO chain when successful or NULL if an error occurred. The error can be obtained from ERR_get_error(3).",
    "d2i_PrivateKey_ex": "The d2i_PrivateKey_ex(), d2i_PrivateKey(), d2i_AutoPrivateKey_ex(), d2i_AutoPrivateKey(), d2i_PrivateKey_ex_bio(), d2i_PrivateKey_bio(), d2i_PrivateKey_ex_fp(), d2i_PrivateKey_fp(), d2i_PublicKey(), d2i_KeyParams() and d2i_KeyParams_bio() functions return a valid B<EVP_PKEY> structure or NULL if an error occurs. The error code can be obtained by calling L<ERR_get_error(3)>.",
    "d2i_PrivateKey": "The d2i_PrivateKey_ex(), d2i_PrivateKey(), d2i_AutoPrivateKey_ex(), d2i_AutoPrivateKey(), d2i_PrivateKey_ex_bio(), d2i_PrivateKey_bio(), d2i_PrivateKey_ex_fp(), d2i_PrivateKey_fp(), d2i_PublicKey(), d2i_KeyParams() and d2i_KeyParams_bio() functions return a valid B<EVP_PKEY> structure or NULL if an error occurs. The error code can be obtained by calling L<ERR_get_error(3)>.",
    "d2i_AutoPrivateKey_ex": "The d2i_PrivateKey_ex(), d2i_PrivateKey(), d2i_AutoPrivateKey_ex(), d2i_AutoPrivateKey(), d2i_PrivateKey_ex_bio(), d2i_PrivateKey_bio(), d2i_PrivateKey_ex_fp(), d2i_PrivateKey_fp(), d2i_PublicKey(), d2i_KeyParams() and d2i_KeyParams_bio() functions return a valid B<EVP_PKEY> structure or NULL if an error occurs. The error code can be obtained by calling L<ERR_get_error(3)>.",
    "d2i_AutoPrivateKey": "The d2i_PrivateKey_ex(), d2i_PrivateKey(), d2i_AutoPrivateKey_ex(), d2i_AutoPrivateKey(), d2i_PrivateKey_ex_bio(), d2i_PrivateKey_bio(), d2i_PrivateKey_ex_fp(), d2i_PrivateKey_fp(), d2i_PublicKey(), d2i_KeyParams() and d2i_KeyParams_bio() functions return a valid B<EVP_PKEY> structure or NULL if an error occurs. The error code can be obtained by calling L<ERR_get_error(3)>.",
    "d2i_PrivateKey_ex_bio": "The d2i_PrivateKey_ex(), d2i_PrivateKey(), d2i_AutoPrivateKey_ex(), d2i_AutoPrivateKey(), d2i_PrivateKey_ex_bio(), d2i_PrivateKey_bio(), d2i_PrivateKey_ex_fp(), d2i_PrivateKey_fp(), d2i_PublicKey(), d2i_KeyParams() and d2i_KeyParams_bio() functions return a valid B<EVP_PKEY> structure or NULL if an error occurs. The error code can be obtained by calling L<ERR_get_error(3)>.",
    "d2i_PrivateKey_bio": "The d2i_PrivateKey_ex(), d2i_PrivateKey(), d2i_AutoPrivateKey_ex(), d2i_AutoPrivateKey(), d2i_PrivateKey_ex_bio(), d2i_PrivateKey_bio(), d2i_PrivateKey_ex_fp(), d2i_PrivateKey_fp(), d2i_PublicKey(), d2i_KeyParams() and d2i_KeyParams_bio() functions return a valid B<EVP_PKEY> structure or NULL if an error occurs. The error code can be obtained by calling L<ERR_get_error(3)>.",
    "d2i_PrivateKey_ex_fp": "The d2i_PrivateKey_ex(), d2i_PrivateKey(), d2i_AutoPrivateKey_ex(), d2i_AutoPrivateKey(), d2i_PrivateKey_ex_bio(), d2i_PrivateKey_bio(), d2i_PrivateKey_ex_fp(), d2i_PrivateKey_fp(), d2i_PublicKey(), d2i_KeyParams() and d2i_KeyParams_bio() functions return a valid B<EVP_PKEY> structure or NULL if an error occurs. The error code can be obtained by calling L<ERR_get_error(3)>.",
    "d2i_PrivateKey_fp": "The d2i_PrivateKey_ex(), d2i_PrivateKey(), d2i_AutoPrivateKey_ex(), d2i_AutoPrivateKey(), d2i_PrivateKey_ex_bio(), d2i_PrivateKey_bio(), d2i_PrivateKey_ex_fp(), d2i_PrivateKey_fp(), d2i_PublicKey(), d2i_KeyParams() and d2i_KeyParams_bio() functions return a valid B<EVP_PKEY> structure or NULL if an error occurs. The error code can be obtained by calling L<ERR_get_error(3)>.",
    "d2i_PublicKey": "The d2i_PrivateKey_ex(), d2i_PrivateKey(), d2i_AutoPrivateKey_ex(), d2i_AutoPrivateKey(), d2i_PrivateKey_ex_bio(), d2i_PrivateKey_bio(), d2i_PrivateKey_ex_fp(), d2i_PrivateKey_fp(), d2i_PublicKey(), d2i_KeyParams() and d2i_KeyParams_bio() functions return a valid B<EVP_PKEY> structure or NULL if an error occurs. The error code can be obtained by calling L<ERR_get_error(3)>.",
    "d2i_KeyParams": "The d2i_PrivateKey_ex(), d2i_PrivateKey(), d2i_AutoPrivateKey_ex(), d2i_AutoPrivateKey(), d2i_PrivateKey_ex_bio(), d2i_PrivateKey_bio(), d2i_PrivateKey_ex_fp(), d2i_PrivateKey_fp(), d2i_PublicKey(), d2i_KeyParams() and d2i_KeyParams_bio() functions return a valid B<EVP_PKEY> structure or NULL if an error occurs. The error code can be obtained by calling L<ERR_get_error(3)>.",
    "d2i_KeyParams_bio": "The d2i_PrivateKey_ex(), d2i_PrivateKey(), d2i_AutoPrivateKey_ex(), d2i_AutoPrivateKey(), d2i_PrivateKey_ex_bio(), d2i_PrivateKey_bio(), d2i_PrivateKey_ex_fp(), d2i_PrivateKey_fp(), d2i_PublicKey(), d2i_KeyParams() and d2i_KeyParams_bio() functions return a valid B<EVP_PKEY> structure or NULL if an error occurs. The error code can be obtained by calling L<ERR_get_error(3)>.",
    "i2d_PrivateKey": "i2d_PrivateKey(), i2d_PrivateKey_bio(), i2d_PrivateKey_fp(), i2d_PublicKey(), i2d_KeyParams() i2d_KeyParams_bio() return the number of bytes successfully encoded or a negative value if an error occurs. The error code can be obtained by calling L<ERR_get_error(3)>.",
    "i2d_PrivateKey_bio": "i2d_PrivateKey(), i2d_PrivateKey_bio(), i2d_PrivateKey_fp(), i2d_PublicKey(), i2d_KeyParams() i2d_KeyParams_bio() return the number of bytes successfully encoded or a negative value if an error occurs. The error code can be obtained by calling L<ERR_get_error(3)>.",
    "i2d_PrivateKey_fp": "i2d_PrivateKey(), i2d_PrivateKey_bio(), i2d_PrivateKey_fp(), i2d_PublicKey(), i2d_KeyParams() i2d_KeyParams_bio() return the number of bytes successfully encoded or a negative value if an error occurs. The error code can be obtained by calling L<ERR_get_error(3)>.",
    "i2d_PublicKey": "i2d_PrivateKey(), i2d_PrivateKey_bio(), i2d_PrivateKey_fp(), i2d_PublicKey(), i2d_KeyParams() i2d_KeyParams_bio() return the number of bytes successfully encoded or a negative value if an error occurs. The error code can be obtained by calling L<ERR_get_error(3)>.",
    "i2d_KeyParams": "i2d_PrivateKey(), i2d_PrivateKey_bio(), i2d_PrivateKey_fp(), i2d_PublicKey(), i2d_KeyParams() i2d_KeyParams_bio() return the number of bytes successfully encoded or a negative value if an error occurs. The error code can be obtained by calling L<ERR_get_error(3)>.",
    "i2d_KeyParams_bio": "i2d_PrivateKey(), i2d_PrivateKey_bio(), i2d_PrivateKey_fp(), i2d_PublicKey(), i2d_KeyParams() i2d_KeyParams_bio() return the number of bytes successfully encoded or a negative value if an error occurs. The error code can be obtained by calling L<ERR_get_error(3)>.",
    "BIO_f_ssl": "BIO_f_ssl() returns the SSL B<BIO_METHOD> structure.",
    "BIO_set_ssl": "BIO_set_ssl(), BIO_get_ssl(), BIO_set_ssl_mode(), BIO_set_ssl_renegotiate_bytes(), BIO_set_ssl_renegotiate_timeout() and BIO_get_num_renegotiates() return 1 on success or a value which is less than or equal to 0 if an error occurred.",
    "BIO_get_ssl": "BIO_set_ssl(), BIO_get_ssl(), BIO_set_ssl_mode(), BIO_set_ssl_renegotiate_bytes(), BIO_set_ssl_renegotiate_timeout() and BIO_get_num_renegotiates() return 1 on success or a value which is less than or equal to 0 if an error occurred.",
    "BIO_set_ssl_mode": "BIO_set_ssl(), BIO_get_ssl(), BIO_set_ssl_mode(), BIO_set_ssl_renegotiate_bytes(), BIO_set_ssl_renegotiate_timeout() and BIO_get_num_renegotiates() return 1 on success or a value which is less than or equal to 0 if an error occurred.",
    "BIO_set_ssl_renegotiate_bytes": "BIO_set_ssl(), BIO_get_ssl(), BIO_set_ssl_mode(), BIO_set_ssl_renegotiate_bytes(), BIO_set_ssl_renegotiate_timeout() and BIO_get_num_renegotiates() return 1 on success or a value which is less than or equal to 0 if an error occurred.",
    "BIO_set_ssl_renegotiate_timeout": "BIO_set_ssl(), BIO_get_ssl(), BIO_set_ssl_mode(), BIO_set_ssl_renegotiate_bytes(), BIO_set_ssl_renegotiate_timeout() and BIO_get_num_renegotiates() return 1 on success or a value which is less than or equal to 0 if an error occurred.",
    "BIO_get_num_renegotiates": "BIO_set_ssl(), BIO_get_ssl(), BIO_set_ssl_mode(), BIO_set_ssl_renegotiate_bytes(), BIO_set_ssl_renegotiate_timeout() and BIO_get_num_renegotiates() return 1 on success or a value which is less than or equal to 0 if an error occurred.",
    "BIO_new_ssl": "BIO_new_ssl(), BIO_new_ssl_connect() and BIO_new_buffer_ssl_connect() return a valid B<BIO> structure on success or B<NULL> if an error occurred.",
    "BIO_new_ssl_connect": "BIO_new_ssl(), BIO_new_ssl_connect() and BIO_new_buffer_ssl_connect() return a valid B<BIO> structure on success or B<NULL> if an error occurred.",
    "BIO_new_buffer_ssl_connect": "BIO_new_ssl(), BIO_new_ssl_connect() and BIO_new_buffer_ssl_connect() return a valid B<BIO> structure on success or B<NULL> if an error occurred.",
    "BIO_ssl_copy_session_id": "BIO_ssl_copy_session_id() returns 1 on success or 0 on error.",
    "BIO_do_handshake": "BIO_do_handshake() returns 1 if the connection was established successfully. A zero or negative value is returned if the connection could not be established.",
    "SSL_CTX_set_mode": "SSL_CTX_set_mode() and SSL_set_mode() return the new mode bit-mask after adding B<mode>.",
    "SSL_set_mode": "SSL_CTX_set_mode() and SSL_set_mode() return the new mode bit-mask after adding B<mode>.",
    "SSL_CTX_get_mode": "SSL_CTX_get_mode() and SSL_get_mode() return the current bit-mask.",
    "SSL_get_mode": "SSL_CTX_get_mode() and SSL_get_mode() return the current bit-mask.",
    "OSSL_LIB_CTX_new": "OSSL_LIB_CTX_new(), OSSL_LIB_CTX_get0_global_default() and OSSL_LIB_CTX_set0_default() return a library context pointer on success, or NULL on error.",
    "OSSL_LIB_CTX_get0_global_default": "OSSL_LIB_CTX_new(), OSSL_LIB_CTX_get0_global_default() and OSSL_LIB_CTX_set0_default() return a library context pointer on success, or NULL on error.",
    "OSSL_LIB_CTX_set0_default": "OSSL_LIB_CTX_new(), OSSL_LIB_CTX_get0_global_default() and OSSL_LIB_CTX_set0_default() return a library context pointer on success, or NULL on error.",
    "OSSL_LIB_CTX_free": "OSSL_LIB_CTX_free() doesn't return any value.",
    "EVP_ENCODE_CTX_new": "EVP_ENCODE_CTX_new() returns a pointer to the newly allocated EVP_ENCODE_CTX object or NULL on error.",
    "EVP_ENCODE_CTX_num": "EVP_ENCODE_CTX_num() returns the number of bytes pending encoding or decoding in B<ctx>.",
    "EVP_EncodeUpdate": "EVP_EncodeUpdate() returns 0 on error or 1 on success.",
    "EVP_EncodeBlock": "EVP_EncodeBlock() returns the number of bytes encoded excluding the NUL terminator.",
    "EVP_DecodeUpdate": "EVP_DecodeUpdate() returns -1 on error and 0 or 1 on success. If 0 is returned then no more non-padding base 64 characters are expected.",
    "EVP_DecodeFinal": "EVP_DecodeFinal() returns -1 on error or 1 on success.",
    "EVP_DecodeBlock": "EVP_DecodeBlock() returns the length of the data decoded or -1 on error.",
    "OSSL_trace_set_channel": "OSSL_trace_set_channel(), OSSL_trace_set_prefix(), OSSL_trace_set_suffix(), and OSSL_trace_set_callback() return 1 on success, or 0 on failure.",
    "OSSL_trace_set_prefix": "OSSL_trace_set_channel(), OSSL_trace_set_prefix(), OSSL_trace_set_suffix(), and OSSL_trace_set_callback() return 1 on success, or 0 on failure.",
    "OSSL_trace_set_suffix": "OSSL_trace_set_channel(), OSSL_trace_set_prefix(), OSSL_trace_set_suffix(), and OSSL_trace_set_callback() return 1 on success, or 0 on failure.",
    "OSSL_trace_set_callback": "OSSL_trace_set_channel(), OSSL_trace_set_prefix(), OSSL_trace_set_suffix(), and OSSL_trace_set_callback() return 1 on success, or 0 on failure.",
    "RSA_public_encrypt": "RSA_public_encrypt() returns the size of the encrypted data (i.e., RSA_size(B<rsa>)). RSA_private_decrypt() returns the size of the recovered plaintext. A return value of 0 is not an error and means only that the plaintext was empty.",
    "RSA_private_decrypt": "RSA_public_encrypt() returns the size of the encrypted data (i.e., RSA_size(B<rsa>)). RSA_private_decrypt() returns the size of the recovered plaintext. A return value of 0 is not an error and means only that the plaintext was empty.",
    "RAND_bytes": "RAND_bytes() and RAND_priv_bytes() return 1 on success, -1 if not supported by the current RAND method, or 0 on other failure. The error code can be obtained by L<ERR_get_error(3)>.",
    "RAND_priv_bytes": "RAND_bytes() and RAND_priv_bytes() return 1 on success, -1 if not supported by the current RAND method, or 0 on other failure. The error code can be obtained by L<ERR_get_error(3)>.",
    "DH_bits": "DH_bits() returns the number of bits in the key, or -1 if B<dh> doesn't hold any key parameters.",
    "DH_size": "DH_size() returns the prime size of Diffie-Hellman in bytes, or -1 if B<dh> doesn't hold any key parameters.",
    "DH_security_bits": "DH_security_bits() returns the number of security bits, or -1 if B<dh> doesn't hold any key parameters.",
    "ERR_load_crypto_strings": "ERR_load_crypto_strings(), SSL_load_error_strings() and ERR_free_strings() return no values.",
    "SSL_load_error_strings": "ERR_load_crypto_strings(), SSL_load_error_strings() and ERR_free_strings() return no values.",
    "ERR_free_strings": "ERR_load_crypto_strings(), SSL_load_error_strings() and ERR_free_strings() return no values.",
    "DSA_set0_pqg": "DSA_set0_pqg() and DSA_set0_key() return 1 on success or 0 on failure.",
    "DSA_set0_key": "DSA_set0_pqg() and DSA_set0_key() return 1 on success or 0 on failure.",
    "DSA_test_flags": "DSA_test_flags() returns the current state of the flags in the DSA object.",
    "DSA_get0_engine": "DSA_get0_engine() returns the ENGINE set for the DSA object or NULL if no ENGINE has been set.",
    "d2i_X509_AUX": "d2i_X509_AUX() returns a valid B<X509> structure or NULL if an error occurred.",
    "i2d_X509_AUX": "i2d_X509_AUX() returns the length of encoded data or -1 on error.",
    "i2d_re_X509_tbs": "i2d_re_X509_tbs(), i2d_re_X509_CRL_tbs() and i2d_re_X509_REQ_tbs() return the length of encoded data or 0 on error.",
    "i2d_re_X509_CRL_tbs": "i2d_re_X509_tbs(), i2d_re_X509_CRL_tbs() and i2d_re_X509_REQ_tbs() return the length of encoded data or 0 on error.",
    "i2d_re_X509_REQ_tbs": "i2d_re_X509_tbs(), i2d_re_X509_CRL_tbs() and i2d_re_X509_REQ_tbs() return the length of encoded data or 0 on error.",
    "BIO_ADDR_hostname_string": "The string producing functions BIO_ADDR_hostname_string(), BIO_ADDR_service_string() and BIO_ADDR_path_string() will return B<NULL> on error and leave an error indication on the OpenSSL error stack.",
    "BIO_ADDR_service_string": "The string producing functions BIO_ADDR_hostname_string(), BIO_ADDR_service_string() and BIO_ADDR_path_string() will return B<NULL> on error and leave an error indication on the OpenSSL error stack.",
    "BIO_ADDR_path_string": "The string producing functions BIO_ADDR_hostname_string(), BIO_ADDR_service_string() and BIO_ADDR_path_string() will return B<NULL> on error and leave an error indication on the OpenSSL error stack.",
    "PKCS12_PBE_keyivgen": "PKCS12_PBE_keyivgen(), PKCS12_PBE_keyivgen_ex() return 1 on success or 0 on error.",
    "PKCS12_PBE_keyivgen_ex": "PKCS12_PBE_keyivgen(), PKCS12_PBE_keyivgen_ex() return 1 on success or 0 on error.",
    "PKCS12_pbe_crypt": "PKCS12_pbe_crypt() and PKCS12_pbe_crypt_ex() return a buffer containing the output or NULL if an error occurred.",
    "PKCS12_pbe_crypt_ex": "PKCS12_pbe_crypt() and PKCS12_pbe_crypt_ex() return a buffer containing the output or NULL if an error occurred.",
    "OSSL_HTTP_adapt_proxy": "OSSL_HTTP_adapt_proxy() returns NULL if no proxy is to be used, otherwise a constant proxy hostname string, which is either the proxy name handed in or an environment variable value.",
    "OSSL_parse_url": "OSSL_parse_url(), OSSL_HTTP_parse_url(), and OCSP_parse_url() return 1 on success, 0 on error.",
    "OSSL_HTTP_parse_url": "OSSL_parse_url(), OSSL_HTTP_parse_url(), and OCSP_parse_url() return 1 on success, 0 on error.",
    "OCSP_parse_url": "OSSL_parse_url(), OSSL_HTTP_parse_url(), and OCSP_parse_url() return 1 on success, 0 on error.",
    "X509_get_signature_nid": "X509_get_signature_nid(), X509_REQ_get_signature_nid() and X509_CRL_get_signature_nid() return a NID.",
    "X509_REQ_get_signature_nid": "X509_get_signature_nid(), X509_REQ_get_signature_nid() and X509_CRL_get_signature_nid() return a NID.",
    "X509_CRL_get_signature_nid": "X509_get_signature_nid(), X509_REQ_get_signature_nid() and X509_CRL_get_signature_nid() return a NID.",
    "X509_get0_signature": "X509_get0_signature(), X509_REQ_get0_signature() and X509_CRL_get0_signature() do not return values.",
    "X509_REQ_get0_signature": "X509_get0_signature(), X509_REQ_get0_signature() and X509_CRL_get0_signature() do not return values.",
    "X509_CRL_get0_signature": "X509_get0_signature(), X509_REQ_get0_signature() and X509_CRL_get0_signature() do not return values.",
    "X509_get_signature_info": "X509_get_signature_info() returns 1 if the signature information returned is valid or 0 if the information is not available (e.g. unknown algorithms or malformed parameters).",
    "X509_REQ_set1_signature_algo": "X509_REQ_set1_signature_algo() returns 0 on success; or 1 on an error (e.g. null ALGO pointer). X509_REQ_set0_signature does not return an error value.",
    "X509_new": "If the allocation fails, X509_new() returns NULL and sets an error code that can be obtained by L<ERR_get_error(3)>. Otherwise it returns a pointer to the newly allocated structure.",
    "X509_up_ref": "X509_up_ref() returns 1 for success and 0 for failure.",
    "X509_chain_up_ref": "X509_chain_up_ref() returns a copy of the stack or NULL if an error occurred.",
    "DSA_new": "If the allocation fails, DSA_new() returns B<NULL> and sets an error code that can be obtained by L<ERR_get_error(3)>. Otherwise it returns a pointer to the newly allocated structure.",
    "DSA_free": "DSA_free() returns no value.",
    "OSSL_DECODER_fetch": "OSSL_DECODER_fetch() returns a pointer to an OSSL_DECODER object, or NULL on error.",
    "OSSL_DECODER_up_ref": "OSSL_DECODER_up_ref() returns 1 on success, or 0 on error.",
    "OSSL_DECODER_free": "OSSL_DECODER_free() doesn't return any value.",
    "OSSL_DECODER_get0_provider": "OSSL_DECODER_get0_provider() returns a pointer to a provider object, or NULL on error.",
    "OSSL_DECODER_get0_properties": "OSSL_DECODER_get0_properties() returns a pointer to a property definition string, or NULL on error.",
    "OSSL_DECODER_is_a": "OSSL_DECODER_is_a() returns 1 if I<decoder> was identifiable, otherwise 0.",
    "OSSL_DECODER_get0_name": "OSSL_DECODER_get0_name() returns the algorithm name from the provided implementation for the given I<decoder>. Note that the I<decoder> may have multiple synonyms associated with it. In this case the first name from the algorithm definition is returned. Ownership of the returned string is retained by the I<decoder> object and should not be freed by the caller.",
    "OSSL_DECODER_get0_description": "OSSL_DECODER_get0_description() returns a pointer to a decription, or NULL if there isn't one.",
    "OSSL_DECODER_names_do_all": "OSSL_DECODER_names_do_all() returns 1 if the callback was called for all names. A return value of 0 means that the callback was not called for any names.",
    "PEM_write_bio_CMS_stream": "PEM_write_bio_CMS_stream() returns 1 for success or 0 for failure.",
    "BIO_s_socket": "BIO_s_socket() returns the socket BIO method.",
    "BIO_new_socket": "BIO_new_socket() returns the newly allocated BIO or NULL is an error occurred.",
    "EVP_PKEY_set1_RSA": "EVP_PKEY_set1_RSA(), EVP_PKEY_set1_DSA(), EVP_PKEY_set1_DH() and EVP_PKEY_set1_EC_KEY() return 1 for success or 0 for failure.",
    "EVP_PKEY_set1_DSA": "EVP_PKEY_set1_RSA(), EVP_PKEY_set1_DSA(), EVP_PKEY_set1_DH() and EVP_PKEY_set1_EC_KEY() return 1 for success or 0 for failure.",
    "EVP_PKEY_set1_DH": "EVP_PKEY_set1_RSA(), EVP_PKEY_set1_DSA(), EVP_PKEY_set1_DH() and EVP_PKEY_set1_EC_KEY() return 1 for success or 0 for failure.",
    "EVP_PKEY_set1_EC_KEY": "EVP_PKEY_set1_RSA(), EVP_PKEY_set1_DSA(), EVP_PKEY_set1_DH() and EVP_PKEY_set1_EC_KEY() return 1 for success or 0 for failure.",
    "EVP_PKEY_get1_RSA": "EVP_PKEY_get1_RSA(), EVP_PKEY_get1_DSA(), EVP_PKEY_get1_DH() and EVP_PKEY_get1_EC_KEY() return the referenced key or NULL if an error occurred.",
    "EVP_PKEY_get1_DSA": "EVP_PKEY_get1_RSA(), EVP_PKEY_get1_DSA(), EVP_PKEY_get1_DH() and EVP_PKEY_get1_EC_KEY() return the referenced key or NULL if an error occurred.",
    "EVP_PKEY_get1_DH": "EVP_PKEY_get1_RSA(), EVP_PKEY_get1_DSA(), EVP_PKEY_get1_DH() and EVP_PKEY_get1_EC_KEY() return the referenced key or NULL if an error occurred.",
    "EVP_PKEY_get1_EC_KEY": "EVP_PKEY_get1_RSA(), EVP_PKEY_get1_DSA(), EVP_PKEY_get1_DH() and EVP_PKEY_get1_EC_KEY() return the referenced key or NULL if an error occurred.",
    "EVP_PKEY_assign_RSA": "EVP_PKEY_assign_RSA(), EVP_PKEY_assign_DSA(), EVP_PKEY_assign_DH(), EVP_PKEY_assign_EC_KEY(), EVP_PKEY_assign_POLY1305() and EVP_PKEY_assign_SIPHASH() return 1 for success and 0 for failure.",
    "EVP_PKEY_assign_DSA": "EVP_PKEY_assign_RSA(), EVP_PKEY_assign_DSA(), EVP_PKEY_assign_DH(), EVP_PKEY_assign_EC_KEY(), EVP_PKEY_assign_POLY1305() and EVP_PKEY_assign_SIPHASH() return 1 for success and 0 for failure.",
    "EVP_PKEY_assign_DH": "EVP_PKEY_assign_RSA(), EVP_PKEY_assign_DSA(), EVP_PKEY_assign_DH(), EVP_PKEY_assign_EC_KEY(), EVP_PKEY_assign_POLY1305() and EVP_PKEY_assign_SIPHASH() return 1 for success and 0 for failure.",
    "EVP_PKEY_assign_EC_KEY": "EVP_PKEY_assign_RSA(), EVP_PKEY_assign_DSA(), EVP_PKEY_assign_DH(), EVP_PKEY_assign_EC_KEY(), EVP_PKEY_assign_POLY1305() and EVP_PKEY_assign_SIPHASH() return 1 for success and 0 for failure.",
    "EVP_PKEY_assign_POLY1305": "EVP_PKEY_assign_RSA(), EVP_PKEY_assign_DSA(), EVP_PKEY_assign_DH(), EVP_PKEY_assign_EC_KEY(), EVP_PKEY_assign_POLY1305() and EVP_PKEY_assign_SIPHASH() return 1 for success and 0 for failure.",
    "EVP_PKEY_assign_SIPHASH": "EVP_PKEY_assign_RSA(), EVP_PKEY_assign_DSA(), EVP_PKEY_assign_DH(), EVP_PKEY_assign_EC_KEY(), EVP_PKEY_assign_POLY1305() and EVP_PKEY_assign_SIPHASH() return 1 for success and 0 for failure.",
    "EVP_PKEY_get_base_id": "EVP_PKEY_get_base_id(), EVP_PKEY_get_id() and EVP_PKEY_type() return a key type or B<NID_undef> (equivalently B<EVP_PKEY_NONE>) on error.",
    "EVP_PKEY_get_id": "EVP_PKEY_get_base_id(), EVP_PKEY_get_id() and EVP_PKEY_type() return a key type or B<NID_undef> (equivalently B<EVP_PKEY_NONE>) on error.",
    "EVP_PKEY_type": "EVP_PKEY_get_base_id(), EVP_PKEY_get_id() and EVP_PKEY_type() return a key type or B<NID_undef> (equivalently B<EVP_PKEY_NONE>) on error.",
    "EVP_PKEY_set1_engine": "EVP_PKEY_set1_engine() returns 1 for success and 0 for failure.",
    "EVP_PKEY_missing_parameters": "The function EVP_PKEY_missing_parameters() returns 1 if the public key parameters of B<pkey> are missing and 0 if they are present or the algorithm doesn't use parameters.",
    "EVP_PKEY_copy_parameters": "These functions EVP_PKEY_copy_parameters() returns 1 for success and 0 for failure.",
    "EVP_PKEY_cmp_parameters": "The functions EVP_PKEY_cmp_parameters(), EVP_PKEY_parameters_eq(),  EVP_PKEY_cmp() and EVP_PKEY_eq() return 1 if their inputs match, 0 if they don't match, -1 if the key types are different and -2 if the operation is not supported.",
    "EVP_PKEY_parameters_eq": "The functions EVP_PKEY_cmp_parameters(), EVP_PKEY_parameters_eq(),  EVP_PKEY_cmp() and EVP_PKEY_eq() return 1 if their inputs match, 0 if they don't match, -1 if the key types are different and -2 if the operation is not supported.",
    "EVP_PKEY_cmp": "The functions EVP_PKEY_cmp_parameters(), EVP_PKEY_parameters_eq(),  EVP_PKEY_cmp() and EVP_PKEY_eq() return 1 if their inputs match, 0 if they don't match, -1 if the key types are different and -2 if the operation is not supported.",
    "EVP_PKEY_eq": "The functions EVP_PKEY_cmp_parameters(), EVP_PKEY_parameters_eq(),  EVP_PKEY_cmp() and EVP_PKEY_eq() return 1 if their inputs match, 0 if they don't match, -1 if the key types are different and -2 if the operation is not supported.",
    "CTLOG_new": "CTLOG_new() will return NULL if an error occurs.",
    "CTLOG_new_from_base64": "CTLOG_new_from_base64() will return 1 on success, 0 otherwise.",
    "SSL_CTX_set_num_tickets": "SSL_CTX_set_num_tickets(), SSL_set_num_tickets(), and SSL_new_session_ticket() return 1 on success or 0 on failure.",
    "SSL_set_num_tickets": "SSL_CTX_set_num_tickets(), SSL_set_num_tickets(), and SSL_new_session_ticket() return 1 on success or 0 on failure.",
    "SSL_new_session_ticket": "SSL_CTX_set_num_tickets(), SSL_set_num_tickets(), and SSL_new_session_ticket() return 1 on success or 0 on failure.",
    "SSL_CTX_get_num_tickets": "SSL_CTX_get_num_tickets() and SSL_get_num_tickets() return the number of tickets that have been previously set.",
    "SSL_get_num_tickets": "SSL_CTX_get_num_tickets() and SSL_get_num_tickets() return the number of tickets that have been previously set.",
    "SSL_CTX_get_client_cert_cb": "SSL_CTX_get_client_cert_cb() returns function pointer of I<client_cert_cb> or NULL if the callback is not set.",
    "OSSL_SELF_TEST_new": "OSSL_SELF_TEST_new() returns the allocated B<OSSL_SELF_TEST> object, or NULL if it fails.",
    "OSSL_SELF_TEST_oncorrupt_byte": "OSSL_SELF_TEST_oncorrupt_byte() returns 1 if corruption occurs, otherwise it returns 0.",
    "CMS_compress": "CMS_compress() returns either a CMS_ContentInfo structure or NULL if an error occurred. The error can be obtained from ERR_get_error(3).",
    "X509_NAME_get0_der": "The function X509_NAME_get0_der() returns 1 for success and 0 if an error occurred.",
    "CMS_get0_SignerInfos": "CMS_get0_SignerInfos() returns all CMS_SignerInfo structures, or NULL there are no signers or an error occurs.",
    "CMS_SignerInfo_get0_signer_id": "CMS_SignerInfo_get0_signer_id() returns 1 for success and 0 for failure.",
    "CMS_SignerInfo_cert_cmp": "CMS_SignerInfo_cert_cmp() returns 0 for a successful comparison and non zero otherwise.",
    "CMS_SignerInfo_set1_signer_cert": "CMS_SignerInfo_set1_signer_cert() does not return a value.",
    "RAND_load_file": "RAND_load_file() returns the number of bytes read or -1 on error.",
    "RAND_write_file": "RAND_write_file() returns the number of bytes written, or -1 if the bytes written were generated without appropriate seeding.",
    "RAND_file_name": "RAND_file_name() returns a pointer to B<buf> on success, and NULL on error.",
    "SSL_CTX_set_security_level": "SSL_CTX_set_security_level() and SSL_set_security_level() do not return values.",
    "SSL_set_security_level": "SSL_CTX_set_security_level() and SSL_set_security_level() do not return values.",
    "SSL_CTX_get_security_level": "SSL_CTX_get_security_level() and SSL_get_security_level() return a integer that represents the security level with B<SSL_CTX> or B<SSL>, respectively.",
    "SSL_get_security_level": "SSL_CTX_get_security_level() and SSL_get_security_level() return a integer that represents the security level with B<SSL_CTX> or B<SSL>, respectively.",
    "SSL_CTX_set_security_callback": "SSL_CTX_set_security_callback() and SSL_set_security_callback() do not return values.",
    "SSL_set_security_callback": "SSL_CTX_set_security_callback() and SSL_set_security_callback() do not return values.",
    "SSL_CTX_get_security_callback": "SSL_CTX_get_security_callback() and SSL_get_security_callback() return the pointer to the security callback or NULL if the callback is not set.",
    "SSL_get_security_callback": "SSL_CTX_get_security_callback() and SSL_get_security_callback() return the pointer to the security callback or NULL if the callback is not set.",
    "SSL_CTX_get0_security_ex_data": "SSL_CTX_get0_security_ex_data() and SSL_get0_security_ex_data() return the extra data pointer or NULL if the ex data is not set.",
    "SSL_get0_security_ex_data": "SSL_CTX_get0_security_ex_data() and SSL_get0_security_ex_data() return the extra data pointer or NULL if the ex data is not set.",
    "CMS_digest_create_ex": "If the allocation fails, CMS_digest_create_ex() and CMS_digest_create() return NULL and set an error code that can be obtained by L<ERR_get_error(3)>. Otherwise they return a pointer to the newly allocated structure.",
    "CMS_digest_create": "If the allocation fails, CMS_digest_create_ex() and CMS_digest_create() return NULL and set an error code that can be obtained by L<ERR_get_error(3)>. Otherwise they return a pointer to the newly allocated structure.",
    "SSL_set_bio": "SSL_set_bio(), SSL_set0_rbio() and SSL_set0_wbio() cannot fail.",
    "SSL_set0_rbio": "SSL_set_bio(), SSL_set0_rbio() and SSL_set0_wbio() cannot fail.",
    "SSL_set0_wbio": "SSL_set_bio(), SSL_set0_rbio() and SSL_set0_wbio() cannot fail.",
    "OSSL_STORE_attach": "OSSL_STORE_attach() returns a pointer to a B<OSSL_STORE_CTX> on success, or NULL on failure.",
    "EVP_PKEY_get_field_type": "EVP_PKEY_get_field_type() returns the field type NID or 0 on error.",
    "EVP_PKEY_get_ec_point_conv_form": "EVP_PKEY_get_ec_point_conv_form() returns the point conversion format number (see L<EC_GROUP_copy(3)>) or 0 on error.",
    "EC_get_builtin_curves": "EC_get_builtin_curves() returns the number of built-in curves that are available.",
    "EC_GROUP_set_curve_GFp": "EC_GROUP_set_curve_GFp(), EC_GROUP_get_curve_GFp(), EC_GROUP_set_curve_GF2m(), EC_GROUP_get_curve_GF2m() return 1 on success or 0 on error.",
    "EC_GROUP_get_curve_GFp": "EC_GROUP_set_curve_GFp(), EC_GROUP_get_curve_GFp(), EC_GROUP_set_curve_GF2m(), EC_GROUP_get_curve_GF2m() return 1 on success or 0 on error.",
    "EC_GROUP_set_curve_GF2m": "EC_GROUP_set_curve_GFp(), EC_GROUP_get_curve_GFp(), EC_GROUP_set_curve_GF2m(), EC_GROUP_get_curve_GF2m() return 1 on success or 0 on error.",
    "EC_GROUP_get_curve_GF2m": "EC_GROUP_set_curve_GFp(), EC_GROUP_get_curve_GFp(), EC_GROUP_set_curve_GF2m(), EC_GROUP_get_curve_GF2m() return 1 on success or 0 on error.",
    "OSSL_EC_curve_nid2name": "OSSL_EC_curve_nid2name() returns a character string constant, or NULL on error.",
    "DH_set0_pqg": "DH_set0_pqg() and DH_set0_key() return 1 on success or 0 on failure.",
    "DH_set0_key": "DH_set0_pqg() and DH_set0_key() return 1 on success or 0 on failure.",
    "DH_get0_p": "DH_get0_p(), DH_get0_q(), DH_get0_g(), DH_get0_priv_key(), and DH_get0_pub_key() return the respective value, or NULL if it is unset.",
    "DH_get0_q": "DH_get0_p(), DH_get0_q(), DH_get0_g(), DH_get0_priv_key(), and DH_get0_pub_key() return the respective value, or NULL if it is unset.",
    "DH_get0_g": "DH_get0_p(), DH_get0_q(), DH_get0_g(), DH_get0_priv_key(), and DH_get0_pub_key() return the respective value, or NULL if it is unset.",
    "DH_get0_priv_key": "DH_get0_p(), DH_get0_q(), DH_get0_g(), DH_get0_priv_key(), and DH_get0_pub_key() return the respective value, or NULL if it is unset.",
    "DH_get0_pub_key": "DH_get0_p(), DH_get0_q(), DH_get0_g(), DH_get0_priv_key(), and DH_get0_pub_key() return the respective value, or NULL if it is unset.",
    "DH_test_flags": "DH_test_flags() returns the current state of the flags in the DH object.",
    "DH_get0_engine": "DH_get0_engine() returns the ENGINE set for the DH object or NULL if no ENGINE has been set.",
    "DH_get_length": "DH_get_length() returns the length of the secret exponent (private key) in bits, or zero if no such length has been explicitly set.",
    "SSL_CTX_add_custom_ext": "SSL_CTX_add_custom_ext(), SSL_CTX_add_client_custom_ext() and SSL_CTX_add_server_custom_ext() return 1 for success and 0 for failure. A failure can occur if an attempt is made to add the same B<ext_type> more than once, if an attempt is made to use an extension type handled internally by OpenSSL or if an internal error occurs (for example a memory allocation failure).",
    "SSL_CTX_add_client_custom_ext": "SSL_CTX_add_custom_ext(), SSL_CTX_add_client_custom_ext() and SSL_CTX_add_server_custom_ext() return 1 for success and 0 for failure. A failure can occur if an attempt is made to add the same B<ext_type> more than once, if an attempt is made to use an extension type handled internally by OpenSSL or if an internal error occurs (for example a memory allocation failure).",
    "SSL_CTX_add_server_custom_ext": "SSL_CTX_add_custom_ext(), SSL_CTX_add_client_custom_ext() and SSL_CTX_add_server_custom_ext() return 1 for success and 0 for failure. A failure can occur if an attempt is made to add the same B<ext_type> more than once, if an attempt is made to use an extension type handled internally by OpenSSL or if an internal error occurs (for example a memory allocation failure).",
    "SSL_extension_supported": "SSL_extension_supported() returns 1 if the extension B<ext_type> is handled internally by OpenSSL and 0 otherwise.",
    "EVP_BytesToKey": "If B<data> is NULL, then EVP_BytesToKey() returns the number of bytes needed to store the derived key. Otherwise, EVP_BytesToKey() returns the size of the derived key in bytes, or 0 on error.",
    "ASN1_generate_nconf": "ASN1_generate_nconf() and ASN1_generate_v3() return the encoded data as an B<ASN1_TYPE> structure or NULL if an error occurred.",
    "ASN1_generate_v3": "ASN1_generate_nconf() and ASN1_generate_v3() return the encoded data as an B<ASN1_TYPE> structure or NULL if an error occurred.",
    "X509_get0_uids": "X509_get0_uids() does not return a value.",
    "CMS_EncryptedData_encrypt_ex": "If the allocation fails, CMS_EncryptedData_encrypt_ex() and CMS_EncryptedData_encrypt() return NULL and set an error code that can be obtained by L<ERR_get_error(3)>. Otherwise they return a pointer to the newly allocated structure.",
    "CMS_EncryptedData_encrypt": "If the allocation fails, CMS_EncryptedData_encrypt_ex() and CMS_EncryptedData_encrypt() return NULL and set an error code that can be obtained by L<ERR_get_error(3)>. Otherwise they return a pointer to the newly allocated structure.",
    "SSL_set1_host": "SSL_set1_host() and SSL_add1_host() return 1 for success and 0 for failure.",
    "SSL_add1_host": "SSL_set1_host() and SSL_add1_host() return 1 for success and 0 for failure.",
    "SSL_get0_peername": "SSL_get0_peername() returns NULL if peername verification is not applicable (as with RFC7671 DANE-EE(3)), or no trusted peername was matched.  Otherwise, it returns the matched peername.  To determine whether verification succeeded call L<SSL_get_verify_result(3)>.",
    "DSA_dup_DH": "DSA_dup_DH() returns the new B<DH> structure, and NULL on error. The error codes can be obtained by L<ERR_get_error(3)>.",
    "OSSL_ENCODER_fetch": "OSSL_ENCODER_fetch() returns a pointer to the key management implementation represented by an OSSL_ENCODER object, or NULL on error.",
    "OSSL_ENCODER_up_ref": "OSSL_ENCODER_up_ref() returns 1 on success, or 0 on error.",
    "OSSL_ENCODER_free": "OSSL_ENCODER_free() doesn't return any value.",
    "OSSL_ENCODER_get0_provider": "OSSL_ENCODER_get0_provider() returns a pointer to a provider object, or NULL on error.",
    "OSSL_ENCODER_get0_properties": "OSSL_ENCODER_get0_properties() returns a pointer to a property definition string, or NULL on error.",
    "OSSL_ENCODER_is_a": "OSSL_ENCODER_is_a() returns 1 of I<encoder> was identifiable, otherwise 0.",
    "OSSL_ENCODER_get0_name": "OSSL_ENCODER_get0_name() returns the algorithm name from the provided implementation for the given I<encoder>. Note that the I<encoder> may have multiple synonyms associated with it. In this case the first name from the algorithm definition is returned. Ownership of the returned string is retained by the I<encoder> object and should not be freed by the caller.",
    "OSSL_ENCODER_get0_description": "OSSL_ENCODER_get0_description() returns a pointer to a decription, or NULL if there isn't one.",
    "OSSL_ENCODER_names_do_all": "OSSL_ENCODER_names_do_all() returns 1 if the callback was called for all names. A return value of 0 means that the callback was not called for any names.",
    "EVP_PKEY_new": "EVP_PKEY_new(), EVP_PKEY_new_raw_private_key(), EVP_PKEY_new_raw_public_key(), EVP_PKEY_new_CMAC_key() and EVP_PKEY_new_mac_key() return either the newly allocated B<EVP_PKEY> structure or NULL if an error occurred.",
    "EVP_PKEY_new_raw_private_key": "EVP_PKEY_new(), EVP_PKEY_new_raw_private_key(), EVP_PKEY_new_raw_public_key(), EVP_PKEY_new_CMAC_key() and EVP_PKEY_new_mac_key() return either the newly allocated B<EVP_PKEY> structure or NULL if an error occurred.",
    "EVP_PKEY_new_raw_public_key": "EVP_PKEY_new(), EVP_PKEY_new_raw_private_key(), EVP_PKEY_new_raw_public_key(), EVP_PKEY_new_CMAC_key() and EVP_PKEY_new_mac_key() return either the newly allocated B<EVP_PKEY> structure or NULL if an error occurred.",
    "EVP_PKEY_new_CMAC_key": "EVP_PKEY_new(), EVP_PKEY_new_raw_private_key(), EVP_PKEY_new_raw_public_key(), EVP_PKEY_new_CMAC_key() and EVP_PKEY_new_mac_key() return either the newly allocated B<EVP_PKEY> structure or NULL if an error occurred.",
    "EVP_PKEY_new_mac_key": "EVP_PKEY_new(), EVP_PKEY_new_raw_private_key(), EVP_PKEY_new_raw_public_key(), EVP_PKEY_new_CMAC_key() and EVP_PKEY_new_mac_key() return either the newly allocated B<EVP_PKEY> structure or NULL if an error occurred.",
    "EVP_PKEY_dup": "EVP_PKEY_dup() returns the key duplicate or NULL if an error occurred.",
    "EVP_PKEY_up_ref": "EVP_PKEY_up_ref(), EVP_PKEY_get_raw_private_key() and EVP_PKEY_get_raw_public_key() return 1 for success and 0 for failure.",
    "EVP_PKEY_get_raw_private_key": "EVP_PKEY_up_ref(), EVP_PKEY_get_raw_private_key() and EVP_PKEY_get_raw_public_key() return 1 for success and 0 for failure.",
    "EVP_PKEY_get_raw_public_key": "EVP_PKEY_up_ref(), EVP_PKEY_get_raw_private_key() and EVP_PKEY_get_raw_public_key() return 1 for success and 0 for failure.",
    "ERR_raise": "ERR_raise(), ERR_raise_data(), ERR_put_error(), ERR_add_error_data(), ERR_add_error_vdata() ERR_add_error_txt(), and ERR_add_error_mem_bio() return no values.",
    "ERR_raise_data": "ERR_raise(), ERR_raise_data(), ERR_put_error(), ERR_add_error_data(), ERR_add_error_vdata() ERR_add_error_txt(), and ERR_add_error_mem_bio() return no values.",
    "ERR_put_error": "ERR_raise(), ERR_raise_data(), ERR_put_error(), ERR_add_error_data(), ERR_add_error_vdata() ERR_add_error_txt(), and ERR_add_error_mem_bio() return no values.",
    "ERR_add_error_data": "ERR_raise(), ERR_raise_data(), ERR_put_error(), ERR_add_error_data(), ERR_add_error_vdata() ERR_add_error_txt(), and ERR_add_error_mem_bio() return no values.",
    "ERR_add_error_vdata": "ERR_raise(), ERR_raise_data(), ERR_put_error(), ERR_add_error_data(), ERR_add_error_vdata() ERR_add_error_txt(), and ERR_add_error_mem_bio() return no values.",
    "ERR_add_error_txt": "ERR_raise(), ERR_raise_data(), ERR_put_error(), ERR_add_error_data(), ERR_add_error_vdata() ERR_add_error_txt(), and ERR_add_error_mem_bio() return no values.",
    "ERR_add_error_mem_bio": "ERR_raise(), ERR_raise_data(), ERR_put_error(), ERR_add_error_data(), ERR_add_error_vdata() ERR_add_error_txt(), and ERR_add_error_mem_bio() return no values.",
    "PKCS12_SAFEBAG_get_nid": "PKCS12_SAFEBAG_get_nid() and PKCS12_SAFEBAG_get_bag_nid() return the NID of the safeBag or bag object, or -1 if there is no corresponding NID. Other functions return a valid object of the specified type or NULL if an error occurred.",
    "PKCS12_SAFEBAG_get_bag_nid": "PKCS12_SAFEBAG_get_nid() and PKCS12_SAFEBAG_get_bag_nid() return the NID of the safeBag or bag object, or -1 if there is no corresponding NID. Other functions return a valid object of the specified type or NULL if an error occurred.",
    "SSL_verify_client_post_handshake": "The SSL_verify_client_post_handshake() function returns 1 if the request succeeded, and 0 if the request failed. The error stack can be examined to determine the failure reason.",
    "OBJ_nid2obj": "OBJ_nid2obj() returns an B<ASN1_OBJECT> structure or B<NULL> is an error occurred.",
    "OBJ_nid2ln": "OBJ_nid2ln() and OBJ_nid2sn() returns a valid string or B<NULL> on error.",
    "OBJ_nid2sn": "OBJ_nid2ln() and OBJ_nid2sn() returns a valid string or B<NULL> on error.",
    "OBJ_obj2nid": "OBJ_obj2nid(), OBJ_ln2nid(), OBJ_sn2nid() and OBJ_txt2nid() return a NID or B<NID_undef> on error.",
    "OBJ_ln2nid": "OBJ_obj2nid(), OBJ_ln2nid(), OBJ_sn2nid() and OBJ_txt2nid() return a NID or B<NID_undef> on error.",
    "OBJ_sn2nid": "OBJ_obj2nid(), OBJ_ln2nid(), OBJ_sn2nid() and OBJ_txt2nid() return a NID or B<NID_undef> on error.",
    "OBJ_txt2nid": "OBJ_obj2nid(), OBJ_ln2nid(), OBJ_sn2nid() and OBJ_txt2nid() return a NID or B<NID_undef> on error.",
    "OBJ_add_sigid": "OBJ_add_sigid() returns 1 on success or 0 on error.",
    "OPENSSL_config": "Neither OPENSSL_config() nor OPENSSL_no_config() return a value.",
    "OPENSSL_no_config": "Neither OPENSSL_config() nor OPENSSL_no_config() return a value.",
    "ECDSA_SIG_new": "ECDSA_SIG_new() returns NULL if the allocation fails.",
    "ECDSA_SIG_set0": "ECDSA_SIG_set0() returns 1 on success or 0 on failure.",
    "ECDSA_SIG_get0_r": "ECDSA_SIG_get0_r() and ECDSA_SIG_get0_s() return the corresponding value, or NULL if it is unset.",
    "ECDSA_SIG_get0_s": "ECDSA_SIG_get0_r() and ECDSA_SIG_get0_s() return the corresponding value, or NULL if it is unset.",
    "ECDSA_size": "ECDSA_size() returns the maximum length signature or 0 on error.",
    "ECDSA_sign": "ECDSA_sign(), ECDSA_sign_ex() and ECDSA_sign_setup() return 1 if successful or 0 on error.",
    "ECDSA_sign_ex": "ECDSA_sign(), ECDSA_sign_ex() and ECDSA_sign_setup() return 1 if successful or 0 on error.",
    "ECDSA_sign_setup": "ECDSA_sign(), ECDSA_sign_ex() and ECDSA_sign_setup() return 1 if successful or 0 on error.",
    "ECDSA_do_sign": "ECDSA_do_sign() and ECDSA_do_sign_ex() return a pointer to an allocated B<ECDSA_SIG> structure or NULL on error.",
    "ECDSA_do_sign_ex": "ECDSA_do_sign() and ECDSA_do_sign_ex() return a pointer to an allocated B<ECDSA_SIG> structure or NULL on error.",
    "ECDSA_verify": "ECDSA_verify() and ECDSA_do_verify() return 1 for a valid signature, 0 for an invalid signature and -1 on error. The error codes can be obtained by L<ERR_get_error(3)>.",
    "ECDSA_do_verify": "ECDSA_verify() and ECDSA_do_verify() return 1 for a valid signature, 0 for an invalid signature and -1 on error. The error codes can be obtained by L<ERR_get_error(3)>.",
    "OSSL_CRMF_pbm_new": "OSSL_CRMF_pbm_new() returns 1 on success, 0 on error.",
    "OSSL_CRMF_pbmp_new": "OSSL_CRMF_pbmp_new() returns a new and initialized OSSL_CRMF_PBMPARAMETER structure, or NULL on error.",
    "SSL_stateless": "For SSL_stateless() a return value of 1 indicates success and the B<ssl> object will be set up ready to continue the handshake. A return value of 0 or -1 indicates failure. If the value is 0 then a HelloRetryRequest was sent. A value of -1 indicates any other error. User code may retry the SSL_stateless() call.",
    "DTLSv1_listen": "For DTLSv1_listen(), prior to OpenSSL 1.1.0, fatal and non-fatal errors both produce return codes <= 0 (in typical implementations user code treats all errors as non-fatal), whilst return codes >0 indicate success.",
    "TYPE_get_ex_new_index": "TYPE_get_ex_new_index() returns a new index on success or -1 on error.",
    "TYPE_set_ex_data": "TYPE_set_ex_data() returns 1 on success or 0 on error.",
    "TYPE_get_ex_data": "TYPE_get_ex_data() returns the application data or NULL if an error occurred.",
    "ASN1_STRING_print_ex": "ASN1_STRING_print_ex() and ASN1_STRING_print_ex_fp() return the number of characters written or -1 if an error occurred.",
    "ASN1_STRING_print_ex_fp": "ASN1_STRING_print_ex() and ASN1_STRING_print_ex_fp() return the number of characters written or -1 if an error occurred.",
    "ASN1_STRING_print": "ASN1_STRING_print() returns 1 on success or 0 on error.",
    "ASN1_tag2str": "ASN1_tag2str() returns a human-readable name of the specified ASN.1 I<tag>.",
    "SSL_clear": "The SSL_clear() operation was successful.",
    "X509V3_set_ctx": "X509V3_set_ctx() and X509V3_set_issuer_pkey() return 1 on success and 0 on error.",
    "X509V3_set_issuer_pkey": "X509V3_set_ctx() and X509V3_set_issuer_pkey() return 1 on success and 0 on error.",
    "EVP_PKEY_CTX_new": "EVP_PKEY_CTX_new(), EVP_PKEY_CTX_new_id() and EVP_PKEY_CTX_dup() return either the newly allocated B<EVP_PKEY_CTX> structure or B<NULL> if an error occurred.",
    "EVP_PKEY_CTX_new_id": "EVP_PKEY_CTX_new(), EVP_PKEY_CTX_new_id() and EVP_PKEY_CTX_dup() return either the newly allocated B<EVP_PKEY_CTX> structure or B<NULL> if an error occurred.",
    "EVP_PKEY_CTX_dup": "EVP_PKEY_CTX_new(), EVP_PKEY_CTX_new_id() and EVP_PKEY_CTX_dup() return either the newly allocated B<EVP_PKEY_CTX> structure or B<NULL> if an error occurred.",
    "EVP_PKEY_CTX_free": "EVP_PKEY_CTX_free() does not return a value.",
    "EVP_PKEY_CTX_is_a": "EVP_PKEY_CTX_is_a() returns 1 for true and 0 for false.",
    "DH_OpenSSL": "DH_OpenSSL() and DH_get_default_method() return pointers to the respective B<DH_METHOD>s.",
    "DH_get_default_method": "DH_OpenSSL() and DH_get_default_method() return pointers to the respective B<DH_METHOD>s.",
    "DH_set_default_method": "DH_set_default_method() returns no value.",
    "DH_set_method": "DH_set_method() returns nonzero if the provided B<meth> was successfully set as the method for B<dh> (including unloading the ENGINE handle if the previous method was supplied by an ENGINE).",
    "DH_new_method": "DH_new_method() returns NULL and sets an error code that can be obtained by L<ERR_get_error(3)> if the allocation fails. Otherwise it returns a pointer to the newly allocated structure.",
    "RSA_check_key_ex": "RSA_check_key_ex() and RSA_check_key() return 1 if B<rsa> is a valid RSA key, and 0 otherwise. They return -1 if an error occurs while checking the key.",
    "RSA_check_key": "RSA_check_key_ex() and RSA_check_key() return 1 if B<rsa> is a valid RSA key, and 0 otherwise. They return -1 if an error occurs while checking the key.",
    "BIO_new_bio_pair": "BIO_new_bio_pair() returns 1 on success, with the new BIOs available in B<bio1> and B<bio2>, or 0 on failure, with NULL pointers stored into the locations for B<bio1> and B<bio2>. Check the error stack for more information.",
    "EVP_ASYM_CIPHER_fetch": "EVP_ASYM_CIPHER_fetch() returns a pointer to an B<EVP_ASYM_CIPHER> for success or B<NULL> for failure.",
    "EVP_ASYM_CIPHER_up_ref": "EVP_ASYM_CIPHER_up_ref() returns 1 for success or 0 otherwise.",
    "EVP_ASYM_CIPHER_names_do_all": "EVP_ASYM_CIPHER_names_do_all() returns 1 if the callback was called for all names. A return value of 0 means that the callback was not called for any names.",
    "EVP_ASYM_CIPHER_gettable_ctx_params": "EVP_ASYM_CIPHER_gettable_ctx_params() and EVP_ASYM_CIPHER_settable_ctx_params() return a constant B<OSSL_PARAM> array or NULL on error.",
    "EVP_ASYM_CIPHER_settable_ctx_params": "EVP_ASYM_CIPHER_gettable_ctx_params() and EVP_ASYM_CIPHER_settable_ctx_params() return a constant B<OSSL_PARAM> array or NULL on error.",
    "OSSL_PARAM_BLD_new": "OSSL_PARAM_BLD_new() returns the allocated OSSL_PARAM_BLD structure, or NULL on error.",
    "OSSL_PARAM_BLD_to_param": "OSSL_PARAM_BLD_to_param() returns the allocated OSSL_PARAM array, or NULL on error.",
    "OSSL_CRMF_CERTID_gen": "OSSL_CRMF_CERTID_gen() returns a pointer to the resulting structure or NULL on error.",
    "OPENSSL_malloc_init": "OPENSSL_malloc_init(), OPENSSL_free(), OPENSSL_clear_free() CRYPTO_free(), CRYPTO_clear_free() and CRYPTO_get_mem_functions() return no value.",
    "OPENSSL_free": "OPENSSL_malloc_init(), OPENSSL_free(), OPENSSL_clear_free() CRYPTO_free(), CRYPTO_clear_free() and CRYPTO_get_mem_functions() return no value.",
    "OPENSSL_clear_free": "OPENSSL_malloc_init(), OPENSSL_free(), OPENSSL_clear_free() CRYPTO_free(), CRYPTO_clear_free() and CRYPTO_get_mem_functions() return no value.",
    "CRYPTO_free": "OPENSSL_malloc_init(), OPENSSL_free(), OPENSSL_clear_free() CRYPTO_free(), CRYPTO_clear_free() and CRYPTO_get_mem_functions() return no value.",
    "CRYPTO_clear_free": "OPENSSL_malloc_init(), OPENSSL_free(), OPENSSL_clear_free() CRYPTO_free(), CRYPTO_clear_free() and CRYPTO_get_mem_functions() return no value.",
    "CRYPTO_get_mem_functions": "OPENSSL_malloc_init(), OPENSSL_free(), OPENSSL_clear_free() CRYPTO_free(), CRYPTO_clear_free() and CRYPTO_get_mem_functions() return no value.",
    "OPENSSL_malloc": "OPENSSL_malloc(), OPENSSL_zalloc(), OPENSSL_realloc(), OPENSSL_clear_realloc(), CRYPTO_malloc(), CRYPTO_zalloc(), CRYPTO_realloc(), CRYPTO_clear_realloc(), OPENSSL_strdup(), and OPENSSL_strndup() return a pointer to allocated memory or NULL on error.",
    "OPENSSL_zalloc": "OPENSSL_malloc(), OPENSSL_zalloc(), OPENSSL_realloc(), OPENSSL_clear_realloc(), CRYPTO_malloc(), CRYPTO_zalloc(), CRYPTO_realloc(), CRYPTO_clear_realloc(), OPENSSL_strdup(), and OPENSSL_strndup() return a pointer to allocated memory or NULL on error.",
    "OPENSSL_realloc": "OPENSSL_malloc(), OPENSSL_zalloc(), OPENSSL_realloc(), OPENSSL_clear_realloc(), CRYPTO_malloc(), CRYPTO_zalloc(), CRYPTO_realloc(), CRYPTO_clear_realloc(), OPENSSL_strdup(), and OPENSSL_strndup() return a pointer to allocated memory or NULL on error.",
    "OPENSSL_clear_realloc": "OPENSSL_malloc(), OPENSSL_zalloc(), OPENSSL_realloc(), OPENSSL_clear_realloc(), CRYPTO_malloc(), CRYPTO_zalloc(), CRYPTO_realloc(), CRYPTO_clear_realloc(), OPENSSL_strdup(), and OPENSSL_strndup() return a pointer to allocated memory or NULL on error.",
    "CRYPTO_malloc": "OPENSSL_malloc(), OPENSSL_zalloc(), OPENSSL_realloc(), OPENSSL_clear_realloc(), CRYPTO_malloc(), CRYPTO_zalloc(), CRYPTO_realloc(), CRYPTO_clear_realloc(), OPENSSL_strdup(), and OPENSSL_strndup() return a pointer to allocated memory or NULL on error.",
    "CRYPTO_zalloc": "OPENSSL_malloc(), OPENSSL_zalloc(), OPENSSL_realloc(), OPENSSL_clear_realloc(), CRYPTO_malloc(), CRYPTO_zalloc(), CRYPTO_realloc(), CRYPTO_clear_realloc(), OPENSSL_strdup(), and OPENSSL_strndup() return a pointer to allocated memory or NULL on error.",
    "CRYPTO_realloc": "OPENSSL_malloc(), OPENSSL_zalloc(), OPENSSL_realloc(), OPENSSL_clear_realloc(), CRYPTO_malloc(), CRYPTO_zalloc(), CRYPTO_realloc(), CRYPTO_clear_realloc(), OPENSSL_strdup(), and OPENSSL_strndup() return a pointer to allocated memory or NULL on error.",
    "CRYPTO_clear_realloc": "OPENSSL_malloc(), OPENSSL_zalloc(), OPENSSL_realloc(), OPENSSL_clear_realloc(), CRYPTO_malloc(), CRYPTO_zalloc(), CRYPTO_realloc(), CRYPTO_clear_realloc(), OPENSSL_strdup(), and OPENSSL_strndup() return a pointer to allocated memory or NULL on error.",
    "OPENSSL_strdup": "OPENSSL_malloc(), OPENSSL_zalloc(), OPENSSL_realloc(), OPENSSL_clear_realloc(), CRYPTO_malloc(), CRYPTO_zalloc(), CRYPTO_realloc(), CRYPTO_clear_realloc(), OPENSSL_strdup(), and OPENSSL_strndup() return a pointer to allocated memory or NULL on error.",
    "OPENSSL_strndup": "OPENSSL_malloc(), OPENSSL_zalloc(), OPENSSL_realloc(), OPENSSL_clear_realloc(), CRYPTO_malloc(), CRYPTO_zalloc(), CRYPTO_realloc(), CRYPTO_clear_realloc(), OPENSSL_strdup(), and OPENSSL_strndup() return a pointer to allocated memory or NULL on error.",
    "CRYPTO_set_mem_functions": "CRYPTO_set_mem_functions() returns 1 on success or 0 on failure (almost always because allocations have already happened).",
    "CRYPTO_mem_leaks": "CRYPTO_mem_leaks(), CRYPTO_mem_leaks_fp(), CRYPTO_mem_leaks_cb(), CRYPTO_set_mem_debug(), and CRYPTO_mem_ctrl() are deprecated and return -1. OPENSSL_mem_debug_push(), OPENSSL_mem_debug_pop(), CRYPTO_mem_debug_push(), and CRYPTO_mem_debug_pop() are deprecated and return 0.",
    "CRYPTO_mem_leaks_fp": "CRYPTO_mem_leaks(), CRYPTO_mem_leaks_fp(), CRYPTO_mem_leaks_cb(), CRYPTO_set_mem_debug(), and CRYPTO_mem_ctrl() are deprecated and return -1. OPENSSL_mem_debug_push(), OPENSSL_mem_debug_pop(), CRYPTO_mem_debug_push(), and CRYPTO_mem_debug_pop() are deprecated and return 0.",
    "CRYPTO_mem_leaks_cb": "CRYPTO_mem_leaks(), CRYPTO_mem_leaks_fp(), CRYPTO_mem_leaks_cb(), CRYPTO_set_mem_debug(), and CRYPTO_mem_ctrl() are deprecated and return -1. OPENSSL_mem_debug_push(), OPENSSL_mem_debug_pop(), CRYPTO_mem_debug_push(), and CRYPTO_mem_debug_pop() are deprecated and return 0.",
    "CRYPTO_set_mem_debug": "CRYPTO_mem_leaks(), CRYPTO_mem_leaks_fp(), CRYPTO_mem_leaks_cb(), CRYPTO_set_mem_debug(), and CRYPTO_mem_ctrl() are deprecated and return -1. OPENSSL_mem_debug_push(), OPENSSL_mem_debug_pop(), CRYPTO_mem_debug_push(), and CRYPTO_mem_debug_pop() are deprecated and return 0.",
    "CRYPTO_mem_ctrl": "CRYPTO_mem_leaks(), CRYPTO_mem_leaks_fp(), CRYPTO_mem_leaks_cb(), CRYPTO_set_mem_debug(), and CRYPTO_mem_ctrl() are deprecated and return -1. OPENSSL_mem_debug_push(), OPENSSL_mem_debug_pop(), CRYPTO_mem_debug_push(), and CRYPTO_mem_debug_pop() are deprecated and return 0.",
    "OPENSSL_mem_debug_push": "CRYPTO_mem_leaks(), CRYPTO_mem_leaks_fp(), CRYPTO_mem_leaks_cb(), CRYPTO_set_mem_debug(), and CRYPTO_mem_ctrl() are deprecated and return -1. OPENSSL_mem_debug_push(), OPENSSL_mem_debug_pop(), CRYPTO_mem_debug_push(), and CRYPTO_mem_debug_pop() are deprecated and return 0.",
    "OPENSSL_mem_debug_pop": "CRYPTO_mem_leaks(), CRYPTO_mem_leaks_fp(), CRYPTO_mem_leaks_cb(), CRYPTO_set_mem_debug(), and CRYPTO_mem_ctrl() are deprecated and return -1. OPENSSL_mem_debug_push(), OPENSSL_mem_debug_pop(), CRYPTO_mem_debug_push(), and CRYPTO_mem_debug_pop() are deprecated and return 0.",
    "CRYPTO_mem_debug_push": "CRYPTO_mem_leaks(), CRYPTO_mem_leaks_fp(), CRYPTO_mem_leaks_cb(), CRYPTO_set_mem_debug(), and CRYPTO_mem_ctrl() are deprecated and return -1. OPENSSL_mem_debug_push(), OPENSSL_mem_debug_pop(), CRYPTO_mem_debug_push(), and CRYPTO_mem_debug_pop() are deprecated and return 0.",
    "CRYPTO_mem_debug_pop": "CRYPTO_mem_leaks(), CRYPTO_mem_leaks_fp(), CRYPTO_mem_leaks_cb(), CRYPTO_set_mem_debug(), and CRYPTO_mem_ctrl() are deprecated and return -1. OPENSSL_mem_debug_push(), OPENSSL_mem_debug_pop(), CRYPTO_mem_debug_push(), and CRYPTO_mem_debug_pop() are deprecated and return 0.",
    "SSL_CTX_get0_param": "SSL_CTX_get0_param() and SSL_get0_param() return a pointer to an B<X509_VERIFY_PARAM> structure.",
    "SSL_get0_param": "SSL_CTX_get0_param() and SSL_get0_param() return a pointer to an B<X509_VERIFY_PARAM> structure.",
    "SSL_CTX_set1_param": "SSL_CTX_set1_param() and SSL_set1_param() return 1 for success and 0 for failure.",
    "SSL_set1_param": "SSL_CTX_set1_param() and SSL_set1_param() return 1 for success and 0 for failure.",
    "RSA_blinding_on": "RSA_blinding_on() returns 1 on success, and 0 if an error occurred.",
    "RSA_blinding_off": "RSA_blinding_off() returns no value.",
    "BN_add_word": "BN_add_word(), BN_sub_word() and BN_mul_word() return 1 for success, 0 on error. The error codes can be obtained by L<ERR_get_error(3)>.",
    "BN_sub_word": "BN_add_word(), BN_sub_word() and BN_mul_word() return 1 for success, 0 on error. The error codes can be obtained by L<ERR_get_error(3)>.",
    "BN_mul_word": "BN_add_word(), BN_sub_word() and BN_mul_word() return 1 for success, 0 on error. The error codes can be obtained by L<ERR_get_error(3)>.",
    "BN_mod_word": "BN_mod_word() and BN_div_word() return B<a>%B<w> on success and B<(BN_ULONG)-1> if an error occurred.",
    "BN_div_word": "BN_mod_word() and BN_div_word() return B<a>%B<w> on success and B<(BN_ULONG)-1> if an error occurred.",
    "X509_NAME_add_entry_by_txt": "X509_NAME_add_entry_by_txt(), X509_NAME_add_entry_by_OBJ(), X509_NAME_add_entry_by_NID() and X509_NAME_add_entry() return 1 for success of 0 if an error occurred.",
    "X509_NAME_add_entry_by_OBJ": "X509_NAME_add_entry_by_txt(), X509_NAME_add_entry_by_OBJ(), X509_NAME_add_entry_by_NID() and X509_NAME_add_entry() return 1 for success of 0 if an error occurred.",
    "X509_NAME_add_entry_by_NID": "X509_NAME_add_entry_by_txt(), X509_NAME_add_entry_by_OBJ(), X509_NAME_add_entry_by_NID() and X509_NAME_add_entry() return 1 for success of 0 if an error occurred.",
    "X509_NAME_add_entry": "X509_NAME_add_entry_by_txt(), X509_NAME_add_entry_by_OBJ(), X509_NAME_add_entry_by_NID() and X509_NAME_add_entry() return 1 for success of 0 if an error occurred.",
    "X509_NAME_delete_entry": "X509_NAME_delete_entry() returns either the deleted B<X509_NAME_ENTRY> structure or B<NULL> if an error occurred.",
    "CMS_ReceiptRequest_create0_ex": "CMS_ReceiptRequest_create0_ex() and CMS_ReceiptRequest_create0() return a signed receipt request structure or NULL if an error occurred.",
    "CMS_ReceiptRequest_create0": "CMS_ReceiptRequest_create0_ex() and CMS_ReceiptRequest_create0() return a signed receipt request structure or NULL if an error occurred.",
    "CMS_add1_ReceiptRequest": "CMS_add1_ReceiptRequest() returns 1 for success or 0 if an error occurred.",
    "CMS_get1_ReceiptRequest": "CMS_get1_ReceiptRequest() returns 1 is a signed receipt request is found and decoded. It returns 0 if a signed receipt request is not present and -1 if it is present but malformed.",
    "EVP_DigestVerifyInit": "EVP_DigestVerifyInit() and EVP_DigestVerifyUpdate() return 1 for success and 0 for failure.",
    "EVP_DigestVerifyUpdate": "EVP_DigestVerifyInit() and EVP_DigestVerifyUpdate() return 1 for success and 0 for failure.",
    "EVP_DigestVerifyFinal": "EVP_DigestVerifyFinal() and EVP_DigestVerify() return 1 for success; any other value indicates failure.  A return value of zero indicates that the signature did not verify successfully (that is, B<tbs> did not match the original data or the signature had an invalid form), while other values indicate a more serious error (and sometimes also indicate an invalid signature form).",
    "EVP_DigestVerify": "EVP_DigestVerifyFinal() and EVP_DigestVerify() return 1 for success; any other value indicates failure.  A return value of zero indicates that the signature did not verify successfully (that is, B<tbs> did not match the original data or the signature had an invalid form), while other values indicate a more serious error (and sometimes also indicate an invalid signature form).",
    "TS_RESP_CTX_new_ex": "If the allocation fails, TS_RESP_CTX_new_ex() and TS_RESP_CTX_new() return NULL, otherwise it returns a pointer to the newly allocated structure.",
    "TS_RESP_CTX_new": "If the allocation fails, TS_RESP_CTX_new_ex() and TS_RESP_CTX_new() return NULL, otherwise it returns a pointer to the newly allocated structure.",
    "SSL_CONF_cmd_argv": "SSL_CONF_cmd_argv() returns the number of command arguments processed: 0, 1, 2 or a negative error code.",
    "ASN1_INTEGER_new": "ASN1_INTEGER_new() return a valid B<ASN1_INTEGER> structure or NULL if an error occurred.",
    "ASN1_INTEGER_free": "ASN1_INTEGER_free() does not return a value.",
    "SSL_key_update": "SSL_key_update(), SSL_renegotiate() and SSL_renegotiate_abbreviated() return 1 on success or 0 on error.",
    "SSL_renegotiate": "SSL_key_update(), SSL_renegotiate() and SSL_renegotiate_abbreviated() return 1 on success or 0 on error.",
    "SSL_renegotiate_abbreviated": "SSL_key_update(), SSL_renegotiate() and SSL_renegotiate_abbreviated() return 1 on success or 0 on error.",
    "SSL_get_key_update_type": "SSL_get_key_update_type() returns the update type of the pending key update operation or SSL_KEY_UPDATE_NONE if there is none.",
    "SSL_renegotiate_pending": "SSL_renegotiate_pending() returns 1 if a renegotiation or renegotiation request has been scheduled but not yet acted on, or 0 otherwise.",
    "PKCS8_encrypt": "PKCS8_encrypt(), PKCS8_encrypt_ex(), PKCS8_set0_pbe() and PKCS8_set0_pbe_ex() return an encrypted key in a B<X509_SIG> structure or NULL if an error occurs.",
    "PKCS8_encrypt_ex": "PKCS8_encrypt(), PKCS8_encrypt_ex(), PKCS8_set0_pbe() and PKCS8_set0_pbe_ex() return an encrypted key in a B<X509_SIG> structure or NULL if an error occurs.",
    "PKCS8_set0_pbe": "PKCS8_encrypt(), PKCS8_encrypt_ex(), PKCS8_set0_pbe() and PKCS8_set0_pbe_ex() return an encrypted key in a B<X509_SIG> structure or NULL if an error occurs.",
    "PKCS8_set0_pbe_ex": "PKCS8_encrypt(), PKCS8_encrypt_ex(), PKCS8_set0_pbe() and PKCS8_set0_pbe_ex() return an encrypted key in a B<X509_SIG> structure or NULL if an error occurs.",
    "PKCS8_decrypt": "PKCS8_decrypt() and PKCS8_decrypt_ex() return a B<PKCS8_PRIV_KEY_INFO> or NULL if an error occurs.",
    "PKCS8_decrypt_ex": "PKCS8_decrypt() and PKCS8_decrypt_ex() return a B<PKCS8_PRIV_KEY_INFO> or NULL if an error occurs.",
    "ERR_error_string": "ERR_error_string() returns a pointer to a static buffer containing the string if I<buf> B<== NULL>, I<buf> otherwise.",
    "ERR_lib_error_string": "ERR_lib_error_string() and ERR_reason_error_string() return the strings, and B<NULL> if none is registered for the error code.",
    "ERR_reason_error_string": "ERR_lib_error_string() and ERR_reason_error_string() return the strings, and B<NULL> if none is registered for the error code.",
    "ERR_func_error_string": "ERR_func_error_string() returns NULL.",
    "OSSL_STORE_LOADER_fetch": "OSSL_STORE_LOADER_fetch() returns a pointer to an OSSL_STORE_LOADER object, or NULL on error.",
    "OSSL_STORE_LOADER_up_ref": "OSSL_STORE_LOADER_up_ref() returns 1 on success, or 0 on error.",
    "OSSL_STORE_LOADER_names_do_all": "OSSL_STORE_LOADER_names_do_all() returns 1 if the callback was called for all names. A return value of 0 means that the callback was not called for any names.",
    "OSSL_STORE_LOADER_free": "OSSL_STORE_LOADER_free() doesn't return any value.",
    "OSSL_STORE_LOADER_get0_provider": "OSSL_STORE_LOADER_get0_provider() returns a pointer to a provider object, or NULL on error.",
    "OSSL_STORE_LOADER_get0_properties": "OSSL_STORE_LOADER_get0_properties() returns a pointer to a property definition string, or NULL on error.",
    "OSSL_STORE_LOADER_is_a": "OSSL_STORE_LOADER_is_a() returns 1 if I<loader> was identifiable, otherwise 0.",
    "OSSL_STORE_LOADER_get0_description": "OSSL_STORE_LOADER_get0_description() returns a pointer to a decription, or NULL if there isn't one.",
    "OSSL_STORE_open_ex": "The functions with the types B<OSSL_STORE_open_fn>, B<OSSL_STORE_open_ex_fn>, B<OSSL_STORE_ctrl_fn>, B<OSSL_STORE_expect_fn>, B<OSSL_STORE_load_fn>, B<OSSL_STORE_eof_fn> and B<OSSL_STORE_close_fn> have the same return values as OSSL_STORE_open(), OSSL_STORE_open_ex(), OSSL_STORE_ctrl(), OSSL_STORE_expect(), OSSL_STORE_load(), OSSL_STORE_eof() and OSSL_STORE_close(), respectively.",
    "OSSL_STORE_LOADER_new": "OSSL_STORE_LOADER_new() returns a pointer to a B<OSSL_STORE_LOADER> on success, or NULL on failure.",
    "OSSL_STORE_LOADER_set_open": "OSSL_STORE_LOADER_set_open(), OSSL_STORE_LOADER_set_open_ex(), OSSL_STORE_LOADER_set_ctrl(), OSSL_STORE_LOADER_set_load(), OSSL_STORE_LOADER_set_eof() and OSSL_STORE_LOADER_set_close() return 1 on success, or 0 on failure.",
    "OSSL_STORE_LOADER_set_open_ex": "OSSL_STORE_LOADER_set_open(), OSSL_STORE_LOADER_set_open_ex(), OSSL_STORE_LOADER_set_ctrl(), OSSL_STORE_LOADER_set_load(), OSSL_STORE_LOADER_set_eof() and OSSL_STORE_LOADER_set_close() return 1 on success, or 0 on failure.",
    "OSSL_STORE_LOADER_set_ctrl": "OSSL_STORE_LOADER_set_open(), OSSL_STORE_LOADER_set_open_ex(), OSSL_STORE_LOADER_set_ctrl(), OSSL_STORE_LOADER_set_load(), OSSL_STORE_LOADER_set_eof() and OSSL_STORE_LOADER_set_close() return 1 on success, or 0 on failure.",
    "OSSL_STORE_LOADER_set_load": "OSSL_STORE_LOADER_set_open(), OSSL_STORE_LOADER_set_open_ex(), OSSL_STORE_LOADER_set_ctrl(), OSSL_STORE_LOADER_set_load(), OSSL_STORE_LOADER_set_eof() and OSSL_STORE_LOADER_set_close() return 1 on success, or 0 on failure.",
    "OSSL_STORE_LOADER_set_eof": "OSSL_STORE_LOADER_set_open(), OSSL_STORE_LOADER_set_open_ex(), OSSL_STORE_LOADER_set_ctrl(), OSSL_STORE_LOADER_set_load(), OSSL_STORE_LOADER_set_eof() and OSSL_STORE_LOADER_set_close() return 1 on success, or 0 on failure.",
    "OSSL_STORE_LOADER_set_close": "OSSL_STORE_LOADER_set_open(), OSSL_STORE_LOADER_set_open_ex(), OSSL_STORE_LOADER_set_ctrl(), OSSL_STORE_LOADER_set_load(), OSSL_STORE_LOADER_set_eof() and OSSL_STORE_LOADER_set_close() return 1 on success, or 0 on failure.",
    "OSSL_STORE_register_loader": "OSSL_STORE_register_loader() returns 1 on success, or 0 on failure.",
    "OSSL_STORE_unregister_loader": "OSSL_STORE_unregister_loader() returns the unregistered loader on success, or NULL on failure.",
    "RSA_sign_ASN1_OCTET_STRING": "RSA_sign_ASN1_OCTET_STRING() returns 1 on success, 0 otherwise. RSA_verify_ASN1_OCTET_STRING() returns 1 on successful verification, 0 otherwise.",
    "RSA_verify_ASN1_OCTET_STRING": "RSA_sign_ASN1_OCTET_STRING() returns 1 on success, 0 otherwise. RSA_verify_ASN1_OCTET_STRING() returns 1 on successful verification, 0 otherwise.",
    "SSL_CTX_set_tlsext_use_srtp": "SSL_CTX_set_tlsext_use_srtp() and SSL_set_tlsext_use_srtp() return 0 on success or 1 on error.",
    "SSL_set_tlsext_use_srtp": "SSL_CTX_set_tlsext_use_srtp() and SSL_set_tlsext_use_srtp() return 0 on success or 1 on error.",
    "SSL_get_srtp_profiles": "SSL_get_srtp_profiles() returns a stack of SRTP_PROTECTION_PROFILE objects on success or NULL on error or if no protection profiles have been configured.",
    "SSL_get_selected_srtp_profile": "SSL_get_selected_srtp_profile() returns a pointer to an SRTP_PROTECTION_PROFILE object if one has been negotiated or NULL otherwise.",
    "EVP_PKEY_todata": "EVP_PKEY_todata() and EVP_PKEY_export() return 1 for success and 0 for failure.",
    "EVP_PKEY_export": "EVP_PKEY_todata() and EVP_PKEY_export() return 1 for success and 0 for failure.",
    "EVP_PKEY_set1_encoded_public_key": "EVP_PKEY_set1_encoded_public_key() returns 1 for success and 0 or a negative value for failure.",
    "EVP_PKEY_get1_encoded_public_key": "EVP_PKEY_get1_encoded_public_key() return 1",
    "ASN1_STRING_new": "ASN1_STRING_new() and ASN1_STRING_type_new() return a valid B<ASN1_STRING> structure or NULL if an error occurred.",
    "ASN1_STRING_type_new": "ASN1_STRING_new() and ASN1_STRING_type_new() return a valid B<ASN1_STRING> structure or NULL if an error occurred.",
    "ASN1_STRING_free": "ASN1_STRING_free() does not return a value.",
    "SSL_CTX_set_cert_cb": "SSL_CTX_set_cert_cb() and SSL_set_cert_cb() do not return values.",
    "SSL_set_cert_cb": "SSL_CTX_set_cert_cb() and SSL_set_cert_cb() do not return values.",
    "EVP_PKEY_keygen_init": "EVP_PKEY_keygen_init(), EVP_PKEY_paramgen_init(), EVP_PKEY_keygen() and EVP_PKEY_paramgen() return 1 for success and 0 or a negative value for failure. In particular a return value of -2 indicates the operation is not supported by the public key algorithm.",
    "EVP_PKEY_paramgen_init": "EVP_PKEY_keygen_init(), EVP_PKEY_paramgen_init(), EVP_PKEY_keygen() and EVP_PKEY_paramgen() return 1 for success and 0 or a negative value for failure. In particular a return value of -2 indicates the operation is not supported by the public key algorithm.",
    "EVP_PKEY_keygen": "EVP_PKEY_keygen_init(), EVP_PKEY_paramgen_init(), EVP_PKEY_keygen() and EVP_PKEY_paramgen() return 1 for success and 0 or a negative value for failure. In particular a return value of -2 indicates the operation is not supported by the public key algorithm.",
    "EVP_PKEY_paramgen": "EVP_PKEY_keygen_init(), EVP_PKEY_paramgen_init(), EVP_PKEY_keygen() and EVP_PKEY_paramgen() return 1 for success and 0 or a negative value for failure. In particular a return value of -2 indicates the operation is not supported by the public key algorithm.",
    "EVP_PKEY_Q_keygen": "EVP_PKEY_Q_keygen() returns an B<EVP_PKEY>, or NULL on failure.",
    "EVP_SignInit_ex": "EVP_SignInit_ex(), EVP_SignUpdate(), EVP_SignFinal_ex() and EVP_SignFinal() return 1 for success and 0 for failure.",
    "EVP_SignUpdate": "EVP_SignInit_ex(), EVP_SignUpdate(), EVP_SignFinal_ex() and EVP_SignFinal() return 1 for success and 0 for failure.",
    "EVP_SignFinal_ex": "EVP_SignInit_ex(), EVP_SignUpdate(), EVP_SignFinal_ex() and EVP_SignFinal() return 1 for success and 0 for failure.",
    "EVP_SignFinal": "EVP_SignInit_ex(), EVP_SignUpdate(), EVP_SignFinal_ex() and EVP_SignFinal() return 1 for success and 0 for failure.",
    "CMS_encrypt_ex": "CMS_encrypt_ex() and CMS_encrypt() return either a CMS_ContentInfo structure or NULL if an error occurred. The error can be obtained from ERR_get_error(3).",
    "CMS_encrypt": "CMS_encrypt_ex() and CMS_encrypt() return either a CMS_ContentInfo structure or NULL if an error occurred. The error can be obtained from ERR_get_error(3).",
    "RAND_status": "RAND_event() returns RAND_status().",
    "RAND_poll": "RAND_poll() returns 1 if it generated seed data, 0 otherwise.",
    "RAND_event": "RAND_event() returns RAND_status().",
    "BN_mod_inverse": "BN_mod_inverse() returns the B<BIGNUM> containing the inverse, and NULL on error. The error codes can be obtained by L<ERR_get_error(3)>.",
    "CMS_uncompress": "CMS_uncompress() returns either 1 for success or 0 for failure. The error can be obtained from ERR_get_error(3)",
    "OSSL_CMP_STATUSINFO_new": "OSSL_CMP_STATUSINFO_new() returns a pointer to the structure on success, or NULL on error.",
    "OSSL_CMP_snprint_PKIStatusInfo": "OSSL_CMP_snprint_PKIStatusInfo() and OSSL_CMP_CTX_snprint_PKIStatus() return a copy of the buffer pointer containing the string or NULL on error.",
    "OSSL_CMP_CTX_snprint_PKIStatus": "OSSL_CMP_snprint_PKIStatusInfo() and OSSL_CMP_CTX_snprint_PKIStatus() return a copy of the buffer pointer containing the string or NULL on error.",
    "SSL_CTX_sessions": "SSL_CTX_sessions() returns a pointer to the lhash of B<SSL_SESSION>.",
    "BIO_new_ex": "BIO_new_ex() and BIO_new() return a newly created BIO or NULL if the call fails.",
    "BIO_new": "BIO_new_ex() and BIO_new() return a newly created BIO or NULL if the call fails.",
    "BIO_up_ref": "BIO_up_ref() and BIO_free() return 1 for success and 0 for failure.",
    "BIO_free": "BIO_up_ref() and BIO_free() return 1 for success and 0 for failure.",
    "BIO_free_all": "BIO_free_all() and BIO_vfree() do not return values.",
    "BIO_vfree": "BIO_free_all() and BIO_vfree() do not return values.",
    "SSL_client_hello_isv2": "SSL_client_hello_isv2() returns 1 for SSLv2-format ClientHellos and 0 otherwise.",
    "SSL_client_hello_get0_random": "SSL_client_hello_get0_random(), SSL_client_hello_get0_session_id(), SSL_client_hello_get0_ciphers(), and SSL_client_hello_get0_compression_methods() return the length of the corresponding ClientHello fields.  If zero is returned, the output pointer should not be assumed to be valid.",
    "SSL_client_hello_get0_session_id": "SSL_client_hello_get0_random(), SSL_client_hello_get0_session_id(), SSL_client_hello_get0_ciphers(), and SSL_client_hello_get0_compression_methods() return the length of the corresponding ClientHello fields.  If zero is returned, the output pointer should not be assumed to be valid.",
    "SSL_client_hello_get0_ciphers": "SSL_client_hello_get0_random(), SSL_client_hello_get0_session_id(), SSL_client_hello_get0_ciphers(), and SSL_client_hello_get0_compression_methods() return the length of the corresponding ClientHello fields.  If zero is returned, the output pointer should not be assumed to be valid.",
    "SSL_client_hello_get0_compression_methods": "SSL_client_hello_get0_random(), SSL_client_hello_get0_session_id(), SSL_client_hello_get0_ciphers(), and SSL_client_hello_get0_compression_methods() return the length of the corresponding ClientHello fields.  If zero is returned, the output pointer should not be assumed to be valid.",
    "SSL_client_hello_get0_ext": "SSL_client_hello_get0_ext() returns 1 if the extension of type 'type' is present, and 0 otherwise.",
    "SSL_client_hello_get1_extensions_present": "SSL_client_hello_get1_extensions_present() returns 1 on success and 0 on failure.",
    "SSL_CTX_dane_enable": "The functions SSL_CTX_dane_enable(), SSL_CTX_dane_mtype_set(), SSL_dane_enable() and SSL_dane_tlsa_add() return a positive value on success. Negative return values indicate resource problems (out of memory, etc.) in the SSL library, while a return value of B<0> indicates incorrect usage or invalid input, such as an unsupported TLSA record certificate usage, selector or matching type. Invalid input also includes malformed data, either a digest length that does not match the digest algorithm, or a C<Full(0)> (binary ASN.1 DER form) certificate or a public key that fails to parse.",
    "SSL_CTX_dane_mtype_set": "The functions SSL_CTX_dane_enable(), SSL_CTX_dane_mtype_set(), SSL_dane_enable() and SSL_dane_tlsa_add() return a positive value on success. Negative return values indicate resource problems (out of memory, etc.) in the SSL library, while a return value of B<0> indicates incorrect usage or invalid input, such as an unsupported TLSA record certificate usage, selector or matching type. Invalid input also includes malformed data, either a digest length that does not match the digest algorithm, or a C<Full(0)> (binary ASN.1 DER form) certificate or a public key that fails to parse.",
    "SSL_dane_enable": "The functions SSL_CTX_dane_enable(), SSL_CTX_dane_mtype_set(), SSL_dane_enable() and SSL_dane_tlsa_add() return a positive value on success. Negative return values indicate resource problems (out of memory, etc.) in the SSL library, while a return value of B<0> indicates incorrect usage or invalid input, such as an unsupported TLSA record certificate usage, selector or matching type. Invalid input also includes malformed data, either a digest length that does not match the digest algorithm, or a C<Full(0)> (binary ASN.1 DER form) certificate or a public key that fails to parse.",
    "SSL_dane_tlsa_add": "The functions SSL_CTX_dane_enable(), SSL_CTX_dane_mtype_set(), SSL_dane_enable() and SSL_dane_tlsa_add() return a positive value on success. Negative return values indicate resource problems (out of memory, etc.) in the SSL library, while a return value of B<0> indicates incorrect usage or invalid input, such as an unsupported TLSA record certificate usage, selector or matching type. Invalid input also includes malformed data, either a digest length that does not match the digest algorithm, or a C<Full(0)> (binary ASN.1 DER form) certificate or a public key that fails to parse.",
    "SSL_get0_dane_authority": "The functions SSL_get0_dane_authority() and SSL_get0_dane_tlsa() return a negative value when DANE authentication failed or was not enabled, a nonnegative value indicates the chain depth at which the TLSA record matched a chain certificate, or the depth of the top-most certificate, when the TLSA record is a full public key that is its signer.",
    "SSL_get0_dane_tlsa": "The functions SSL_get0_dane_authority() and SSL_get0_dane_tlsa() return a negative value when DANE authentication failed or was not enabled, a nonnegative value indicates the chain depth at which the TLSA record matched a chain certificate, or the depth of the top-most certificate, when the TLSA record is a full public key that is its signer.",
    "SSL_CTX_dane_set_flags": "The functions SSL_CTX_dane_set_flags(), SSL_CTX_dane_clear_flags(), SSL_dane_set_flags() and SSL_dane_clear_flags() return the B<flags> in effect before they were called.",
    "SSL_CTX_dane_clear_flags": "The functions SSL_CTX_dane_set_flags(), SSL_CTX_dane_clear_flags(), SSL_dane_set_flags() and SSL_dane_clear_flags() return the B<flags> in effect before they were called.",
    "SSL_dane_set_flags": "The functions SSL_CTX_dane_set_flags(), SSL_CTX_dane_clear_flags(), SSL_dane_set_flags() and SSL_dane_clear_flags() return the B<flags> in effect before they were called.",
    "SSL_dane_clear_flags": "The functions SSL_CTX_dane_set_flags(), SSL_CTX_dane_clear_flags(), SSL_dane_set_flags() and SSL_dane_clear_flags() return the B<flags> in effect before they were called.",
    "DSA_generate_parameters_ex": "DSA_generate_parameters_ex() returns a 1 on success, or 0 otherwise. The error codes can be obtained by L<ERR_get_error(3)>.",
    "DSA_generate_parameters": "DSA_generate_parameters() returns a pointer to the DSA structure or B<NULL> if the parameter generation fails.",
    "EVP_DigestSignInit": "EVP_DigestSignInit(), EVP_DigestSignUpdate(), EVP_DigestSignFinal() and EVP_DigestSign() return 1 for success and 0 for failure.",
    "EVP_DigestSignUpdate": "EVP_DigestSignInit(), EVP_DigestSignUpdate(), EVP_DigestSignFinal() and EVP_DigestSign() return 1 for success and 0 for failure.",
    "EVP_DigestSignFinal": "EVP_DigestSignInit(), EVP_DigestSignUpdate(), EVP_DigestSignFinal() and EVP_DigestSign() return 1 for success and 0 for failure.",
    "EVP_DigestSign": "EVP_DigestSignInit(), EVP_DigestSignUpdate(), EVP_DigestSignFinal() and EVP_DigestSign() return 1 for success and 0 for failure.",
    "OSSL_STORE_INFO_get_type": "OSSL_STORE_INFO_get_type() returns the STORE type number of the given B<OSSL_STORE_INFO>. There is no error value.",
    "OSSL_STORE_INFO_get0_NAME": "OSSL_STORE_INFO_get0_NAME(), OSSL_STORE_INFO_get0_NAME_description(), OSSL_STORE_INFO_get0_PARAMS(), OSSL_STORE_INFO_get0_PKEY(), OSSL_STORE_INFO_get0_CERT() and OSSL_STORE_INFO_get0_CRL() all return a pointer to the OpenSSL object on success, NULL otherwise.",
    "OSSL_STORE_INFO_get0_NAME_description": "OSSL_STORE_INFO_get0_NAME(), OSSL_STORE_INFO_get0_NAME_description(), OSSL_STORE_INFO_get0_PARAMS(), OSSL_STORE_INFO_get0_PKEY(), OSSL_STORE_INFO_get0_CERT() and OSSL_STORE_INFO_get0_CRL() all return a pointer to the OpenSSL object on success, NULL otherwise.",
    "OSSL_STORE_INFO_get0_PARAMS": "OSSL_STORE_INFO_get0_NAME(), OSSL_STORE_INFO_get0_NAME_description(), OSSL_STORE_INFO_get0_PARAMS(), OSSL_STORE_INFO_get0_PKEY(), OSSL_STORE_INFO_get0_CERT() and OSSL_STORE_INFO_get0_CRL() all return a pointer to the OpenSSL object on success, NULL otherwise.",
    "OSSL_STORE_INFO_get0_PKEY": "OSSL_STORE_INFO_get0_NAME(), OSSL_STORE_INFO_get0_NAME_description(), OSSL_STORE_INFO_get0_PARAMS(), OSSL_STORE_INFO_get0_PKEY(), OSSL_STORE_INFO_get0_CERT() and OSSL_STORE_INFO_get0_CRL() all return a pointer to the OpenSSL object on success, NULL otherwise.",
    "OSSL_STORE_INFO_get0_CERT": "OSSL_STORE_INFO_get0_NAME(), OSSL_STORE_INFO_get0_NAME_description(), OSSL_STORE_INFO_get0_PARAMS(), OSSL_STORE_INFO_get0_PKEY(), OSSL_STORE_INFO_get0_CERT() and OSSL_STORE_INFO_get0_CRL() all return a pointer to the OpenSSL object on success, NULL otherwise.",
    "OSSL_STORE_INFO_get0_CRL": "OSSL_STORE_INFO_get0_NAME(), OSSL_STORE_INFO_get0_NAME_description(), OSSL_STORE_INFO_get0_PARAMS(), OSSL_STORE_INFO_get0_PKEY(), OSSL_STORE_INFO_get0_CERT() and OSSL_STORE_INFO_get0_CRL() all return a pointer to the OpenSSL object on success, NULL otherwise.",
    "OSSL_STORE_INFO_get1_NAME": "OSSL_STORE_INFO_get1_NAME(), OSSL_STORE_INFO_get1_NAME_description(), OSSL_STORE_INFO_get1_PARAMS(), OSSL_STORE_INFO_get1_PKEY(), OSSL_STORE_INFO_get1_CERT() and OSSL_STORE_INFO_get1_CRL() all return a pointer to a duplicate of the OpenSSL object on success, NULL otherwise.",
    "OSSL_STORE_INFO_get1_NAME_description": "OSSL_STORE_INFO_get1_NAME(), OSSL_STORE_INFO_get1_NAME_description(), OSSL_STORE_INFO_get1_PARAMS(), OSSL_STORE_INFO_get1_PKEY(), OSSL_STORE_INFO_get1_CERT() and OSSL_STORE_INFO_get1_CRL() all return a pointer to a duplicate of the OpenSSL object on success, NULL otherwise.",
    "OSSL_STORE_INFO_get1_PARAMS": "OSSL_STORE_INFO_get1_NAME(), OSSL_STORE_INFO_get1_NAME_description(), OSSL_STORE_INFO_get1_PARAMS(), OSSL_STORE_INFO_get1_PKEY(), OSSL_STORE_INFO_get1_CERT() and OSSL_STORE_INFO_get1_CRL() all return a pointer to a duplicate of the OpenSSL object on success, NULL otherwise.",
    "OSSL_STORE_INFO_get1_PKEY": "OSSL_STORE_INFO_get1_NAME(), OSSL_STORE_INFO_get1_NAME_description(), OSSL_STORE_INFO_get1_PARAMS(), OSSL_STORE_INFO_get1_PKEY(), OSSL_STORE_INFO_get1_CERT() and OSSL_STORE_INFO_get1_CRL() all return a pointer to a duplicate of the OpenSSL object on success, NULL otherwise.",
    "OSSL_STORE_INFO_get1_CERT": "OSSL_STORE_INFO_get1_NAME(), OSSL_STORE_INFO_get1_NAME_description(), OSSL_STORE_INFO_get1_PARAMS(), OSSL_STORE_INFO_get1_PKEY(), OSSL_STORE_INFO_get1_CERT() and OSSL_STORE_INFO_get1_CRL() all return a pointer to a duplicate of the OpenSSL object on success, NULL otherwise.",
    "OSSL_STORE_INFO_get1_CRL": "OSSL_STORE_INFO_get1_NAME(), OSSL_STORE_INFO_get1_NAME_description(), OSSL_STORE_INFO_get1_PARAMS(), OSSL_STORE_INFO_get1_PKEY(), OSSL_STORE_INFO_get1_CERT() and OSSL_STORE_INFO_get1_CRL() all return a pointer to a duplicate of the OpenSSL object on success, NULL otherwise.",
    "OSSL_STORE_INFO_type_string": "OSSL_STORE_INFO_type_string() returns a string on success, or NULL on failure.",
    "OSSL_STORE_INFO_new_NAME": "OSSL_STORE_INFO_new_NAME(), OSSL_STORE_INFO_new_PARAMS(), OSSL_STORE_INFO_new_PKEY(), OSSL_STORE_INFO_new_CERT() and OSSL_STORE_INFO_new_CRL() return a B<OSSL_STORE_INFO> pointer on success, or NULL on failure.",
    "OSSL_STORE_INFO_new_PARAMS": "OSSL_STORE_INFO_new_NAME(), OSSL_STORE_INFO_new_PARAMS(), OSSL_STORE_INFO_new_PKEY(), OSSL_STORE_INFO_new_CERT() and OSSL_STORE_INFO_new_CRL() return a B<OSSL_STORE_INFO> pointer on success, or NULL on failure.",
    "OSSL_STORE_INFO_new_PKEY": "OSSL_STORE_INFO_new_NAME(), OSSL_STORE_INFO_new_PARAMS(), OSSL_STORE_INFO_new_PKEY(), OSSL_STORE_INFO_new_CERT() and OSSL_STORE_INFO_new_CRL() return a B<OSSL_STORE_INFO> pointer on success, or NULL on failure.",
    "OSSL_STORE_INFO_new_CERT": "OSSL_STORE_INFO_new_NAME(), OSSL_STORE_INFO_new_PARAMS(), OSSL_STORE_INFO_new_PKEY(), OSSL_STORE_INFO_new_CERT() and OSSL_STORE_INFO_new_CRL() return a B<OSSL_STORE_INFO> pointer on success, or NULL on failure.",
    "OSSL_STORE_INFO_new_CRL": "OSSL_STORE_INFO_new_NAME(), OSSL_STORE_INFO_new_PARAMS(), OSSL_STORE_INFO_new_PKEY(), OSSL_STORE_INFO_new_CERT() and OSSL_STORE_INFO_new_CRL() return a B<OSSL_STORE_INFO> pointer on success, or NULL on failure.",
    "OSSL_STORE_INFO_set0_NAME_description": "OSSL_STORE_INFO_set0_NAME_description() returns 1 on success, or 0 on failure.",
    "SSL_get0_peer_scts": "SSL_get0_peer_scts() returns a list of SCTs found, or NULL if an error occurs.",
    "BN_BLINDING_new": "BN_BLINDING_new() returns the newly allocated B<BN_BLINDING> structure or NULL in case of an error.",
    "BN_BLINDING_update": "BN_BLINDING_update(), BN_BLINDING_convert(), BN_BLINDING_invert(), BN_BLINDING_convert_ex() and BN_BLINDING_invert_ex() return 1 on success and 0 if an error occurred.",
    "BN_BLINDING_convert": "BN_BLINDING_update(), BN_BLINDING_convert(), BN_BLINDING_invert(), BN_BLINDING_convert_ex() and BN_BLINDING_invert_ex() return 1 on success and 0 if an error occurred.",
    "BN_BLINDING_invert": "BN_BLINDING_update(), BN_BLINDING_convert(), BN_BLINDING_invert(), BN_BLINDING_convert_ex() and BN_BLINDING_invert_ex() return 1 on success and 0 if an error occurred.",
    "BN_BLINDING_convert_ex": "BN_BLINDING_update(), BN_BLINDING_convert(), BN_BLINDING_invert(), BN_BLINDING_convert_ex() and BN_BLINDING_invert_ex() return 1 on success and 0 if an error occurred.",
    "BN_BLINDING_invert_ex": "BN_BLINDING_update(), BN_BLINDING_convert(), BN_BLINDING_invert(), BN_BLINDING_convert_ex() and BN_BLINDING_invert_ex() return 1 on success and 0 if an error occurred.",
    "BN_BLINDING_is_current_thread": "BN_BLINDING_is_current_thread() returns 1 if the current thread owns the B<BN_BLINDING> object, 0 otherwise.",
    "BN_BLINDING_set_current_thread": "BN_BLINDING_set_current_thread() doesn't return anything.",
    "BN_BLINDING_lock": "BN_BLINDING_lock(), BN_BLINDING_unlock() return 1 if the operation succeeded or 0 on error.",
    "BN_BLINDING_unlock": "BN_BLINDING_lock(), BN_BLINDING_unlock() return 1 if the operation succeeded or 0 on error.",
    "BN_BLINDING_get_flags": "BN_BLINDING_get_flags() returns the currently set B<BN_BLINDING> flags (a B<unsigned long> value).",
    "BN_BLINDING_create_param": "BN_BLINDING_create_param() returns the newly created B<BN_BLINDING> parameters or NULL on error.",
    "OSSL_DECODER_from_bio": "OSSL_DECODER_from_bio() and OSSL_DECODER_from_fp() return 1 on success, or 0 on failure.",
    "OSSL_DECODER_from_fp": "OSSL_DECODER_from_bio() and OSSL_DECODER_from_fp() return 1 on success, or 0 on failure.",
    "NCONF_load": "NCONF_load() returns 1 on success or 0 on error.",
    "NCONF_new_ex": "NCONF_new_ex() and NCONF_new() return a newly created I<CONF> object or NULL if an error occurs.",
    "NCONF_new": "NCONF_new_ex() and NCONF_new() return a newly created I<CONF> object or NULL if an error occurs.",
    "OSSL_CMP_MSG_get0_header": "OSSL_CMP_MSG_get0_header() returns the intended pointer value as described above or NULL if the respective entry does not exist and on error.",
    "OSSL_CMP_MSG_get_bodytype": "OSSL_CMP_MSG_get_bodytype() returns the body type or -1 on error.",
    "OSSL_CMP_CTX_setup_CRM": "OSSL_CMP_CTX_setup_CRM() returns a pointer to a OSSL_CRMF_MSG on success, NULL on error.",
    "d2i_OSSL_CMP_MSG_bio": "OSSL_CMP_MSG_read() and d2i_OSSL_CMP_MSG_bio() return the parsed CMP message or NULL on error.",
    "OSSL_CMP_MSG_read": "OSSL_CMP_MSG_read() and d2i_OSSL_CMP_MSG_bio() return the parsed CMP message or NULL on error.",
    "OSSL_CMP_MSG_write": "OSSL_CMP_MSG_write() and i2d_OSSL_CMP_MSG_bio() return the number of bytes successfully encoded or a negative value if an error occurs.",
    "i2d_OSSL_CMP_MSG_bio": "OSSL_CMP_MSG_write() and i2d_OSSL_CMP_MSG_bio() return the number of bytes successfully encoded or a negative value if an error occurs.",
    "OSSL_CMP_MSG_update_transactionID": "OSSL_CMP_MSG_update_transactionID() returns 1 on success, 0 on error.",
    "EVP_KEYEXCH_fetch": "EVP_KEYEXCH_fetch() returns a pointer to a B<EVP_KEYEXCH> for success or NULL for failure.",
    "EVP_KEYEXCH_up_ref": "EVP_KEYEXCH_up_ref() returns 1 for success or 0 otherwise.",
    "EVP_KEYEXCH_names_do_all": "EVP_KEYEXCH_names_do_all() returns 1 if the callback was called for all names. A return value of 0 means that the callback was not called for any names.",
    "EVP_KEYEXCH_is_a": "EVP_KEYEXCH_is_a() returns 1 of I<exchange> was identifiable, otherwise 0.",
    "EVP_KEYEXCH_gettable_ctx_params": "EVP_KEYEXCH_gettable_ctx_params() and EVP_KEYEXCH_settable_ctx_params() return a constant B<OSSL_PARAM> array or NULL on error.",
    "EVP_KEYEXCH_settable_ctx_params": "EVP_KEYEXCH_gettable_ctx_params() and EVP_KEYEXCH_settable_ctx_params() return a constant B<OSSL_PARAM> array or NULL on error.",
    "BIO_s_mem": "BIO_s_mem() and BIO_s_secmem() return a valid memory B<BIO_METHOD> structure.",
    "BIO_s_secmem": "BIO_s_mem() and BIO_s_secmem() return a valid memory B<BIO_METHOD> structure.",
    "BIO_set_mem_eof_return": "BIO_set_mem_eof_return(), BIO_set_mem_buf() and BIO_get_mem_ptr() return 1 on success or a value which is less than or equal to 0 if an error occurred.",
    "BIO_set_mem_buf": "BIO_set_mem_eof_return(), BIO_set_mem_buf() and BIO_get_mem_ptr() return 1 on success or a value which is less than or equal to 0 if an error occurred.",
    "BIO_get_mem_ptr": "BIO_set_mem_eof_return(), BIO_set_mem_buf() and BIO_get_mem_ptr() return 1 on success or a value which is less than or equal to 0 if an error occurred.",
    "BIO_get_mem_data": "BIO_get_mem_data() returns the total number of bytes available on success, 0 if b is NULL, or a negative value in case of other errors.",
    "BIO_new_mem_buf": "BIO_new_mem_buf() returns a valid B<BIO> structure on success or NULL on error.",
    "OSSL_ESS_signing_cert_new_init": "OSSL_ESS_signing_cert_new_init() and OSSL_ESS_signing_cert_v2_new_init() return a pointer to the new structure or NULL on malloc failure.",
    "OSSL_ESS_signing_cert_v2_new_init": "OSSL_ESS_signing_cert_new_init() and OSSL_ESS_signing_cert_v2_new_init() return a pointer to the new structure or NULL on malloc failure.",
    "OSSL_ESS_check_signing_certs": "OSSL_ESS_check_signing_certs() returns 1 on success, 0 if a required certificate cannot be found, -1 on other error.",
    "OPENSSL_LH_new": "B<lh_I<TYPE>_new>() and OPENSSL_LH_new() return NULL on error, otherwise a pointer to the new B<LHASH> structure.",
    "OPENSSL_LH_insert": "When a hash table entry is replaced, B<lh_I<TYPE>_insert>() or OPENSSL_LH_insert() return the value being replaced. NULL is returned on normal operation and on error.",
    "OPENSSL_LH_delete": "B<lh_I<TYPE>_delete>() and OPENSSL_LH_delete() return the entry being deleted. NULL is returned if there is no such value in the hash table.",
    "OPENSSL_LH_retrieve": "B<lh_I<TYPE>_retrieve>() and OPENSSL_LH_retrieve() return the hash table entry if it has been found, NULL otherwise.",
    "OPENSSL_LH_error": "B<lh_I<TYPE>_error>() and OPENSSL_LH_error() return 1 if an error occurred in the last operation, 0 otherwise. It's meaningful only after non-retrieve operations.",
    "OPENSSL_LH_free": "B<lh_I<TYPE>_free>(), OPENSSL_LH_free(), B<lh_I<TYPE>_flush>(), OPENSSL_LH_flush(), B<lh_I<TYPE>_doall>() OPENSSL_LH_doall(), B<lh_I<TYPE>_doall_arg>() and OPENSSL_LH_doall_arg() return no values.",
    "OPENSSL_LH_flush": "B<lh_I<TYPE>_free>(), OPENSSL_LH_free(), B<lh_I<TYPE>_flush>(), OPENSSL_LH_flush(), B<lh_I<TYPE>_doall>() OPENSSL_LH_doall(), B<lh_I<TYPE>_doall_arg>() and OPENSSL_LH_doall_arg() return no values.",
    "OPENSSL_LH_doall": "B<lh_I<TYPE>_free>(), OPENSSL_LH_free(), B<lh_I<TYPE>_flush>(), OPENSSL_LH_flush(), B<lh_I<TYPE>_doall>() OPENSSL_LH_doall(), B<lh_I<TYPE>_doall_arg>() and OPENSSL_LH_doall_arg() return no values.",
    "OPENSSL_LH_doall_arg": "B<lh_I<TYPE>_free>(), OPENSSL_LH_free(), B<lh_I<TYPE>_flush>(), OPENSSL_LH_flush(), B<lh_I<TYPE>_doall>() OPENSSL_LH_doall(), B<lh_I<TYPE>_doall_arg>() and OPENSSL_LH_doall_arg() return no values.",
    "SSL_export_keying_material": "SSL_export_keying_material() returns 0 or -1 on failure or 1 on success.",
    "SSL_export_keying_material_early": "SSL_export_keying_material_early() returns 0 on failure or 1 on success.",
    "SSL_get_current_cipher": "SSL_get_current_cipher() returns the cipher actually used, or NULL if no session has been established.",
    "SSL_get_pending_cipher": "SSL_get_pending_cipher() returns the cipher to be used at the next change of cipher suite, or NULL if no such cipher is known.",
    "BIO_find_type": "BIO_find_type() returns a matching BIO or NULL for no match.",
    "BIO_next": "BIO_next() returns the next BIO in a chain.",
    "BIO_method_type": "BIO_method_type() returns the type of the BIO B<b>.",
    "SSL_SESSION_print": "SSL_SESSION_print(), SSL_SESSION_print_fp() and SSL_SESSION_print_keylog return 1 on success or 0 on error.",
    "SSL_SESSION_print_fp": "SSL_SESSION_print(), SSL_SESSION_print_fp() and SSL_SESSION_print_keylog return 1 on success or 0 on error.",
    "ECPKParameters_print": "ECPKParameters_print() and ECPKParameters_print_fp() return 1 for success and 0 if an error occurs.",
    "ECPKParameters_print_fp": "ECPKParameters_print() and ECPKParameters_print_fp() return 1 for success and 0 if an error occurs.",
    "X509_build_chain": "X509_build_chain() returns NULL on error, else a stack of certificates.",
    "X509_verify_cert": "Both X509_verify_cert() and X509_STORE_CTX_verify() return 1 if a complete chain can be built and validated, otherwise they return 0, and in exceptional circumstances (such as malloc failure and internal errors) they can also return a negative code.",
    "X509_STORE_CTX_verify": "Both X509_verify_cert() and X509_STORE_CTX_verify() return 1 if a complete chain can be built and validated, otherwise they return 0, and in exceptional circumstances (such as malloc failure and internal errors) they can also return a negative code.",
    "BIO_read_ex": "BIO_read_ex() returns 1 if data was successfully read, and 0 otherwise.",
    "BIO_write_ex": "BIO_write_ex() returns 1 if no error was encountered writing data, 0 otherwise. Requesting to write 0 bytes is not considered an error.",
    "BIO_write": "BIO_write() returns -2 if the \"write\" operation is not implemented by the BIO or -1 on other errors. Otherwise it returns the number of bytes written. This may be 0 if the BIO I<b> is NULL or I<dlen <= 0>.",
    "BIO_gets": "BIO_gets() returns -2 if the \"gets\" operation is not implemented by the BIO or -1 on other errors. Otherwise it typically returns the amount of data read, but depending on the implementation it may return only the length up to the first NUL character contained in the data read. In any case the trailing NUL that is added after the data read is not included in the length returned.",
    "X509_STORE_new": "X509_STORE_new() returns a newly created X509_STORE or NULL if the call fails.",
    "X509_STORE_up_ref": "X509_STORE_up_ref(), X509_STORE_lock() and X509_STORE_unlock() return 1 for success and 0 for failure.",
    "X509_STORE_lock": "X509_STORE_up_ref(), X509_STORE_lock() and X509_STORE_unlock() return 1 for success and 0 for failure.",
    "X509_STORE_unlock": "X509_STORE_up_ref(), X509_STORE_lock() and X509_STORE_unlock() return 1 for success and 0 for failure.",
    "X509_STORE_free": "X509_STORE_free() does not return values.",
    "SMIME_write_CMS": "SMIME_write_CMS() returns 1 for success or 0 for failure.",
    "SSL_CTX_add_extra_chain_cert": "SSL_CTX_add_extra_chain_cert() and SSL_CTX_clear_extra_chain_certs() return 1 on success and 0 for failure. Check out the error stack to find out the reason for failure.",
    "SSL_CTX_clear_extra_chain_certs": "SSL_CTX_add_extra_chain_cert() and SSL_CTX_clear_extra_chain_certs() return 1 on success and 0 for failure. Check out the error stack to find out the reason for failure.",
    "SSL_CTX_set_tlsext_servername_callback": "SSL_CTX_set_tlsext_servername_callback() and SSL_CTX_set_tlsext_servername_arg() both always return 1 indicating success. SSL_set_tlsext_host_name() returns 1 on success, 0 in case of error.",
    "SSL_CTX_set_tlsext_servername_arg": "SSL_CTX_set_tlsext_servername_callback() and SSL_CTX_set_tlsext_servername_arg() both always return 1 indicating success. SSL_set_tlsext_host_name() returns 1 on success, 0 in case of error.",
    "SSL_set_tlsext_host_name": "SSL_CTX_set_tlsext_servername_callback() and SSL_CTX_set_tlsext_servername_arg() both always return 1 indicating success. SSL_set_tlsext_host_name() returns 1 on success, 0 in case of error.",
    "EC_KEY_get_enc_flags": "EC_KEY_get_enc_flags() returns the value of the current encoding flags for the EC_KEY.",
    "ASN1_item_new_ex": "ASN1_item_new_ex() and ASN1_item_new() return a pointer to the newly created B<ASN1_VALUE> or NULL on error.",
    "ASN1_item_new": "ASN1_item_new_ex() and ASN1_item_new() return a pointer to the newly created B<ASN1_VALUE> or NULL on error.",
    "PKCS7_sign_add_signers": "PKCS7_sign_add_signers() returns an internal pointer to the PKCS7_SIGNER_INFO structure just added or NULL if an error occurs.",
    "SSL_CTX_set_default_verify_paths": "SSL_CTX_set_default_verify_paths(), SSL_CTX_set_default_verify_dir() and SSL_CTX_set_default_verify_file() all return 1 on success or 0 on failure. A missing default location is still treated as a success.",
    "SSL_CTX_set_default_verify_dir": "SSL_CTX_set_default_verify_paths(), SSL_CTX_set_default_verify_dir() and SSL_CTX_set_default_verify_file() all return 1 on success or 0 on failure. A missing default location is still treated as a success.",
    "SSL_CTX_set_default_verify_file": "SSL_CTX_set_default_verify_paths(), SSL_CTX_set_default_verify_dir() and SSL_CTX_set_default_verify_file() all return 1 on success or 0 on failure. A missing default location is still treated as a success.",
    "SRP_create_verifier_BN_ex": "SRP_create_verifier_BN_ex() and SRP_create_verifier_BN() return 1 on success and 0 on failure.",
    "SRP_create_verifier_BN": "SRP_create_verifier_BN_ex() and SRP_create_verifier_BN() return 1 on success and 0 on failure.",
    "SRP_create_verifier_ex": "SRP_create_verifier_ex() and SRP_create_verifier() return NULL on failure and a non-NULL value on success: \"*\" if I<N> is not NULL, the selected group id otherwise. This value should not be freed.",
    "SRP_create_verifier": "SRP_create_verifier_ex() and SRP_create_verifier() return NULL on failure and a non-NULL value on success: \"*\" if I<N> is not NULL, the selected group id otherwise. This value should not be freed.",
    "SRP_check_known_gN_param": "SRP_check_known_gN_param() returns the text representation of the group id (i.e. the prime bit size) or NULL if the arguments are not valid SRP group parameters. This value should not be freed.",
    "SRP_get_default_gN": "SRP_get_default_gN() returns NULL if I<id> is not a valid group size, or the 8192-bit group parameters if I<id> is NULL.",
    "ASN1_item_d2i_bio": "ASN1_item_d2i_bio() returns a pointer to an B<ASN1_VALUE> or NULL.",
    "ASN1_item_i2d_mem_bio": "ASN1_item_i2d_mem_bio() returns a pointer to a memory BIO or NULL on error.",
    "BIO_s_null": "BIO_s_null() returns the null sink BIO method.",
    "BIO_set_conn_address": "BIO_set_conn_address(), BIO_set_conn_port(), and BIO_set_conn_ip_family() always return 1.",
    "BIO_set_conn_port": "BIO_set_conn_address(), BIO_set_conn_port(), and BIO_set_conn_ip_family() always return 1.",
    "BIO_set_conn_ip_family": "BIO_set_conn_address(), BIO_set_conn_port(), and BIO_set_conn_ip_family() always return 1.",
    "BIO_set_conn_hostname": "BIO_set_conn_hostname() returns 1 on success and 0 on failure.",
    "BIO_get_conn_address": "BIO_get_conn_address() returns the address information or NULL if none was set.",
    "BIO_get_conn_hostname": "BIO_get_conn_hostname() returns the connected hostname or NULL if none was set.",
    "BIO_get_conn_ip_family": "BIO_get_conn_ip_family() returns the address family or -1 if none was set.",
    "BIO_get_conn_port": "BIO_get_conn_port() returns a string representing the connected port or NULL if not set.",
    "BIO_set_nbio": "BIO_set_nbio() always returns 1.",
    "BIO_do_connect": "BIO_do_connect() returns 1 if the connection was successfully established and 0 or -1 if the connection failed.",
    "OPENSSL_atexit": "The functions OPENSSL_init_crypto, OPENSSL_atexit() and OPENSSL_INIT_set_config_appname() return 1 on success or 0 on error.",
    "OPENSSL_INIT_set_config_appname": "The functions OPENSSL_init_crypto, OPENSSL_atexit() and OPENSSL_INIT_set_config_appname() return 1 on success or 0 on error.",
    "DH_meth_new": "DH_meth_new() and DH_meth_dup() return the newly allocated DH_METHOD object or NULL on failure.",
    "DH_meth_dup": "DH_meth_new() and DH_meth_dup() return the newly allocated DH_METHOD object or NULL on failure.",
    "DH_meth_get0_name": "DH_meth_get0_name() and DH_meth_get_flags() return the name and flags associated with the DH_METHOD respectively.",
    "DH_meth_get_flags": "DH_meth_get0_name() and DH_meth_get_flags() return the name and flags associated with the DH_METHOD respectively.",
    "DH_meth_set1_name": "DH_meth_set1_name() and all DH_meth_set_*() functions return 1 on success or 0 on failure.",
    "EVP_PKEY_sign_init": "EVP_PKEY_sign_init() and EVP_PKEY_sign() return 1 for success and 0 or a negative value for failure. In particular a return value of -2 indicates the operation is not supported by the public key algorithm.",
    "EVP_PKEY_sign": "EVP_PKEY_sign_init() and EVP_PKEY_sign() return 1 for success and 0 or a negative value for failure. In particular a return value of -2 indicates the operation is not supported by the public key algorithm.",
    "RAND_set_rand_method": "RAND_set_rand_method() returns 1 on success and 0 on failure. RAND_get_rand_method() and RAND_OpenSSL() return pointers to the respective methods.",
    "RAND_get_rand_method": "RAND_set_rand_method() returns 1 on success and 0 on failure. RAND_get_rand_method() and RAND_OpenSSL() return pointers to the respective methods.",
    "RAND_OpenSSL": "RAND_set_rand_method() returns 1 on success and 0 on failure. RAND_get_rand_method() and RAND_OpenSSL() return pointers to the respective methods.",
    "ASN1_TYPE_get": "ASN1_TYPE_get() returns the type of the B<ASN1_TYPE> argument.",
    "ASN1_TYPE_set": "ASN1_TYPE_set() does not return a value.",
    "ASN1_TYPE_set1": "ASN1_TYPE_set1() returns 1 for success and 0 for failure.",
    "ASN1_TYPE_cmp": "ASN1_TYPE_cmp() returns 0 if the types are identical and nonzero otherwise.",
    "ASN1_TYPE_unpack_sequence": "ASN1_TYPE_unpack_sequence() returns a pointer to an ASN.1 structure or NULL on failure.",
    "ASN1_TYPE_pack_sequence": "ASN1_TYPE_pack_sequence() return an B<ASN1_TYPE> structure if it succeeds or NULL on failure.",
    "OSSL_trace_enabled": "OSSL_trace_enabled() returns 1 if tracing for the given I<type> is operational and enabled, otherwise 0.",
    "OSSL_trace_begin": "OSSL_trace_begin() returns a B<BIO> pointer if the given I<type> is enabled, otherwise NULL.",
    "PKCS12_item_decrypt_d2i": "PKCS12_item_decrypt_d2i() and PKCS12_item_decrypt_d2i_ex() return the decrypted object or NULL if an error occurred.",
    "PKCS12_item_decrypt_d2i_ex": "PKCS12_item_decrypt_d2i() and PKCS12_item_decrypt_d2i_ex() return the decrypted object or NULL if an error occurred.",
    "PKCS12_item_i2d_encrypt": "PKCS12_item_i2d_encrypt() and PKCS12_item_i2d_encrypt_ex() return the encrypted data as an ASN.1 Octet String or NULL if an error occurred.",
    "PKCS12_item_i2d_encrypt_ex": "PKCS12_item_i2d_encrypt() and PKCS12_item_i2d_encrypt_ex() return the encrypted data as an ASN.1 Octet String or NULL if an error occurred.",
    "ASN1_STRING_TABLE_add": "ASN1_STRING_TABLE_add() returns 1 on success, 0 if an error occurred.",
    "ASN1_STRING_TABLE_get": "ASN1_STRING_TABLE_get() returns a valid B<ASN1_STRING_TABLE> structure or NULL if nothing is found.",
    "ASN1_STRING_TABLE_cleanup": "ASN1_STRING_TABLE_cleanup() does not return a value.",
    "ASN1_ITEM_lookup": "ASN1_ITEM_lookup() and ASN1_ITEM_get() return a valid B<ASN1_ITEM> structure or NULL if an error occurred.",
    "ASN1_ITEM_get": "ASN1_ITEM_lookup() and ASN1_ITEM_get() return a valid B<ASN1_ITEM> structure or NULL if an error occurred.",
    "SSL_set_verify_result": "SSL_set_verify_result() does not provide a return value.",
    "BN_bn2bin": "BN_bn2bin() returns the length of the big-endian number placed at B<to>. BN_bin2bn() returns the B<BIGNUM>, NULL on error.",
    "BN_bin2bn": "BN_bn2bin() returns the length of the big-endian number placed at B<to>. BN_bin2bn() returns the B<BIGNUM>, NULL on error.",
    "BN_bn2binpad": "BN_bn2binpad() returns the number of bytes written or -1 if the supplied buffer is too small.",
    "BN_bn2hex": "BN_bn2hex() and BN_bn2dec() return a null-terminated string, or NULL on error. BN_hex2bn() and BN_dec2bn() return the number of characters used in parsing, or 0 on error, in which case no new B<BIGNUM> will be created.",
    "BN_bn2dec": "BN_bn2hex() and BN_bn2dec() return a null-terminated string, or NULL on error. BN_hex2bn() and BN_dec2bn() return the number of characters used in parsing, or 0 on error, in which case no new B<BIGNUM> will be created.",
    "BN_hex2bn": "BN_bn2hex() and BN_bn2dec() return a null-terminated string, or NULL on error. BN_hex2bn() and BN_dec2bn() return the number of characters used in parsing, or 0 on error, in which case no new B<BIGNUM> will be created.",
    "BN_dec2bn": "BN_bn2hex() and BN_bn2dec() return a null-terminated string, or NULL on error. BN_hex2bn() and BN_dec2bn() return the number of characters used in parsing, or 0 on error, in which case no new B<BIGNUM> will be created.",
    "BN_print_fp": "BN_print_fp() and BN_print() return 1 on success, 0 on write errors.",
    "BN_print": "BN_print_fp() and BN_print() return 1 on success, 0 on write errors.",
    "BN_bn2mpi": "BN_bn2mpi() returns the length of the representation. BN_mpi2bn() returns the B<BIGNUM>, and NULL on error.",
    "BN_mpi2bn": "BN_bn2mpi() returns the length of the representation. BN_mpi2bn() returns the B<BIGNUM>, and NULL on error.",
    "EVP_PKEY_get_default_digest_name": "EVP_PKEY_get_default_digest_name() and EVP_PKEY_get_default_digest_nid() both return 1 if the message digest is advisory (that is other digests can be used) and 2 if it is mandatory (other digests can not be used). They return 0 or a negative value for failure.  In particular a return value of -2 indicates the operation is not supported by the public key algorithm.",
    "EVP_PKEY_get_default_digest_nid": "EVP_PKEY_get_default_digest_name() and EVP_PKEY_get_default_digest_nid() both return 1 if the message digest is advisory (that is other digests can be used) and 2 if it is mandatory (other digests can not be used). They return 0 or a negative value for failure.  In particular a return value of -2 indicates the operation is not supported by the public key algorithm.",
    "SRP_user_pwd_set1_ids": "SRP_user_pwd_set1_ids() returns 1 on success and 0 on failure or if B<id> was NULL.",
    "SRP_user_pwd_set0_sv": "SRP_user_pwd_set0_sv() returns 1 if both B<s> and B<v> are not NULL, 0 otherwise.",
    "SSL_get_shared_sigalgs": "SSL_get_shared_sigalgs() and SSL_get_sigalgs() return the number of signature algorithms or B<0> if the B<idx> parameter is out of range.",
    "SSL_get_sigalgs": "SSL_get_shared_sigalgs() and SSL_get_sigalgs() return the number of signature algorithms or B<0> if the B<idx> parameter is out of range.",
    "BN_get_word": "BN_get_word() returns the value B<a>, or all-bits-set if B<a> cannot be represented as a single integer.",
    "BN_one": "BN_one() and BN_set_word() return 1 on success, 0 otherwise. BN_value_one() returns the constant. BN_zero() never fails and returns no value.",
    "BN_set_word": "BN_one() and BN_set_word() return 1 on success, 0 otherwise. BN_value_one() returns the constant. BN_zero() never fails and returns no value.",
    "BN_value_one": "BN_one() and BN_set_word() return 1 on success, 0 otherwise. BN_value_one() returns the constant. BN_zero() never fails and returns no value.",
    "BN_zero": "BN_one() and BN_set_word() return 1 on success, 0 otherwise. BN_value_one() returns the constant. BN_zero() never fails and returns no value.",
    "CMS_sign_receipt": "CMS_sign_receipt() returns either a valid CMS_ContentInfo structure or NULL if an error occurred.  The error can be obtained from ERR_get_error(3).",
    "EVP_PKEY_get_group_name": "EVP_PKEY_get_group_name() returns 1 if the group name could be filled in, otherwise 0.",
    "OCSP_sendreq_new": "OCSP_sendreq_new() returns a valid B<OSSL_HTTP_REQ_CTX> structure or NULL if an error occurred.",
    "OCSP_sendreq_nbio": "OCSP_sendreq_nbio() returns 1 for success, 0 on error, -1 if retry is needed.",
    "OCSP_sendreq_bio": "OCSP_sendreq_bio() returns the B<OCSP_RESPONSE> structure sent by the responder or NULL if an error occurred.",
    "X509_LOOKUP_new": "X509_LOOKUP_new() returns a B<X509_LOOKUP> pointer when successful, or NULL on error.",
    "X509_LOOKUP_init": "X509_LOOKUP_init() and X509_LOOKUP_shutdown() return 1 on success, or 0 on error.",
    "X509_LOOKUP_shutdown": "X509_LOOKUP_init() and X509_LOOKUP_shutdown() return 1 on success, or 0 on error.",
    "X509_LOOKUP_ctrl": "X509_LOOKUP_ctrl() returns -1 if the B<X509_LOOKUP> doesn't have an associated B<X509_LOOKUP_METHOD>, or 1 if the X<509_LOOKUP_METHOD> doesn't have a control function. Otherwise, it returns what the control function in the B<X509_LOOKUP_METHOD> returns, which is usually 1 on success and 0 in error.",
    "X509_LOOKUP_get_store": "X509_LOOKUP_get_store() returns a B<X509_STORE> pointer if there is one, otherwise NULL.",
    "X509_LOOKUP_by_subject_ex": "X509_LOOKUP_by_subject_ex(), X509_LOOKUP_by_subject(), X509_LOOKUP_by_issuer_serial(), X509_LOOKUP_by_fingerprint(), and X509_LOOKUP_by_alias() all return 0 if there is no B<X509_LOOKUP_METHOD> or that method doesn't implement the corresponding function. Otherwise, it returns what the corresponding function in the B<X509_LOOKUP_METHOD> returns, which is usually 1 on success and 0 in error.",
    "X509_LOOKUP_by_subject": "X509_LOOKUP_by_subject_ex(), X509_LOOKUP_by_subject(), X509_LOOKUP_by_issuer_serial(), X509_LOOKUP_by_fingerprint(), and X509_LOOKUP_by_alias() all return 0 if there is no B<X509_LOOKUP_METHOD> or that method doesn't implement the corresponding function. Otherwise, it returns what the corresponding function in the B<X509_LOOKUP_METHOD> returns, which is usually 1 on success and 0 in error.",
    "X509_LOOKUP_by_issuer_serial": "X509_LOOKUP_by_subject_ex(), X509_LOOKUP_by_subject(), X509_LOOKUP_by_issuer_serial(), X509_LOOKUP_by_fingerprint(), and X509_LOOKUP_by_alias() all return 0 if there is no B<X509_LOOKUP_METHOD> or that method doesn't implement the corresponding function. Otherwise, it returns what the corresponding function in the B<X509_LOOKUP_METHOD> returns, which is usually 1 on success and 0 in error.",
    "X509_LOOKUP_by_fingerprint": "X509_LOOKUP_by_subject_ex(), X509_LOOKUP_by_subject(), X509_LOOKUP_by_issuer_serial(), X509_LOOKUP_by_fingerprint(), and X509_LOOKUP_by_alias() all return 0 if there is no B<X509_LOOKUP_METHOD> or that method doesn't implement the corresponding function. Otherwise, it returns what the corresponding function in the B<X509_LOOKUP_METHOD> returns, which is usually 1 on success and 0 in error.",
    "X509_LOOKUP_by_alias": "X509_LOOKUP_by_subject_ex(), X509_LOOKUP_by_subject(), X509_LOOKUP_by_issuer_serial(), X509_LOOKUP_by_fingerprint(), and X509_LOOKUP_by_alias() all return 0 if there is no B<X509_LOOKUP_METHOD> or that method doesn't implement the corresponding function. Otherwise, it returns what the corresponding function in the B<X509_LOOKUP_METHOD> returns, which is usually 1 on success and 0 in error.",
    "PKCS12_add_safe": "PKCS12_add_safe() returns a value of 1 indicating success or 0 for failure.",
    "PKCS12_add_safes": "PKCS12_add_safes() returns a valid B<PKCS12> structure or NULL if an error occurred.",
    "DSA_do_sign": "DSA_do_sign() returns the signature, NULL on error.  DSA_do_verify() returns 1 for a valid signature, 0 for an incorrect signature and -1 on error. The error codes can be obtained by L<ERR_get_error(3)>.",
    "DSA_do_verify": "DSA_do_sign() returns the signature, NULL on error.  DSA_do_verify() returns 1 for a valid signature, 0 for an incorrect signature and -1 on error. The error codes can be obtained by L<ERR_get_error(3)>.",
    "EVP_PKEY_CTX_get0_libctx": "EVP_PKEY_CTX_get0_libctx() and EVP_PKEY_CTX_get0_propq() functions return the OSSL_LIB_CTX and property query string associated with the EVP_PKEY_CTX or NULL if they are not set. The returned values should not be freed by the caller.",
    "EVP_PKEY_CTX_get0_propq": "EVP_PKEY_CTX_get0_libctx() and EVP_PKEY_CTX_get0_propq() functions return the OSSL_LIB_CTX and property query string associated with the EVP_PKEY_CTX or NULL if they are not set. The returned values should not be freed by the caller.",
    "EVP_PKEY_CTX_get0_provider": "EVP_PKEY_CTX_get0_provider() returns a provider if an operation performed by a provider is ongoing, otherwise NULL.",
    "RSA_padding_add_xxx": "The RSA_padding_add_xxx() functions return 1 on success, 0 on error. The RSA_padding_check_xxx() functions return the length of the recovered data, -1 on error. Error codes can be obtained by calling L<ERR_get_error(3)>.",
    "RSA_padding_check_xxx": "The RSA_padding_add_xxx() functions return 1 on success, 0 on error. The RSA_padding_check_xxx() functions return the length of the recovered data, -1 on error. Error codes can be obtained by calling L<ERR_get_error(3)>.",
    "SSL_CTX_set_max_cert_list": "SSL_CTX_set_max_cert_list() and SSL_set_max_cert_list() return the previously set value.",
    "SSL_set_max_cert_list": "SSL_CTX_set_max_cert_list() and SSL_set_max_cert_list() return the previously set value.",
    "SSL_CTX_get_max_cert_list": "SSL_CTX_get_max_cert_list() and SSL_get_max_cert_list() return the currently set value.",
    "SSL_get_max_cert_list": "SSL_CTX_get_max_cert_list() and SSL_get_max_cert_list() return the currently set value.",
    "RAND_get0_primary": "RAND_get0_primary() returns a pointer to the I<primary> DRBG instance for the given OSSL_LIB_CTX B<ctx>.",
    "RAND_get0_public": "RAND_get0_public() returns a pointer to the I<public> DRBG instance for the given OSSL_LIB_CTX B<ctx>.",
    "RAND_get0_private": "RAND_get0_private() returns a pointer to the I<private> DRBG instance for the given OSSL_LIB_CTX B<ctx>.",
    "SSL_in_init": "SSL_in_init(), SSL_in_before(), SSL_is_init_finished(), SSL_in_connect_init() and SSL_in_accept_init() return values as indicated above.",
    "SSL_in_before": "SSL_in_init(), SSL_in_before(), SSL_is_init_finished(), SSL_in_connect_init() and SSL_in_accept_init() return values as indicated above.",
    "SSL_is_init_finished": "SSL_in_init(), SSL_in_before(), SSL_is_init_finished(), SSL_in_connect_init() and SSL_in_accept_init() return values as indicated above.",
    "SSL_in_connect_init": "SSL_in_init(), SSL_in_before(), SSL_is_init_finished(), SSL_in_connect_init() and SSL_in_accept_init() return values as indicated above.",
    "SSL_in_accept_init": "SSL_in_init(), SSL_in_before(), SSL_is_init_finished(), SSL_in_connect_init() and SSL_in_accept_init() return values as indicated above.",
    "SSL_get_state": "SSL_get_state() returns the current handshake state.",
    "i2d_CMS_bio_stream": "i2d_CMS_bio_stream() returns 1 for success or 0 for failure.",
    "X509_get_pathlen": "X509_get_pathlen() returns the path length value, or -1 if the extension is not present.",
    "X509_get_extension_flags": "X509_get_extension_flags(), X509_get_key_usage() and X509_get_extended_key_usage() return sets of flags corresponding to the certificate extension values.",
    "X509_get_key_usage": "X509_get_extension_flags(), X509_get_key_usage() and X509_get_extended_key_usage() return sets of flags corresponding to the certificate extension values.",
    "X509_get_extended_key_usage": "X509_get_extension_flags(), X509_get_key_usage() and X509_get_extended_key_usage() return sets of flags corresponding to the certificate extension values.",
    "X509_get0_subject_key_id": "X509_get0_subject_key_id() returns the subject key identifier as a pointer to an B<ASN1_OCTET_STRING> structure or B<NULL> if the extension is absent or an error occurred during parsing.",
    "X509_get_proxy_pathlen": "X509_get_proxy_pathlen() returns the path length value if the given certificate is a proxy one and has a path length set, and -1 otherwise.",
    "SSL_CTX_set_options": "SSL_CTX_set_options() and SSL_set_options() return the new options bit-mask after adding B<options>.",
    "SSL_set_options": "SSL_CTX_set_options() and SSL_set_options() return the new options bit-mask after adding B<options>.",
    "SSL_CTX_clear_options": "SSL_CTX_clear_options() and SSL_clear_options() return the new options bit-mask after clearing B<options>.",
    "SSL_clear_options": "SSL_CTX_clear_options() and SSL_clear_options() return the new options bit-mask after clearing B<options>.",
    "SSL_CTX_get_options": "SSL_CTX_get_options() and SSL_get_options() return the current bit-mask.",
    "SSL_get_options": "SSL_CTX_get_options() and SSL_get_options() return the current bit-mask.",
    "SSL_get_secure_renegotiation_support": "SSL_get_secure_renegotiation_support() returns 1 is the peer supports secure renegotiation and 0 if it does not.",
    "CMS_get0_type": "CMS_get0_type() and CMS_get0_eContentType() return an ASN1_OBJECT structure.",
    "CMS_get0_eContentType": "CMS_get0_type() and CMS_get0_eContentType() return an ASN1_OBJECT structure.",
    "CMS_set1_eContentType": "CMS_set1_eContentType() returns 1 for success or 0 if an error occurred.  The error can be obtained from ERR_get_error(3).",
    "TS_VERIFY_CTX_set_certs": "TS_VERIFY_CTX_set_certs() returns the stack of B<X509> certificates the user passes in via parameter B<certs>.",
    "PKCS7_get_octet_string": "PKCS7_get_octet_string() returns an ASN1_OCTET_STRING pointer.",
    "EVP_PKEY_digestsign_supports_digest": "The EVP_PKEY_digestsign_supports_digest() function returns 1 if the message digest algorithm identified by I<name> can be used for public key signature operations associated with key I<pkey> and 0 if it cannot be used. It returns a negative value for failure.",
    "SSL_get_version": "SSL_get_version() returns one of the following strings:",
    "SSL_version": "SSL_version() and SSL_client_version() return an integer which could include any of the following:",
    "SSL_client_version": "The connection uses the TLSv1.3 protocol (never returned for SSL_client_version()).",
    "EVP_PKEY2PKCS8": "EVP_PKEY2PKCS8() returns a PKCS8 object on success. EVP_PKCS82PKEY() and EVP_PKCS82PKEY_ex() return a private key on success.",
    "EVP_PKCS82PKEY": "EVP_PKEY2PKCS8() returns a PKCS8 object on success. EVP_PKCS82PKEY() and EVP_PKCS82PKEY_ex() return a private key on success.",
    "EVP_PKCS82PKEY_ex": "EVP_PKEY2PKCS8() returns a PKCS8 object on success. EVP_PKCS82PKEY() and EVP_PKCS82PKEY_ex() return a private key on success.",
    "ERR_clear_error": "ERR_clear_error() has no return value.",
    "X509_NAME_oneline": "X509_NAME_oneline() returns a valid string on success or NULL on error.",
    "X509_NAME_print": "X509_NAME_print_ex() and X509_NAME_print_ex_fp() return 1 on success or 0 on error if the B<XN_FLAG_COMPAT> is set, which is the same as X509_NAME_print(). Otherwise, it returns -1 on error or other values on success.",
    "X509_NAME_print_ex": "X509_NAME_print_ex() and X509_NAME_print_ex_fp() return 1 on success or 0 on error if the B<XN_FLAG_COMPAT> is set, which is the same as X509_NAME_print(). Otherwise, it returns -1 on error or other values on success.",
    "X509_NAME_print_ex_fp": "X509_NAME_print_ex() and X509_NAME_print_ex_fp() return 1 on success or 0 on error if the B<XN_FLAG_COMPAT> is set, which is the same as X509_NAME_print(). Otherwise, it returns -1 on error or other values on success.",
    "SSL_check_chain": "SSL_check_chain() returns a bitmap of flags indicating the validity of the chain.",
    "BIO_f_readbuffer": "BIO_f_readbuffer() returns the read buffering BIO method.",
    "EVP_PKEY_decrypt_init": "EVP_PKEY_decrypt_init(), EVP_PKEY_decrypt_init_ex() and EVP_PKEY_decrypt() return 1 for success and 0 or a negative value for failure. In particular a return value of -2 indicates the operation is not supported by the public key algorithm.",
    "EVP_PKEY_decrypt_init_ex": "EVP_PKEY_decrypt_init(), EVP_PKEY_decrypt_init_ex() and EVP_PKEY_decrypt() return 1 for success and 0 or a negative value for failure. In particular a return value of -2 indicates the operation is not supported by the public key algorithm.",
    "EVP_PKEY_decrypt": "EVP_PKEY_decrypt_init(), EVP_PKEY_decrypt_init_ex() and EVP_PKEY_decrypt() return 1 for success and 0 or a negative value for failure. In particular a return value of -2 indicates the operation is not supported by the public key algorithm.",
    "OSSL_HTTP_open": "OSSL_HTTP_open() returns on success a B<OSSL_HTTP_REQ_CTX>, else NULL.",
    "OSSL_HTTP_proxy_connect": "OSSL_HTTP_proxy_connect() and OSSL_HTTP_set1_request() return 1 on success, 0 on error.",
    "OSSL_HTTP_set1_request": "OSSL_HTTP_proxy_connect() and OSSL_HTTP_set1_request() return 1 on success, 0 on error.",
    "OSSL_HTTP_exchange": "On success, OSSL_HTTP_exchange(), OSSL_HTTP_get(), and OSSL_HTTP_transfer() return a memory BIO containing the data received if an ASN.1-encoded response is expected, else a BIO that may support streaming. The BIO must be freed by the caller. On failure, they return NULL. Failure conditions include connection/transfer timeout, parse errors, etc.",
    "OSSL_HTTP_get": "On success, OSSL_HTTP_exchange(), OSSL_HTTP_get(), and OSSL_HTTP_transfer() return a memory BIO containing the data received if an ASN.1-encoded response is expected, else a BIO that may support streaming. The BIO must be freed by the caller. On failure, they return NULL. Failure conditions include connection/transfer timeout, parse errors, etc.",
    "OSSL_HTTP_transfer": "On success, OSSL_HTTP_exchange(), OSSL_HTTP_get(), and OSSL_HTTP_transfer() return a memory BIO containing the data received if an ASN.1-encoded response is expected, else a BIO that may support streaming. The BIO must be freed by the caller. On failure, they return NULL. Failure conditions include connection/transfer timeout, parse errors, etc.",
    "OSSL_HTTP_close": "OSSL_HTTP_close() returns 0 if anything went wrong while disconnecting, else 1.",
    "BIO_get_data": "BIO_get_data() returns a pointer to the implementation specific custom data associated with this BIO, or NULL if none has been set.",
    "BIO_get_init": "BIO_get_init() returns the state of the BIO's init flag.",
    "BIO_get_shutdown": "BIO_get_shutdown() returns the stat of the BIO's shutdown (i.e. BIO_CLOSE) flag.",
    "SSL_alert_type_string": "The following strings can occur for SSL_alert_type_string() or SSL_alert_type_string_long():",
    "SSL_alert_type_string_long": "The following strings can occur for SSL_alert_type_string() or SSL_alert_type_string_long():",
    "SSL_alert_desc_string": "The following strings can occur for SSL_alert_desc_string() or SSL_alert_desc_string_long():",
    "SSL_alert_desc_string_long": "The following strings can occur for SSL_alert_desc_string() or SSL_alert_desc_string_long():",
    "_ctrl": "The return values of the SSL*_ctrl() functions depend on the command supplied via the B<cmd> parameter.",
    "EVP_PKEY_encrypt_init": "EVP_PKEY_encrypt_init(), EVP_PKEY_encrypt_init_ex() and EVP_PKEY_encrypt() return 1 for success and 0 or a negative value for failure. In particular a return value of -2 indicates the operation is not supported by the public key algorithm.",
    "EVP_PKEY_encrypt_init_ex": "EVP_PKEY_encrypt_init(), EVP_PKEY_encrypt_init_ex() and EVP_PKEY_encrypt() return 1 for success and 0 or a negative value for failure. In particular a return value of -2 indicates the operation is not supported by the public key algorithm.",
    "EVP_PKEY_encrypt": "EVP_PKEY_encrypt_init(), EVP_PKEY_encrypt_init_ex() and EVP_PKEY_encrypt() return 1 for success and 0 or a negative value for failure. In particular a return value of -2 indicates the operation is not supported by the public key algorithm.",
    "EVP_CIPHER_CTX_get_cipher_data": "The EVP_CIPHER_CTX_get_cipher_data() function returns a pointer to the current cipher data for the EVP_CIPHER_CTX.",
    "EVP_CIPHER_CTX_set_cipher_data": "The EVP_CIPHER_CTX_set_cipher_data() function returns a pointer to the old cipher data for the EVP_CIPHER_CTX.",
    "RAND_egd": "RAND_egd() and RAND_egd_bytes() return the number of bytes read from the daemon on success, or -1 if the connection failed or the daemon did not return enough data to fully seed the PRNG.",
    "RAND_egd_bytes": "RAND_egd() and RAND_egd_bytes() return the number of bytes read from the daemon on success, or -1 if the connection failed or the daemon did not return enough data to fully seed the PRNG.",
    "RAND_query_egd_bytes": "RAND_query_egd_bytes() returns the number of bytes read from the daemon on success, or -1 if the connection failed.",
    "SSL_CONF_cmd": "SSL_CONF_cmd() returns 1 if the value of B<option> is recognised and B<value> is B<NOT> used and 2 if both B<option> and B<value> are used. In other words it returns the number of arguments processed. This is useful when processing command lines.",
    "OSSL_trace_get_category_num": "OSSL_trace_get_category_num() returns the category number if the given C<name> is a recognised category name, otherwise -1.",
    "OSSL_trace_get_category_name": "OSSL_trace_get_category_name() returns the category name if the given C<num> is a recognised category number, otherwise NULL.",
    "OSSL_CRMF_MSG_get_certReqId": "OSSL_CRMF_MSG_get_certReqId() returns the certificate request ID as a nonnegative integer or -1 on error.",
    "EVP_PKEY_CTX_set_params": "EVP_PKEY_CTX_set_params() returns 1 for success or 0 otherwise. EVP_PKEY_CTX_settable_params() returns an OSSL_PARAM array on success or NULL on error. It may also return NULL if there are no settable parameters available.",
    "EVP_PKEY_CTX_settable_params": "EVP_PKEY_CTX_set_params() returns 1 for success or 0 otherwise. EVP_PKEY_CTX_settable_params() returns an OSSL_PARAM array on success or NULL on error. It may also return NULL if there are no settable parameters available.",
    "d2i_SSL_SESSION": "d2i_SSL_SESSION() returns a pointer to the newly allocated SSL_SESSION object. In case of failure the NULL-pointer is returned and the error message can be retrieved from the error stack.",
    "i2d_SSL_SESSION": "i2d_SSL_SESSION() returns the size of the ASN1 representation in bytes. When the session is not valid, B<0> is returned and no operation is performed.",
    "SSL_CTX_free": "SSL_CTX_free() does not provide diagnostic information.",
    "SSL_set_shutdown": "SSL_set_shutdown() does not return diagnostic information.",
    "SSL_get_shutdown": "SSL_get_shutdown() returns the current setting.",
    "PKCS12_init": "PKCS12_init() and PKCS12_init_ex() return a valid B<PKCS12> structure or NULL if an error occurred.",
    "PKCS12_init_ex": "PKCS12_init() and PKCS12_init_ex() return a valid B<PKCS12> structure or NULL if an error occurred.",
    "SSL_SESSION_get_compress_id": "SSL_SESSION_get_compress_id() returns the id of the compression method or 0 if none.",
    "CMS_EnvelopedData_create": "If the allocation fails, CMS_EnvelopedData_create() and CMS_AuthEnvelopedData_create() return NULL and set an error code that can be obtained by L<ERR_get_error(3)>. Otherwise they return a pointer to the newly allocated structure.",
    "CMS_AuthEnvelopedData_create": "If the allocation fails, CMS_EnvelopedData_create() and CMS_AuthEnvelopedData_create() return NULL and set an error code that can be obtained by L<ERR_get_error(3)>. Otherwise they return a pointer to the newly allocated structure.",
    "CT_POLICY_EVAL_CTX_new_ex": "CT_POLICY_EVAL_CTX_new_ex() and CT_POLICY_EVAL_CTX_new() will return NULL if malloc fails.",
    "CT_POLICY_EVAL_CTX_new": "CT_POLICY_EVAL_CTX_new_ex() and CT_POLICY_EVAL_CTX_new() will return NULL if malloc fails.",
    "X509_SIG_get0": "X509_SIG_get0() and X509_SIG_getm() return no values.",
    "X509_SIG_getm": "X509_SIG_get0() and X509_SIG_getm() return no values.",
    "SSL_SESSION_is_resumable": "SSL_SESSION_is_resumable() returns 1 if the session is resumable or 0 otherwise.",
    "X509_EXTENSION_set_object": "X509_EXTENSION_set_object() X509_EXTENSION_set_critical() and X509_EXTENSION_set_data() return B<1> for success and B<0> for failure.",
    "X509_EXTENSION_set_critical": "X509_EXTENSION_set_object() X509_EXTENSION_set_critical() and X509_EXTENSION_set_data() return B<1> for success and B<0> for failure.",
    "X509_EXTENSION_set_data": "X509_EXTENSION_set_object() X509_EXTENSION_set_critical() and X509_EXTENSION_set_data() return B<1> for success and B<0> for failure.",
    "X509_EXTENSION_create_by_NID": "X509_EXTENSION_create_by_NID() and X509_EXTENSION_create_by_OBJ() return an B<X509_EXTENSION> pointer or B<NULL> if an error occurs.",
    "X509_EXTENSION_create_by_OBJ": "X509_EXTENSION_create_by_NID() and X509_EXTENSION_create_by_OBJ() return an B<X509_EXTENSION> pointer or B<NULL> if an error occurs.",
    "X509_EXTENSION_get_object": "X509_EXTENSION_get_object() returns an B<ASN1_OBJECT> pointer.",
    "X509_EXTENSION_get_critical": "X509_EXTENSION_get_critical() returns B<0> for non-critical and B<1> for critical.",
    "X509_EXTENSION_get_data": "X509_EXTENSION_get_data() returns an B<ASN1_OCTET_STRING> pointer.",
    "SSL_CONF_CTX_set_ssl_ctx": "SSL_CONF_CTX_set_ssl_ctx() and SSL_CTX_set_ssl() do not return a value.",
    "SSL_CTX_set_ssl": "SSL_CONF_CTX_set_ssl_ctx() and SSL_CTX_set_ssl() do not return a value.",
    "BIO_f_null": "BIO_f_null() returns the null filter BIO method.",
    "RSA_PKCS1_OpenSSL": "RSA_PKCS1_OpenSSL(), RSA_PKCS1_null_method(), RSA_get_default_method() and RSA_get_method() return pointers to the respective RSA_METHODs.",
    "RSA_PKCS1_null_method": "RSA_PKCS1_OpenSSL(), RSA_PKCS1_null_method(), RSA_get_default_method() and RSA_get_method() return pointers to the respective RSA_METHODs.",
    "RSA_get_default_method": "RSA_PKCS1_OpenSSL(), RSA_PKCS1_null_method(), RSA_get_default_method() and RSA_get_method() return pointers to the respective RSA_METHODs.",
    "RSA_get_method": "RSA_PKCS1_OpenSSL(), RSA_PKCS1_null_method(), RSA_get_default_method() and RSA_get_method() return pointers to the respective RSA_METHODs.",
    "RSA_set_default_method": "RSA_set_default_method() returns no value.",
    "RSA_set_method": "RSA_set_method() returns a pointer to the old RSA_METHOD implementation that was replaced. However, this return value should probably be ignored because if it was supplied by an ENGINE, the pointer could be invalidated at any time if the ENGINE is unloaded (in fact it could be unloaded as a result of the RSA_set_method() function releasing its handle to the ENGINE). For this reason, the return type may be replaced with a B<void> declaration in a future release.",
    "RSA_new_method": "RSA_new_method() returns NULL and sets an error code that can be obtained by L<ERR_get_error(3)> if the allocation fails. Otherwise it returns a pointer to the newly allocated structure.",
    "EVP_KEYMGMT_fetch": "EVP_KEYMGMT_fetch() returns a pointer to the key management implementation represented by an EVP_KEYMGMT object, or NULL on error.",
    "EVP_KEYMGMT_up_ref": "EVP_KEYMGMT_up_ref() returns 1 on success, or 0 on error.",
    "EVP_KEYMGMT_names_do_all": "EVP_KEYMGMT_names_do_all() returns 1 if the callback was called for all names. A return value of 0 means that the callback was not called for any names.",
    "EVP_KEYMGMT_free": "EVP_KEYMGMT_free() doesn't return any value.",
    "EVP_KEYMGMT_get0_provider": "EVP_KEYMGMT_get0_provider() returns a pointer to a provider object, or NULL on error.",
    "EVP_KEYMGMT_is_a": "EVP_KEYMGMT_is_a() returns 1 of I<keymgmt> was identifiable, otherwise 0.",
    "EVP_KEYMGMT_get0_name": "EVP_KEYMGMT_get0_name() returns the algorithm name, or NULL on error.",
    "EVP_KEYMGMT_get0_description": "EVP_KEYMGMT_get0_description() returns a pointer to a decription, or NULL if there isn't one.",
    "EVP_KEYMGMT_gettable_params": "EVP_KEYMGMT_gettable_params(), EVP_KEYMGMT_settable_params() and EVP_KEYMGMT_gen_settable_params() return a constant B<OSSL_PARAM> array or NULL on error.",
    "EVP_KEYMGMT_settable_params": "EVP_KEYMGMT_gettable_params(), EVP_KEYMGMT_settable_params() and EVP_KEYMGMT_gen_settable_params() return a constant B<OSSL_PARAM> array or NULL on error.",
    "EVP_KEYMGMT_gen_settable_params": "EVP_KEYMGMT_gettable_params(), EVP_KEYMGMT_settable_params() and EVP_KEYMGMT_gen_settable_params() return a constant B<OSSL_PARAM> array or NULL on error.",
    "EVP_CIPHER_CTX_get_original_iv": "EVP_CIPHER_CTX_get_original_iv() and EVP_CIPHER_CTX_get_updated_iv() return 1 on success and 0 on failure.",
    "EVP_CIPHER_CTX_get_updated_iv": "EVP_CIPHER_CTX_get_original_iv() and EVP_CIPHER_CTX_get_updated_iv() return 1 on success and 0 on failure.",
    "EVP_CIPHER_CTX_iv": "The functions EVP_CIPHER_CTX_iv(), EVP_CIPHER_CTX_original_iv(), and EVP_CIPHER_CTX_iv_noconst() return a pointer to an IV as an array of bytes on success, and NULL on failure.",
    "EVP_CIPHER_CTX_original_iv": "The functions EVP_CIPHER_CTX_iv(), EVP_CIPHER_CTX_original_iv(), and EVP_CIPHER_CTX_iv_noconst() return a pointer to an IV as an array of bytes on success, and NULL on failure.",
    "EVP_CIPHER_CTX_iv_noconst": "The functions EVP_CIPHER_CTX_iv(), EVP_CIPHER_CTX_original_iv(), and EVP_CIPHER_CTX_iv_noconst() return a pointer to an IV as an array of bytes on success, and NULL on failure.",
    "BN_MONT_CTX_new": "BN_MONT_CTX_new() returns the newly allocated B<BN_MONT_CTX>, and NULL on error.",
    "BN_MONT_CTX_free": "BN_MONT_CTX_free() has no return value.",
    "EVP_PKEY_asn1_new": "EVP_PKEY_asn1_new() returns NULL on error, or a pointer to an B<EVP_PKEY_ASN1_METHOD> object otherwise.",
    "EVP_PKEY_asn1_add0": "EVP_PKEY_asn1_add0() and EVP_PKEY_asn1_add_alias() return 0 on error, or 1 on success.",
    "EVP_PKEY_asn1_add_alias": "EVP_PKEY_asn1_add0() and EVP_PKEY_asn1_add_alias() return 0 on error, or 1 on success.",
    "EVP_PKEY_get0_asn1": "EVP_PKEY_get0_asn1() returns NULL on error, or a pointer to a constant B<EVP_PKEY_ASN1_METHOD> object otherwise.",
    "SSL_CIPHER_get_name": "SSL_CIPHER_get_name(), SSL_CIPHER_standard_name(), OPENSSL_cipher_name(), SSL_CIPHER_get_version() and SSL_CIPHER_description() return the corresponding value in a null-terminated string for a specific cipher or \"(NONE)\" if the cipher is not found.",
    "SSL_CIPHER_standard_name": "SSL_CIPHER_get_name(), SSL_CIPHER_standard_name(), OPENSSL_cipher_name(), SSL_CIPHER_get_version() and SSL_CIPHER_description() return the corresponding value in a null-terminated string for a specific cipher or \"(NONE)\" if the cipher is not found.",
    "OPENSSL_cipher_name": "SSL_CIPHER_get_name(), SSL_CIPHER_standard_name(), OPENSSL_cipher_name(), SSL_CIPHER_get_version() and SSL_CIPHER_description() return the corresponding value in a null-terminated string for a specific cipher or \"(NONE)\" if the cipher is not found.",
    "SSL_CIPHER_get_version": "SSL_CIPHER_get_name(), SSL_CIPHER_standard_name(), OPENSSL_cipher_name(), SSL_CIPHER_get_version() and SSL_CIPHER_description() return the corresponding value in a null-terminated string for a specific cipher or \"(NONE)\" if the cipher is not found.",
    "SSL_CIPHER_description": "SSL_CIPHER_get_name(), SSL_CIPHER_standard_name(), OPENSSL_cipher_name(), SSL_CIPHER_get_version() and SSL_CIPHER_description() return the corresponding value in a null-terminated string for a specific cipher or \"(NONE)\" if the cipher is not found.",
    "SSL_CIPHER_get_bits": "SSL_CIPHER_get_bits() returns a positive integer representing the number of secret bits or 0 if an error occurred.",
    "SSL_CIPHER_get_cipher_nid": "SSL_CIPHER_get_cipher_nid(), SSL_CIPHER_get_digest_nid(), SSL_CIPHER_get_kx_nid() and SSL_CIPHER_get_auth_nid() return the NID value or B<NID_undef> if an error occurred.",
    "SSL_CIPHER_get_digest_nid": "SSL_CIPHER_get_cipher_nid(), SSL_CIPHER_get_digest_nid(), SSL_CIPHER_get_kx_nid() and SSL_CIPHER_get_auth_nid() return the NID value or B<NID_undef> if an error occurred.",
    "SSL_CIPHER_get_kx_nid": "SSL_CIPHER_get_cipher_nid(), SSL_CIPHER_get_digest_nid(), SSL_CIPHER_get_kx_nid() and SSL_CIPHER_get_auth_nid() return the NID value or B<NID_undef> if an error occurred.",
    "SSL_CIPHER_get_auth_nid": "SSL_CIPHER_get_cipher_nid(), SSL_CIPHER_get_digest_nid(), SSL_CIPHER_get_kx_nid() and SSL_CIPHER_get_auth_nid() return the NID value or B<NID_undef> if an error occurred.",
    "SSL_CIPHER_get_handshake_digest": "SSL_CIPHER_get_handshake_digest() returns a valid B<EVP_MD> structure or NULL if an error occurred.",
    "SSL_CIPHER_is_aead": "SSL_CIPHER_is_aead() returns 1 if the cipher is AEAD or 0 otherwise.",
    "SSL_CIPHER_find": "SSL_CIPHER_find() returns a valid B<SSL_CIPHER> structure or NULL if an error occurred.",
    "SSL_CIPHER_get_id": "SSL_CIPHER_get_id() returns a 4-byte integer representing the OpenSSL-specific ID.",
    "SSL_CIPHER_get_protocol_id": "SSL_CIPHER_get_protocol_id() returns a 2-byte integer representing the TLS protocol-specific ID.",
    "EVP_KDF_fetch": "EVP_KDF_fetch() returns a pointer to a newly fetched B<EVP_KDF>, or NULL if allocation failed.",
    "EVP_KDF_get0_provider": "EVP_KDF_get0_provider() returns a pointer to the provider for the KDF, or NULL on error.",
    "EVP_KDF_up_ref": "EVP_KDF_up_ref() returns 1 on success, 0 on error.",
    "EVP_KDF_CTX_new": "EVP_KDF_CTX_new() returns either the newly allocated B<EVP_KDF_CTX> structure or NULL if an error occurred.",
    "EVP_KDF_CTX_free": "EVP_KDF_CTX_free() and EVP_KDF_CTX_reset() do not return a value.",
    "EVP_KDF_CTX_reset": "EVP_KDF_CTX_free() and EVP_KDF_CTX_reset() do not return a value.",
    "EVP_KDF_CTX_get_kdf_size": "EVP_KDF_CTX_get_kdf_size() returns the output size.  B<SIZE_MAX> is returned to indicate that the algorithm produces a variable amount of output; 0 to indicate failure.",
    "EVP_KDF_get0_name": "EVP_KDF_get0_name() returns the name of the KDF, or NULL on error.",
    "EVP_KDF_names_do_all": "EVP_KDF_names_do_all() returns 1 if the callback was called for all names. A return value of 0 means that the callback was not called for any names."
}